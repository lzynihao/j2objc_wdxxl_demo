//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/digest/Md5Crypt.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/nio/charset/Charset.h"
#include "java/security/MessageDigest.h"
#include "java/util/Arrays.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/commons/codec/Charsets.h"
#include "org/apache/commons/codec/digest/B64.h"
#include "org/apache/commons/codec/digest/DigestUtils.h"
#include "org/apache/commons/codec/digest/Md5Crypt.h"

inline jint OrgApacheCommonsCodecDigestMd5Crypt_get_BLOCKSIZE();
#define OrgApacheCommonsCodecDigestMd5Crypt_BLOCKSIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecDigestMd5Crypt, BLOCKSIZE, jint)

inline jint OrgApacheCommonsCodecDigestMd5Crypt_get_ROUNDS();
#define OrgApacheCommonsCodecDigestMd5Crypt_ROUNDS 1000
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecDigestMd5Crypt, ROUNDS, jint)

NSString *OrgApacheCommonsCodecDigestMd5Crypt_APR1_PREFIX = @"$apr1$";
NSString *OrgApacheCommonsCodecDigestMd5Crypt_MD5_PREFIX = @"$1$";

@implementation OrgApacheCommonsCodecDigestMd5Crypt

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecDigestMd5Crypt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)apr1CryptWithByteArray:(IOSByteArray *)keyBytes {
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_(keyBytes);
}

+ (NSString *)apr1CryptWithByteArray:(IOSByteArray *)keyBytes
                        withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_withNSString_(keyBytes, salt);
}

+ (NSString *)apr1CryptWithNSString:(NSString *)keyBytes {
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithNSString_(keyBytes);
}

+ (NSString *)apr1CryptWithNSString:(NSString *)keyBytes
                       withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithNSString_withNSString_(keyBytes, salt);
}

+ (NSString *)md5CryptWithByteArray:(IOSByteArray *)keyBytes {
  return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_(keyBytes);
}

+ (NSString *)md5CryptWithByteArray:(IOSByteArray *)keyBytes
                       withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_(keyBytes, salt);
}

+ (NSString *)md5CryptWithByteArray:(IOSByteArray *)keyBytes
                       withNSString:(NSString *)salt
                       withNSString:(NSString *)prefix {
  return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_withNSString_(keyBytes, salt, prefix);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(apr1CryptWithByteArray:);
  methods[2].selector = @selector(apr1CryptWithByteArray:withNSString:);
  methods[3].selector = @selector(apr1CryptWithNSString:);
  methods[4].selector = @selector(apr1CryptWithNSString:withNSString:);
  methods[5].selector = @selector(md5CryptWithByteArray:);
  methods[6].selector = @selector(md5CryptWithByteArray:withNSString:);
  methods[7].selector = @selector(md5CryptWithByteArray:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "APR1_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 7, -1, -1 },
    { "BLOCKSIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecDigestMd5Crypt_BLOCKSIZE, 0x1a, -1, -1, -1, -1 },
    { "MD5_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 8, -1, -1 },
    { "ROUNDS", "I", .constantValue.asInt = OrgApacheCommonsCodecDigestMd5Crypt_ROUNDS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apr1Crypt", "[B", "[BLNSString;", "LNSString;", "LNSString;LNSString;", "md5Crypt", "[BLNSString;LNSString;", &OrgApacheCommonsCodecDigestMd5Crypt_APR1_PREFIX, &OrgApacheCommonsCodecDigestMd5Crypt_MD5_PREFIX };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecDigestMd5Crypt = { "Md5Crypt", "org.apache.commons.codec.digest", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecDigestMd5Crypt;
}

@end

void OrgApacheCommonsCodecDigestMd5Crypt_init(OrgApacheCommonsCodecDigestMd5Crypt *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecDigestMd5Crypt *new_OrgApacheCommonsCodecDigestMd5Crypt_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecDigestMd5Crypt, init)
}

OrgApacheCommonsCodecDigestMd5Crypt *create_OrgApacheCommonsCodecDigestMd5Crypt_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecDigestMd5Crypt, init)
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_(IOSByteArray *keyBytes) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_withNSString_(keyBytes, JreStrcat("$$", OrgApacheCommonsCodecDigestMd5Crypt_APR1_PREFIX, OrgApacheCommonsCodecDigestB64_getRandomSaltWithInt_(8)));
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_withNSString_(IOSByteArray *keyBytes, NSString *salt) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  if (salt != nil && ![salt java_hasPrefix:OrgApacheCommonsCodecDigestMd5Crypt_APR1_PREFIX]) {
    salt = JreStrcat("$$", OrgApacheCommonsCodecDigestMd5Crypt_APR1_PREFIX, salt);
  }
  return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_withNSString_(keyBytes, salt, OrgApacheCommonsCodecDigestMd5Crypt_APR1_PREFIX);
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithNSString_(NSString *keyBytes) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_([((NSString *) nil_chk(keyBytes)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)]);
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithNSString_withNSString_(NSString *keyBytes, NSString *salt) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  return OrgApacheCommonsCodecDigestMd5Crypt_apr1CryptWithByteArray_withNSString_([((NSString *) nil_chk(keyBytes)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)], salt);
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_(IOSByteArray *keyBytes) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_(keyBytes, JreStrcat("$$", OrgApacheCommonsCodecDigestMd5Crypt_MD5_PREFIX, OrgApacheCommonsCodecDigestB64_getRandomSaltWithInt_(8)));
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_(IOSByteArray *keyBytes, NSString *salt) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_withNSString_(keyBytes, salt, OrgApacheCommonsCodecDigestMd5Crypt_MD5_PREFIX);
}

NSString *OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_withNSString_(IOSByteArray *keyBytes, NSString *salt, NSString *prefix) {
  OrgApacheCommonsCodecDigestMd5Crypt_initialize();
  jint keyLen = ((IOSByteArray *) nil_chk(keyBytes))->size_;
  NSString *saltString;
  if (salt == nil) {
    saltString = OrgApacheCommonsCodecDigestB64_getRandomSaltWithInt_(8);
  }
  else {
    JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("C$$", '^', [((NSString *) nil_chk(prefix)) java_replace:@"$" withSequence:@"\\$"], @"([\\.\\/a-zA-Z0-9]{1,8}).*"));
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:salt];
    if (m == nil || ![m find]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid salt value: ", salt));
    }
    saltString = [m groupWithInt:1];
  }
  IOSByteArray *saltBytes = [((NSString *) nil_chk(saltString)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)];
  JavaSecurityMessageDigest *ctx = OrgApacheCommonsCodecDigestDigestUtils_getMd5Digest();
  [((JavaSecurityMessageDigest *) nil_chk(ctx)) updateWithByteArray:keyBytes];
  [ctx updateWithByteArray:[((NSString *) nil_chk(prefix)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)]];
  [ctx updateWithByteArray:saltBytes];
  JavaSecurityMessageDigest *ctx1 = OrgApacheCommonsCodecDigestDigestUtils_getMd5Digest();
  [((JavaSecurityMessageDigest *) nil_chk(ctx1)) updateWithByteArray:keyBytes];
  [ctx1 updateWithByteArray:saltBytes];
  [ctx1 updateWithByteArray:keyBytes];
  IOSByteArray *finalb = [ctx1 digest];
  jint ii = keyLen;
  while (ii > 0) {
    [ctx updateWithByteArray:finalb withInt:0 withInt:ii > 16 ? 16 : ii];
    ii -= 16;
  }
  JavaUtilArrays_fillWithByteArray_withByte_(finalb, (jbyte) 0);
  ii = keyLen;
  jint j = 0;
  while (ii > 0) {
    if ((ii & 1) == 1) {
      [ctx updateWithByte:IOSByteArray_Get(nil_chk(finalb), j)];
    }
    else {
      [ctx updateWithByte:IOSByteArray_Get(keyBytes, j)];
    }
    JreRShiftAssignInt(&ii, 1);
  }
  JavaLangStringBuilder *passwd = new_JavaLangStringBuilder_initWithNSString_(JreStrcat("$$C", prefix, saltString, '$'));
  finalb = [ctx digest];
  for (jint i = 0; i < OrgApacheCommonsCodecDigestMd5Crypt_ROUNDS; i++) {
    ctx1 = OrgApacheCommonsCodecDigestDigestUtils_getMd5Digest();
    if ((i & 1) != 0) {
      [((JavaSecurityMessageDigest *) nil_chk(ctx1)) updateWithByteArray:keyBytes];
    }
    else {
      [((JavaSecurityMessageDigest *) nil_chk(ctx1)) updateWithByteArray:finalb withInt:0 withInt:OrgApacheCommonsCodecDigestMd5Crypt_BLOCKSIZE];
    }
    if (i % 3 != 0) {
      [ctx1 updateWithByteArray:saltBytes];
    }
    if (i % 7 != 0) {
      [ctx1 updateWithByteArray:keyBytes];
    }
    if ((i & 1) != 0) {
      [ctx1 updateWithByteArray:finalb withInt:0 withInt:OrgApacheCommonsCodecDigestMd5Crypt_BLOCKSIZE];
    }
    else {
      [ctx1 updateWithByteArray:keyBytes];
    }
    finalb = [ctx1 digest];
  }
  OrgApacheCommonsCodecDigestB64_b64from24bitWithByte_withByte_withByte_withInt_withJavaLangStringBuilder_(IOSByteArray_Get(nil_chk(finalb), 0), IOSByteArray_Get(finalb, 6), IOSByteArray_Get(finalb, 12), 4, passwd);
  OrgApacheCommonsCodecDigestB64_b64from24bitWithByte_withByte_withByte_withInt_withJavaLangStringBuilder_(IOSByteArray_Get(finalb, 1), IOSByteArray_Get(finalb, 7), IOSByteArray_Get(finalb, 13), 4, passwd);
  OrgApacheCommonsCodecDigestB64_b64from24bitWithByte_withByte_withByte_withInt_withJavaLangStringBuilder_(IOSByteArray_Get(finalb, 2), IOSByteArray_Get(finalb, 8), IOSByteArray_Get(finalb, 14), 4, passwd);
  OrgApacheCommonsCodecDigestB64_b64from24bitWithByte_withByte_withByte_withInt_withJavaLangStringBuilder_(IOSByteArray_Get(finalb, 3), IOSByteArray_Get(finalb, 9), IOSByteArray_Get(finalb, 15), 4, passwd);
  OrgApacheCommonsCodecDigestB64_b64from24bitWithByte_withByte_withByte_withInt_withJavaLangStringBuilder_(IOSByteArray_Get(finalb, 4), IOSByteArray_Get(finalb, 10), IOSByteArray_Get(finalb, 5), 4, passwd);
  OrgApacheCommonsCodecDigestB64_b64from24bitWithByte_withByte_withByte_withInt_withJavaLangStringBuilder_((jbyte) 0, (jbyte) 0, IOSByteArray_Get(finalb, 11), 2, passwd);
  [ctx reset];
  [ctx1 reset];
  JavaUtilArrays_fillWithByteArray_withByte_(keyBytes, (jbyte) 0);
  JavaUtilArrays_fillWithByteArray_withByte_(saltBytes, (jbyte) 0);
  JavaUtilArrays_fillWithByteArray_withByte_(finalb, (jbyte) 0);
  return [passwd description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecDigestMd5Crypt)
