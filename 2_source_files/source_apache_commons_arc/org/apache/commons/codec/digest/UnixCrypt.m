//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/digest/UnixCrypt.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Random.h"
#include "org/apache/commons/codec/Charsets.h"
#include "org/apache/commons/codec/digest/B64.h"
#include "org/apache/commons/codec/digest/UnixCrypt.h"

@interface OrgApacheCommonsCodecDigestUnixCrypt ()

+ (IOSIntArray *)bodyWithIntArray:(IOSIntArray *)schedule
                          withInt:(jint)eSwap0
                          withInt:(jint)eSwap1;

+ (jint)byteToUnsignedWithByte:(jbyte)b;

+ (jint)dEncryptWithInt:(jint)el
                withInt:(jint)r
                withInt:(jint)s
                withInt:(jint)e0
                withInt:(jint)e1
           withIntArray:(IOSIntArray *)sArr;

+ (IOSIntArray *)desSetKeyWithByteArray:(IOSByteArray *)key;

+ (jint)fourBytesToIntWithByteArray:(IOSByteArray *)b
                            withInt:(jint)offset;

+ (jint)hPermOpWithInt:(jint)a
               withInt:(jint)n
               withInt:(jint)m;

+ (void)intToFourBytesWithInt:(jint)iValue
                withByteArray:(IOSByteArray *)b
                      withInt:(jint)offset;

+ (void)permOpWithInt:(jint)a
              withInt:(jint)b
              withInt:(jint)n
              withInt:(jint)m
         withIntArray:(IOSIntArray *)results;

@end

inline IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_get_CON_SALT();
static IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_CON_SALT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecDigestUnixCrypt, CON_SALT, IOSIntArray *)

inline IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_get_COV2CHAR();
static IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_COV2CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecDigestUnixCrypt, COV2CHAR, IOSIntArray *)

inline IOSCharArray *OrgApacheCommonsCodecDigestUnixCrypt_get_SALT_CHARS();
static IOSCharArray *OrgApacheCommonsCodecDigestUnixCrypt_SALT_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecDigestUnixCrypt, SALT_CHARS, IOSCharArray *)

inline IOSBooleanArray *OrgApacheCommonsCodecDigestUnixCrypt_get_SHIFT2();
static IOSBooleanArray *OrgApacheCommonsCodecDigestUnixCrypt_SHIFT2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecDigestUnixCrypt, SHIFT2, IOSBooleanArray *)

inline IOSObjectArray *OrgApacheCommonsCodecDigestUnixCrypt_get_SKB();
static IOSObjectArray *OrgApacheCommonsCodecDigestUnixCrypt_SKB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecDigestUnixCrypt, SKB, IOSObjectArray *)

inline IOSObjectArray *OrgApacheCommonsCodecDigestUnixCrypt_get_SPTRANS();
static IOSObjectArray *OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecDigestUnixCrypt, SPTRANS, IOSObjectArray *)

__attribute__((unused)) static IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_bodyWithIntArray_withInt_withInt_(IOSIntArray *schedule, jint eSwap0, jint eSwap1);

__attribute__((unused)) static jint OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(jbyte b);

__attribute__((unused)) static jint OrgApacheCommonsCodecDigestUnixCrypt_dEncryptWithInt_withInt_withInt_withInt_withInt_withIntArray_(jint el, jint r, jint s, jint e0, jint e1, IOSIntArray *sArr);

__attribute__((unused)) static IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_desSetKeyWithByteArray_(IOSByteArray *key);

__attribute__((unused)) static jint OrgApacheCommonsCodecDigestUnixCrypt_fourBytesToIntWithByteArray_withInt_(IOSByteArray *b, jint offset);

__attribute__((unused)) static jint OrgApacheCommonsCodecDigestUnixCrypt_hPermOpWithInt_withInt_withInt_(jint a, jint n, jint m);

__attribute__((unused)) static void OrgApacheCommonsCodecDigestUnixCrypt_intToFourBytesWithInt_withByteArray_withInt_(jint iValue, IOSByteArray *b, jint offset);

__attribute__((unused)) static void OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(jint a, jint b, jint n, jint m, IOSIntArray *results);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecDigestUnixCrypt)

@implementation OrgApacheCommonsCodecDigestUnixCrypt

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecDigestUnixCrypt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)cryptWithByteArray:(IOSByteArray *)original {
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_(original);
}

+ (NSString *)cryptWithByteArray:(IOSByteArray *)original
                    withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_withNSString_(original, salt);
}

+ (NSString *)cryptWithNSString:(NSString *)original {
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithNSString_(original);
}

+ (NSString *)cryptWithNSString:(NSString *)original
                   withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithNSString_withNSString_(original, salt);
}

+ (IOSIntArray *)bodyWithIntArray:(IOSIntArray *)schedule
                          withInt:(jint)eSwap0
                          withInt:(jint)eSwap1 {
  return OrgApacheCommonsCodecDigestUnixCrypt_bodyWithIntArray_withInt_withInt_(schedule, eSwap0, eSwap1);
}

+ (jint)byteToUnsignedWithByte:(jbyte)b {
  return OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(b);
}

+ (jint)dEncryptWithInt:(jint)el
                withInt:(jint)r
                withInt:(jint)s
                withInt:(jint)e0
                withInt:(jint)e1
           withIntArray:(IOSIntArray *)sArr {
  return OrgApacheCommonsCodecDigestUnixCrypt_dEncryptWithInt_withInt_withInt_withInt_withInt_withIntArray_(el, r, s, e0, e1, sArr);
}

+ (IOSIntArray *)desSetKeyWithByteArray:(IOSByteArray *)key {
  return OrgApacheCommonsCodecDigestUnixCrypt_desSetKeyWithByteArray_(key);
}

+ (jint)fourBytesToIntWithByteArray:(IOSByteArray *)b
                            withInt:(jint)offset {
  return OrgApacheCommonsCodecDigestUnixCrypt_fourBytesToIntWithByteArray_withInt_(b, offset);
}

+ (jint)hPermOpWithInt:(jint)a
               withInt:(jint)n
               withInt:(jint)m {
  return OrgApacheCommonsCodecDigestUnixCrypt_hPermOpWithInt_withInt_withInt_(a, n, m);
}

+ (void)intToFourBytesWithInt:(jint)iValue
                withByteArray:(IOSByteArray *)b
                      withInt:(jint)offset {
  OrgApacheCommonsCodecDigestUnixCrypt_intToFourBytesWithInt_withByteArray_withInt_(iValue, b, offset);
}

+ (void)permOpWithInt:(jint)a
              withInt:(jint)b
              withInt:(jint)n
              withInt:(jint)m
         withIntArray:(IOSIntArray *)results {
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(a, b, n, m, results);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 11, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cryptWithByteArray:);
  methods[2].selector = @selector(cryptWithByteArray:withNSString:);
  methods[3].selector = @selector(cryptWithNSString:);
  methods[4].selector = @selector(cryptWithNSString:withNSString:);
  methods[5].selector = @selector(bodyWithIntArray:withInt:withInt:);
  methods[6].selector = @selector(byteToUnsignedWithByte:);
  methods[7].selector = @selector(dEncryptWithInt:withInt:withInt:withInt:withInt:withIntArray:);
  methods[8].selector = @selector(desSetKeyWithByteArray:);
  methods[9].selector = @selector(fourBytesToIntWithByteArray:withInt:);
  methods[10].selector = @selector(hPermOpWithInt:withInt:withInt:);
  methods[11].selector = @selector(intToFourBytesWithInt:withByteArray:withInt:);
  methods[12].selector = @selector(permOpWithInt:withInt:withInt:withInt:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CON_SALT", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "COV2CHAR", "[I", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "SALT_CHARS", "[C", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "SHIFT2", "[Z", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "SKB", "[[I", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "SPTRANS", "[[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "crypt", "[B", "[BLNSString;", "LNSString;", "LNSString;LNSString;", "body", "[III", "byteToUnsigned", "B", "dEncrypt", "IIIII[I", "desSetKey", "fourBytesToInt", "[BI", "hPermOp", "III", "intToFourBytes", "I[BI", "permOp", "IIII[I", &OrgApacheCommonsCodecDigestUnixCrypt_CON_SALT, &OrgApacheCommonsCodecDigestUnixCrypt_COV2CHAR, &OrgApacheCommonsCodecDigestUnixCrypt_SALT_CHARS, &OrgApacheCommonsCodecDigestUnixCrypt_SHIFT2, &OrgApacheCommonsCodecDigestUnixCrypt_SKB, &OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecDigestUnixCrypt = { "UnixCrypt", "org.apache.commons.codec.digest", ptrTable, methods, fields, 7, 0x1, 13, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecDigestUnixCrypt;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecDigestUnixCrypt class]) {
    OrgApacheCommonsCodecDigestUnixCrypt_CON_SALT = [IOSIntArray newArrayWithInts:(jint[]){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 0, 0, 0, 0 } count:128];
    OrgApacheCommonsCodecDigestUnixCrypt_COV2CHAR = [IOSIntArray newArrayWithInts:(jint[]){ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 } count:64];
    OrgApacheCommonsCodecDigestUnixCrypt_SALT_CHARS = [@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./" java_toCharArray];
    OrgApacheCommonsCodecDigestUnixCrypt_SHIFT2 = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, false, true, true, true, true, true, true, false, true, true, true, true, true, true, false } count:16];
    OrgApacheCommonsCodecDigestUnixCrypt_SKB = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSIntArray newArrayWithInts:(jint[]){ 0, 16, (jint) 0x20000000, (jint) 0x20000010, (jint) 0x10000, (jint) 0x10010, (jint) 0x20010000, (jint) 0x20010010, 2048, 2064, (jint) 0x20000800, (jint) 0x20000810, (jint) 0x10800, (jint) 0x10810, (jint) 0x20010800, (jint) 0x20010810, 32, 48, (jint) 0x20000020, (jint) 0x20000030, (jint) 0x10020, (jint) 0x10030, (jint) 0x20010020, (jint) 0x20010030, 2080, 2096, (jint) 0x20000820, (jint) 0x20000830, (jint) 0x10820, (jint) 0x10830, (jint) 0x20010820, (jint) 0x20010830, (jint) 0x80000, (jint) 0x80010, (jint) 0x20080000, (jint) 0x20080010, (jint) 0x90000, (jint) 0x90010, (jint) 0x20090000, (jint) 0x20090010, (jint) 0x80800, (jint) 0x80810, (jint) 0x20080800, (jint) 0x20080810, (jint) 0x90800, (jint) 0x90810, (jint) 0x20090800, (jint) 0x20090810, (jint) 0x80020, (jint) 0x80030, (jint) 0x20080020, (jint) 0x20080030, (jint) 0x90020, (jint) 0x90030, (jint) 0x20090020, (jint) 0x20090030, (jint) 0x80820, (jint) 0x80830, (jint) 0x20080820, (jint) 0x20080830, (jint) 0x90820, (jint) 0x90830, (jint) 0x20090820, (jint) 0x20090830 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, (jint) 0x2000000, 8192, (jint) 0x2002000, (jint) 0x200000, (jint) 0x2200000, (jint) 0x202000, (jint) 0x2202000, 4, (jint) 0x2000004, 8196, (jint) 0x2002004, (jint) 0x200004, (jint) 0x2200004, (jint) 0x202004, (jint) 0x2202004, 1024, (jint) 0x2000400, 9216, (jint) 0x2002400, (jint) 0x200400, (jint) 0x2200400, (jint) 0x202400, (jint) 0x2202400, 1028, (jint) 0x2000404, 9220, (jint) 0x2002404, (jint) 0x200404, (jint) 0x2200404, (jint) 0x202404, (jint) 0x2202404, (jint) 0x10000000, (jint) 0x12000000, (jint) 0x10002000, (jint) 0x12002000, (jint) 0x10200000, (jint) 0x12200000, (jint) 0x10202000, (jint) 0x12202000, (jint) 0x10000004, (jint) 0x12000004, (jint) 0x10002004, (jint) 0x12002004, (jint) 0x10200004, (jint) 0x12200004, (jint) 0x10202004, (jint) 0x12202004, (jint) 0x10000400, (jint) 0x12000400, (jint) 0x10002400, (jint) 0x12002400, (jint) 0x10200400, (jint) 0x12200400, (jint) 0x10202400, (jint) 0x12202400, (jint) 0x10000404, (jint) 0x12000404, (jint) 0x10002404, (jint) 0x12002404, (jint) 0x10200404, (jint) 0x12200404, (jint) 0x10202404, (jint) 0x12202404 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, (jint) 0x40000, (jint) 0x40001, (jint) 0x1000000, (jint) 0x1000001, (jint) 0x1040000, (jint) 0x1040001, 2, 3, (jint) 0x40002, (jint) 0x40003, (jint) 0x1000002, (jint) 0x1000003, (jint) 0x1040002, (jint) 0x1040003, 512, 513, (jint) 0x40200, (jint) 0x40201, (jint) 0x1000200, (jint) 0x1000201, (jint) 0x1040200, (jint) 0x1040201, 514, 515, (jint) 0x40202, (jint) 0x40203, (jint) 0x1000202, (jint) 0x1000203, (jint) 0x1040202, (jint) 0x1040203, (jint) 0x8000000, (jint) 0x8000001, (jint) 0x8040000, (jint) 0x8040001, (jint) 0x9000000, (jint) 0x9000001, (jint) 0x9040000, (jint) 0x9040001, (jint) 0x8000002, (jint) 0x8000003, (jint) 0x8040002, (jint) 0x8040003, (jint) 0x9000002, (jint) 0x9000003, (jint) 0x9040002, (jint) 0x9040003, (jint) 0x8000200, (jint) 0x8000201, (jint) 0x8040200, (jint) 0x8040201, (jint) 0x9000200, (jint) 0x9000201, (jint) 0x9040200, (jint) 0x9040201, (jint) 0x8000202, (jint) 0x8000203, (jint) 0x8040202, (jint) 0x8040203, (jint) 0x9000202, (jint) 0x9000203, (jint) 0x9040202, (jint) 0x9040203 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, (jint) 0x100000, 256, (jint) 0x100100, 8, (jint) 0x100008, 264, (jint) 0x100108, 4096, (jint) 0x101000, 4352, (jint) 0x101100, 4104, (jint) 0x101008, 4360, (jint) 0x101108, (jint) 0x4000000, (jint) 0x4100000, (jint) 0x4000100, (jint) 0x4100100, (jint) 0x4000008, (jint) 0x4100008, (jint) 0x4000108, (jint) 0x4100108, (jint) 0x4001000, (jint) 0x4101000, (jint) 0x4001100, (jint) 0x4101100, (jint) 0x4001008, (jint) 0x4101008, (jint) 0x4001108, (jint) 0x4101108, (jint) 0x20000, (jint) 0x120000, (jint) 0x20100, (jint) 0x120100, (jint) 0x20008, (jint) 0x120008, (jint) 0x20108, (jint) 0x120108, (jint) 0x21000, (jint) 0x121000, (jint) 0x21100, (jint) 0x121100, (jint) 0x21008, (jint) 0x121008, (jint) 0x21108, (jint) 0x121108, (jint) 0x4020000, (jint) 0x4120000, (jint) 0x4020100, (jint) 0x4120100, (jint) 0x4020008, (jint) 0x4120008, (jint) 0x4020108, (jint) 0x4120108, (jint) 0x4021000, (jint) 0x4121000, (jint) 0x4021100, (jint) 0x4121100, (jint) 0x4021008, (jint) 0x4121008, (jint) 0x4021108, (jint) 0x4121108 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, (jint) 0x10000000, (jint) 0x10000, (jint) 0x10010000, 4, (jint) 0x10000004, (jint) 0x10004, (jint) 0x10010004, (jint) 0x20000000, (jint) 0x30000000, (jint) 0x20010000, (jint) 0x30010000, (jint) 0x20000004, (jint) 0x30000004, (jint) 0x20010004, (jint) 0x30010004, (jint) 0x100000, (jint) 0x10100000, (jint) 0x110000, (jint) 0x10110000, (jint) 0x100004, (jint) 0x10100004, (jint) 0x110004, (jint) 0x10110004, (jint) 0x20100000, (jint) 0x30100000, (jint) 0x20110000, (jint) 0x30110000, (jint) 0x20100004, (jint) 0x30100004, (jint) 0x20110004, (jint) 0x30110004, 4096, (jint) 0x10001000, (jint) 0x11000, (jint) 0x10011000, 4100, (jint) 0x10001004, (jint) 0x11004, (jint) 0x10011004, (jint) 0x20001000, (jint) 0x30001000, (jint) 0x20011000, (jint) 0x30011000, (jint) 0x20001004, (jint) 0x30001004, (jint) 0x20011004, (jint) 0x30011004, (jint) 0x101000, (jint) 0x10101000, (jint) 0x111000, (jint) 0x10111000, (jint) 0x101004, (jint) 0x10101004, (jint) 0x111004, (jint) 0x10111004, (jint) 0x20101000, (jint) 0x30101000, (jint) 0x20111000, (jint) 0x30111000, (jint) 0x20101004, (jint) 0x30101004, (jint) 0x20111004, (jint) 0x30111004 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, (jint) 0x8000000, 8, (jint) 0x8000008, 1024, (jint) 0x8000400, 1032, (jint) 0x8000408, (jint) 0x20000, (jint) 0x8020000, (jint) 0x20008, (jint) 0x8020008, (jint) 0x20400, (jint) 0x8020400, (jint) 0x20408, (jint) 0x8020408, 1, (jint) 0x8000001, 9, (jint) 0x8000009, 1025, (jint) 0x8000401, 1033, (jint) 0x8000409, (jint) 0x20001, (jint) 0x8020001, (jint) 0x20009, (jint) 0x8020009, (jint) 0x20401, (jint) 0x8020401, (jint) 0x20409, (jint) 0x8020409, (jint) 0x2000000, (jint) 0xa000000, (jint) 0x2000008, (jint) 0xa000008, (jint) 0x2000400, (jint) 0xa000400, (jint) 0x2000408, (jint) 0xa000408, (jint) 0x2020000, (jint) 0xa020000, (jint) 0x2020008, (jint) 0xa020008, (jint) 0x2020400, (jint) 0xa020400, (jint) 0x2020408, (jint) 0xa020408, (jint) 0x2000001, (jint) 0xa000001, (jint) 0x2000009, (jint) 0xa000009, (jint) 0x2000401, (jint) 0xa000401, (jint) 0x2000409, (jint) 0xa000409, (jint) 0x2020001, (jint) 0xa020001, (jint) 0x2020009, (jint) 0xa020009, (jint) 0x2020401, (jint) 0xa020401, (jint) 0x2020409, (jint) 0xa020409 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, 256, (jint) 0x80000, (jint) 0x80100, (jint) 0x1000000, (jint) 0x1000100, (jint) 0x1080000, (jint) 0x1080100, 16, 272, (jint) 0x80010, (jint) 0x80110, (jint) 0x1000010, (jint) 0x1000110, (jint) 0x1080010, (jint) 0x1080110, (jint) 0x200000, (jint) 0x200100, (jint) 0x280000, (jint) 0x280100, (jint) 0x1200000, (jint) 0x1200100, (jint) 0x1280000, (jint) 0x1280100, (jint) 0x200010, (jint) 0x200110, (jint) 0x280010, (jint) 0x280110, (jint) 0x1200010, (jint) 0x1200110, (jint) 0x1280010, (jint) 0x1280110, 512, 768, (jint) 0x80200, (jint) 0x80300, (jint) 0x1000200, (jint) 0x1000300, (jint) 0x1080200, (jint) 0x1080300, 528, 784, (jint) 0x80210, (jint) 0x80310, (jint) 0x1000210, (jint) 0x1000310, (jint) 0x1080210, (jint) 0x1080310, (jint) 0x200200, (jint) 0x200300, (jint) 0x280200, (jint) 0x280300, (jint) 0x1200200, (jint) 0x1200300, (jint) 0x1280200, (jint) 0x1280300, (jint) 0x200210, (jint) 0x200310, (jint) 0x280210, (jint) 0x280310, (jint) 0x1200210, (jint) 0x1200310, (jint) 0x1280210, (jint) 0x1280310 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 0, (jint) 0x4000000, (jint) 0x40000, (jint) 0x4040000, 2, (jint) 0x4000002, (jint) 0x40002, (jint) 0x4040002, 8192, (jint) 0x4002000, (jint) 0x42000, (jint) 0x4042000, 8194, (jint) 0x4002002, (jint) 0x42002, (jint) 0x4042002, 32, (jint) 0x4000020, (jint) 0x40020, (jint) 0x4040020, 34, (jint) 0x4000022, (jint) 0x40022, (jint) 0x4040022, 8224, (jint) 0x4002020, (jint) 0x42020, (jint) 0x4042020, 8226, (jint) 0x4002022, (jint) 0x42022, (jint) 0x4042022, 2048, (jint) 0x4000800, (jint) 0x40800, (jint) 0x4040800, 2050, (jint) 0x4000802, (jint) 0x40802, (jint) 0x4040802, 10240, (jint) 0x4002800, (jint) 0x42800, (jint) 0x4042800, 10242, (jint) 0x4002802, (jint) 0x42802, (jint) 0x4042802, 2080, (jint) 0x4000820, (jint) 0x40820, (jint) 0x4040820, 2082, (jint) 0x4000822, (jint) 0x40822, (jint) 0x4040822, 10272, (jint) 0x4002820, (jint) 0x42820, (jint) 0x4042820, 10274, (jint) 0x4002822, (jint) 0x42822, (jint) 0x4042822 } count:64] } count:8 type:IOSClass_intArray(1)];
    OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x820200, (jint) 0x20000, (jint) 0x80800000, (jint) 0x80820200, (jint) 0x800000, (jint) 0x80020200, (jint) 0x80020000, (jint) 0x80800000, (jint) 0x80020200, (jint) 0x820200, (jint) 0x820000, (jint) 0x80000200, (jint) 0x80800200, (jint) 0x800000, 0, (jint) 0x80020000, (jint) 0x20000, -0x7fffffff - 1, (jint) 0x800200, (jint) 0x20200, (jint) 0x80820200, (jint) 0x820000, (jint) 0x80000200, (jint) 0x800200, -0x7fffffff - 1, 512, (jint) 0x20200, (jint) 0x80820000, 512, (jint) 0x80800200, (jint) 0x80820000, 0, 0, (jint) 0x80820200, (jint) 0x800200, (jint) 0x80020000, (jint) 0x820200, (jint) 0x20000, (jint) 0x80000200, (jint) 0x800200, (jint) 0x80820000, 512, (jint) 0x20200, (jint) 0x80800000, (jint) 0x80020200, -0x7fffffff - 1, (jint) 0x80800000, (jint) 0x820000, (jint) 0x80820200, (jint) 0x20200, (jint) 0x820000, (jint) 0x80800200, (jint) 0x800000, (jint) 0x80000200, (jint) 0x80020000, 0, (jint) 0x20000, (jint) 0x800000, (jint) 0x80800200, (jint) 0x820200, -0x7fffffff - 1, (jint) 0x80820000, 512, (jint) 0x80020200 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x10042004, 0, (jint) 0x42000, (jint) 0x10040000, (jint) 0x10000004, 8196, (jint) 0x10002000, (jint) 0x42000, 8192, (jint) 0x10040004, 4, (jint) 0x10002000, (jint) 0x40004, (jint) 0x10042000, (jint) 0x10040000, 4, (jint) 0x40000, (jint) 0x10002004, (jint) 0x10040004, 8192, (jint) 0x42004, (jint) 0x10000000, 0, (jint) 0x40004, (jint) 0x10002004, (jint) 0x42004, (jint) 0x10042000, (jint) 0x10000004, (jint) 0x10000000, (jint) 0x40000, 8196, (jint) 0x10042004, (jint) 0x40004, (jint) 0x10042000, (jint) 0x10002000, (jint) 0x42004, (jint) 0x10042004, (jint) 0x40004, (jint) 0x10000004, 0, (jint) 0x10000000, 8196, (jint) 0x40000, (jint) 0x10040004, 8192, (jint) 0x10000000, (jint) 0x42004, (jint) 0x10002004, (jint) 0x10042000, 8192, 0, (jint) 0x10000004, 4, (jint) 0x10042004, (jint) 0x42000, (jint) 0x10040000, (jint) 0x10040004, (jint) 0x40000, 8196, (jint) 0x10002000, (jint) 0x10002004, 4, (jint) 0x10040000, (jint) 0x42000 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x41000000, (jint) 0x1010040, 64, (jint) 0x41000040, (jint) 0x40010000, (jint) 0x1000000, (jint) 0x41000040, (jint) 0x10040, (jint) 0x1000040, (jint) 0x10000, (jint) 0x1010000, (jint) 0x40000000, (jint) 0x41010040, (jint) 0x40000040, (jint) 0x40000000, (jint) 0x41010000, 0, (jint) 0x40010000, (jint) 0x1010040, 64, (jint) 0x40000040, (jint) 0x41010040, (jint) 0x10000, (jint) 0x41000000, (jint) 0x41010000, (jint) 0x1000040, (jint) 0x40010040, (jint) 0x1010000, (jint) 0x10040, 0, (jint) 0x1000000, (jint) 0x40010040, (jint) 0x1010040, 64, (jint) 0x40000000, (jint) 0x10000, (jint) 0x40000040, (jint) 0x40010000, (jint) 0x1010000, (jint) 0x41000040, 0, (jint) 0x1010040, (jint) 0x10040, (jint) 0x41010000, (jint) 0x40010000, (jint) 0x1000000, (jint) 0x41010040, (jint) 0x40000000, (jint) 0x40010040, (jint) 0x41000000, (jint) 0x1000000, (jint) 0x41010040, (jint) 0x10000, (jint) 0x1000040, (jint) 0x41000040, (jint) 0x10040, (jint) 0x1000040, 0, (jint) 0x41010000, (jint) 0x40000040, (jint) 0x41000000, (jint) 0x40010040, 64, (jint) 0x1010000 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x100402, (jint) 0x4000400, 2, (jint) 0x4100402, 0, (jint) 0x4100000, (jint) 0x4000402, (jint) 0x100002, (jint) 0x4100400, (jint) 0x4000002, (jint) 0x4000000, 1026, (jint) 0x4000002, (jint) 0x100402, (jint) 0x100000, (jint) 0x4000000, (jint) 0x4100002, (jint) 0x100400, 1024, 2, (jint) 0x100400, (jint) 0x4000402, (jint) 0x4100000, 1024, 1026, 0, (jint) 0x100002, (jint) 0x4100400, (jint) 0x4000400, (jint) 0x4100002, (jint) 0x4100402, (jint) 0x100000, (jint) 0x4100002, 1026, (jint) 0x100000, (jint) 0x4000002, (jint) 0x100400, (jint) 0x4000400, 2, (jint) 0x4100000, (jint) 0x4000402, 0, 1024, (jint) 0x100002, 0, (jint) 0x4100002, (jint) 0x4100400, 1024, (jint) 0x4000000, (jint) 0x4100402, (jint) 0x100402, (jint) 0x100000, (jint) 0x4100402, 2, (jint) 0x4000400, (jint) 0x100402, (jint) 0x100002, (jint) 0x100400, (jint) 0x4100000, (jint) 0x4000402, 1026, (jint) 0x4000000, (jint) 0x4000002, (jint) 0x4100400 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x2000000, 16384, 256, (jint) 0x2004108, (jint) 0x2004008, (jint) 0x2000100, 16648, (jint) 0x2004000, 16384, 8, (jint) 0x2000008, 16640, (jint) 0x2000108, (jint) 0x2004008, (jint) 0x2004100, 0, 16640, (jint) 0x2000000, 16392, 264, (jint) 0x2000100, 16648, 0, (jint) 0x2000008, 8, (jint) 0x2000108, (jint) 0x2004108, 16392, (jint) 0x2004000, 256, 264, (jint) 0x2004100, (jint) 0x2004100, (jint) 0x2000108, 16392, (jint) 0x2004000, 16384, 8, (jint) 0x2000008, (jint) 0x2000100, (jint) 0x2000000, 16640, (jint) 0x2004108, 0, 16648, (jint) 0x2000000, 256, 16392, (jint) 0x2000108, 256, 0, (jint) 0x2004108, (jint) 0x2004008, (jint) 0x2004100, 264, 16384, 16640, (jint) 0x2004008, (jint) 0x2000100, 264, 8, 16648, (jint) 0x2004000, (jint) 0x2000008 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x20000010, (jint) 0x80010, 0, (jint) 0x20080800, (jint) 0x80010, 2048, (jint) 0x20000810, (jint) 0x80000, 2064, (jint) 0x20080810, (jint) 0x80800, (jint) 0x20000000, (jint) 0x20000800, (jint) 0x20000010, (jint) 0x20080000, (jint) 0x80810, (jint) 0x80000, (jint) 0x20000810, (jint) 0x20080010, 0, 2048, 16, (jint) 0x20080800, (jint) 0x20080010, (jint) 0x20080810, (jint) 0x20080000, (jint) 0x20000000, 2064, 16, (jint) 0x80800, (jint) 0x80810, (jint) 0x20000800, 2064, (jint) 0x20000000, (jint) 0x20000800, (jint) 0x80810, (jint) 0x20080800, (jint) 0x80010, 0, (jint) 0x20000800, (jint) 0x20000000, 2048, (jint) 0x20080010, (jint) 0x80000, (jint) 0x80010, (jint) 0x20080810, (jint) 0x80800, 16, (jint) 0x20080810, (jint) 0x80800, (jint) 0x80000, (jint) 0x20000810, (jint) 0x20000010, (jint) 0x20080000, (jint) 0x80810, 0, 2048, (jint) 0x20000010, (jint) 0x20000810, (jint) 0x20080800, (jint) 0x20080000, 2064, 16, (jint) 0x20080010 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ 4096, 128, (jint) 0x400080, (jint) 0x400001, (jint) 0x401081, 4097, 4224, 0, (jint) 0x400000, (jint) 0x400081, 129, (jint) 0x401000, 1, (jint) 0x401080, (jint) 0x401000, 129, (jint) 0x400081, 4096, 4097, (jint) 0x401081, 0, (jint) 0x400080, (jint) 0x400001, 4224, (jint) 0x401001, 4225, (jint) 0x401080, 1, 4225, (jint) 0x401001, 128, (jint) 0x400000, 4225, (jint) 0x401000, (jint) 0x401001, 129, 4096, 128, (jint) 0x400000, (jint) 0x401001, (jint) 0x400081, 4225, 4224, 0, 128, (jint) 0x400001, 1, (jint) 0x400080, 0, (jint) 0x400081, (jint) 0x400080, 4224, 129, 4096, (jint) 0x401081, (jint) 0x400000, (jint) 0x401080, 1, 4097, (jint) 0x401081, (jint) 0x400001, (jint) 0x401080, (jint) 0x401000, 4097 } count:64], [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x8200020, (jint) 0x8208000, 32800, 0, (jint) 0x8008000, (jint) 0x200020, (jint) 0x8200000, (jint) 0x8208020, 32, (jint) 0x8000000, (jint) 0x208000, 32800, (jint) 0x208020, (jint) 0x8008020, (jint) 0x8000020, (jint) 0x8200000, 32768, (jint) 0x208020, (jint) 0x200020, (jint) 0x8008000, (jint) 0x8208020, (jint) 0x8000020, 0, (jint) 0x208000, (jint) 0x8000000, (jint) 0x200000, (jint) 0x8008020, (jint) 0x8200020, (jint) 0x200000, 32768, (jint) 0x8208000, 32, (jint) 0x200000, 32768, (jint) 0x8000020, (jint) 0x8208020, 32800, (jint) 0x8000000, 0, (jint) 0x208000, (jint) 0x8200020, (jint) 0x8008020, (jint) 0x8008000, (jint) 0x200020, (jint) 0x8208000, 32, (jint) 0x200020, (jint) 0x8008000, (jint) 0x8208020, (jint) 0x200000, (jint) 0x8200000, (jint) 0x8000020, (jint) 0x208000, 32800, (jint) 0x8008020, (jint) 0x8200000, 32, (jint) 0x8208000, (jint) 0x208020, 0, (jint) 0x8000000, (jint) 0x8200020, 32768, (jint) 0x208020 } count:64] } count:8 type:IOSClass_intArray(1)];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecDigestUnixCrypt)
  }
}

@end

void OrgApacheCommonsCodecDigestUnixCrypt_init(OrgApacheCommonsCodecDigestUnixCrypt *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecDigestUnixCrypt *new_OrgApacheCommonsCodecDigestUnixCrypt_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecDigestUnixCrypt, init)
}

OrgApacheCommonsCodecDigestUnixCrypt *create_OrgApacheCommonsCodecDigestUnixCrypt_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecDigestUnixCrypt, init)
}

NSString *OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_(IOSByteArray *original) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_withNSString_(original, nil);
}

NSString *OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_withNSString_(IOSByteArray *original, NSString *salt) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  if (salt == nil) {
    JavaUtilRandom *randomGenerator = new_JavaUtilRandom_init();
    jint numSaltChars = ((IOSCharArray *) nil_chk(OrgApacheCommonsCodecDigestUnixCrypt_SALT_CHARS))->size_;
    salt = JreStrcat("CC", IOSCharArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SALT_CHARS, [randomGenerator nextIntWithInt:numSaltChars]), IOSCharArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SALT_CHARS, [randomGenerator nextIntWithInt:numSaltChars]));
  }
  else if (![salt java_matches:JreStrcat("$$$", @"^[", OrgApacheCommonsCodecDigestB64_B64T, @"]{2,}$")]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid salt value: ", salt));
  }
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_initWithNSString_(@"             ");
  jchar charZero = [salt charAtWithInt:0];
  jchar charOne = [salt charAtWithInt:1];
  [buffer setCharAtWithInt:0 withChar:charZero];
  [buffer setCharAtWithInt:1 withChar:charOne];
  jint eSwap0 = IOSIntArray_Get(nil_chk(OrgApacheCommonsCodecDigestUnixCrypt_CON_SALT), charZero);
  jint eSwap1 = JreLShift32(IOSIntArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_CON_SALT, charOne), 4);
  IOSByteArray *key = [IOSByteArray newArrayWithLength:8];
  for (jint i = 0; i < key->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  for (jint i = 0; i < key->size_ && i < ((IOSByteArray *) nil_chk(original))->size_; i++) {
    jint iChar = IOSByteArray_Get(nil_chk(original), i);
    *IOSByteArray_GetRef(key, i) = (jbyte) (JreLShift32(iChar, 1));
  }
  IOSIntArray *schedule = OrgApacheCommonsCodecDigestUnixCrypt_desSetKeyWithByteArray_(key);
  IOSIntArray *out = OrgApacheCommonsCodecDigestUnixCrypt_bodyWithIntArray_withInt_withInt_(schedule, eSwap0, eSwap1);
  IOSByteArray *b = [IOSByteArray newArrayWithLength:9];
  OrgApacheCommonsCodecDigestUnixCrypt_intToFourBytesWithInt_withByteArray_withInt_(IOSIntArray_Get(nil_chk(out), 0), b, 0);
  OrgApacheCommonsCodecDigestUnixCrypt_intToFourBytesWithInt_withByteArray_withInt_(IOSIntArray_Get(out, 1), b, 4);
  *IOSByteArray_GetRef(b, 8) = 0;
  jint i = 2;
  jint y = 0;
  jint u = 128;
  for (; i < 13; i++) {
    jint j = 0;
    jint c = 0;
    for (; j < 6; j++) {
      JreLShiftAssignInt(&c, 1);
      if ((IOSByteArray_Get(b, y) & u) != 0) {
        c |= (jint) 0x1;
      }
      JreURShiftAssignInt(&u, 1);
      if (u == 0) {
        y++;
        u = 128;
      }
      [buffer setCharAtWithInt:i withChar:(jchar) IOSIntArray_Get(nil_chk(OrgApacheCommonsCodecDigestUnixCrypt_COV2CHAR), c)];
    }
  }
  return [buffer description];
}

NSString *OrgApacheCommonsCodecDigestUnixCrypt_cryptWithNSString_(NSString *original) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_([((NSString *) nil_chk(original)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)]);
}

NSString *OrgApacheCommonsCodecDigestUnixCrypt_cryptWithNSString_withNSString_(NSString *original, NSString *salt) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_withNSString_([((NSString *) nil_chk(original)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)], salt);
}

IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_bodyWithIntArray_withInt_withInt_(IOSIntArray *schedule, jint eSwap0, jint eSwap1) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  jint left = 0;
  jint right = 0;
  jint t = 0;
  for (jint j = 0; j < 25; j++) {
    for (jint i = 0; i < 32; i += 4) {
      left = OrgApacheCommonsCodecDigestUnixCrypt_dEncryptWithInt_withInt_withInt_withInt_withInt_withIntArray_(left, right, i, eSwap0, eSwap1, schedule);
      right = OrgApacheCommonsCodecDigestUnixCrypt_dEncryptWithInt_withInt_withInt_withInt_withInt_withIntArray_(right, left, i + 2, eSwap0, eSwap1, schedule);
    }
    t = left;
    left = right;
    right = t;
  }
  t = right;
  right = (JreURShift32(left, 1)) | (JreLShift32(left, 31));
  left = (JreURShift32(t, 1)) | (JreLShift32(t, 31));
  IOSIntArray *results = [IOSIntArray newArrayWithLength:2];
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(right, left, 1, (jint) 0x55555555, results);
  right = IOSIntArray_Get(results, 0);
  left = IOSIntArray_Get(results, 1);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(left, right, 8, (jint) 0xff00ff, results);
  left = IOSIntArray_Get(results, 0);
  right = IOSIntArray_Get(results, 1);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(right, left, 2, (jint) 0x33333333, results);
  right = IOSIntArray_Get(results, 0);
  left = IOSIntArray_Get(results, 1);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(left, right, 16, 65535, results);
  left = IOSIntArray_Get(results, 0);
  right = IOSIntArray_Get(results, 1);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(right, left, 4, (jint) 0xf0f0f0f, results);
  right = IOSIntArray_Get(results, 0);
  left = IOSIntArray_Get(results, 1);
  IOSIntArray *out = [IOSIntArray newArrayWithLength:2];
  *IOSIntArray_GetRef(out, 0) = left;
  *IOSIntArray_GetRef(out, 1) = right;
  return out;
}

jint OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(jbyte b) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  jint value = b;
  return value < 0 ? value + 256 : value;
}

jint OrgApacheCommonsCodecDigestUnixCrypt_dEncryptWithInt_withInt_withInt_withInt_withInt_withIntArray_(jint el, jint r, jint s, jint e0, jint e1, IOSIntArray *sArr) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  jint v = r ^ JreURShift32(r, 16);
  jint u = v & e0;
  v &= e1;
  u = u ^ JreLShift32(u, 16) ^ r ^ IOSIntArray_Get(nil_chk(sArr), s);
  jint t = v ^ JreLShift32(v, 16) ^ r ^ IOSIntArray_Get(sArr, s + 1);
  t = (JreURShift32(t, 4)) | (JreLShift32(t, 28));
  el ^= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS), 1)), t & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 3)), (JreURShift32(t, 8)) & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 5)), (JreURShift32(t, 16)) & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 7)), (JreURShift32(t, 24)) & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 0)), u & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 2)), (JreURShift32(u, 8)) & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 4)), (JreURShift32(u, 16)) & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SPTRANS, 6)), (JreURShift32(u, 24)) & (jint) 0x3f);
  return el;
}

IOSIntArray *OrgApacheCommonsCodecDigestUnixCrypt_desSetKeyWithByteArray_(IOSByteArray *key) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  IOSIntArray *schedule = [IOSIntArray newArrayWithLength:32];
  jint c = OrgApacheCommonsCodecDigestUnixCrypt_fourBytesToIntWithByteArray_withInt_(key, 0);
  jint d = OrgApacheCommonsCodecDigestUnixCrypt_fourBytesToIntWithByteArray_withInt_(key, 4);
  IOSIntArray *results = [IOSIntArray newArrayWithLength:2];
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(d, c, 4, (jint) 0xf0f0f0f, results);
  d = IOSIntArray_Get(results, 0);
  c = IOSIntArray_Get(results, 1);
  c = OrgApacheCommonsCodecDigestUnixCrypt_hPermOpWithInt_withInt_withInt_(c, -2, (jint) 0xcccc0000);
  d = OrgApacheCommonsCodecDigestUnixCrypt_hPermOpWithInt_withInt_withInt_(d, -2, (jint) 0xcccc0000);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(d, c, 1, (jint) 0x55555555, results);
  d = IOSIntArray_Get(results, 0);
  c = IOSIntArray_Get(results, 1);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(c, d, 8, (jint) 0xff00ff, results);
  c = IOSIntArray_Get(results, 0);
  d = IOSIntArray_Get(results, 1);
  OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(d, c, 1, (jint) 0x55555555, results);
  d = IOSIntArray_Get(results, 0);
  c = IOSIntArray_Get(results, 1);
  d = (JreLShift32((d & (jint) 0xff), 16)) | (d & (jint) 0xff00) | (JreURShift32((d & (jint) 0xff0000), 16)) | (JreURShift32((c & (jint) 0xf0000000), 4));
  c &= (jint) 0xfffffff;
  jint j = 0;
  for (jint i = 0; i < 16; i++) {
    if (IOSBooleanArray_Get(nil_chk(OrgApacheCommonsCodecDigestUnixCrypt_SHIFT2), i)) {
      c = (JreURShift32(c, 2)) | (JreLShift32(c, 26));
      d = (JreURShift32(d, 2)) | (JreLShift32(d, 26));
    }
    else {
      c = (JreURShift32(c, 1)) | (JreLShift32(c, 27));
      d = (JreURShift32(d, 1)) | (JreLShift32(d, 27));
    }
    c &= (jint) 0xfffffff;
    d &= (jint) 0xfffffff;
    jint s = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(OrgApacheCommonsCodecDigestUnixCrypt_SKB), 0)), c & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 1)), ((JreURShift32(c, 6)) & (jint) 0x3) | ((JreURShift32(c, 7)) & (jint) 0x3c)) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 2)), ((JreURShift32(c, 13)) & (jint) 0xf) | ((JreURShift32(c, 14)) & (jint) 0x30)) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 3)), ((JreURShift32(c, 20)) & (jint) 0x1) | ((JreURShift32(c, 21)) & (jint) 0x6) | ((JreURShift32(c, 22)) & (jint) 0x38));
    jint t = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 4)), d & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 5)), ((JreURShift32(d, 7)) & (jint) 0x3) | ((JreURShift32(d, 8)) & (jint) 0x3c)) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 6)), (JreURShift32(d, 15)) & (jint) 0x3f) | IOSIntArray_Get(nil_chk(IOSObjectArray_Get(OrgApacheCommonsCodecDigestUnixCrypt_SKB, 7)), ((JreURShift32(d, 21)) & (jint) 0xf) | ((JreURShift32(d, 22)) & (jint) 0x30));
    *IOSIntArray_GetRef(schedule, j++) = ((JreLShift32(t, 16)) | (s & (jint) 0xffff));
    s = (JreURShift32(s, 16)) | (t & (jint) 0xffff0000);
    s = (JreLShift32(s, 4)) | (JreURShift32(s, 28));
    *IOSIntArray_GetRef(schedule, j++) = s;
  }
  return schedule;
}

jint OrgApacheCommonsCodecDigestUnixCrypt_fourBytesToIntWithByteArray_withInt_(IOSByteArray *b, jint offset) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  jint value = OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(IOSByteArray_Get(nil_chk(b), offset++));
  value |= JreLShift32(OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(IOSByteArray_Get(b, offset++)), 8);
  value |= JreLShift32(OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(IOSByteArray_Get(b, offset++)), 16);
  value |= JreLShift32(OrgApacheCommonsCodecDigestUnixCrypt_byteToUnsignedWithByte_(IOSByteArray_Get(b, offset++)), 24);
  return value;
}

jint OrgApacheCommonsCodecDigestUnixCrypt_hPermOpWithInt_withInt_withInt_(jint a, jint n, jint m) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  jint t = (JreLShift32(a, 16 - n) ^ a) & m;
  a = a ^ t ^ JreURShift32(t, 16 - n);
  return a;
}

void OrgApacheCommonsCodecDigestUnixCrypt_intToFourBytesWithInt_withByteArray_withInt_(jint iValue, IOSByteArray *b, jint offset) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  *IOSByteArray_GetRef(nil_chk(b), offset++) = (jbyte) (iValue & (jint) 0xff);
  *IOSByteArray_GetRef(b, offset++) = (jbyte) ((JreURShift32(iValue, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(b, offset++) = (jbyte) ((JreURShift32(iValue, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(b, offset++) = (jbyte) ((JreURShift32(iValue, 24)) & (jint) 0xff);
}

void OrgApacheCommonsCodecDigestUnixCrypt_permOpWithInt_withInt_withInt_withInt_withIntArray_(jint a, jint b, jint n, jint m, IOSIntArray *results) {
  OrgApacheCommonsCodecDigestUnixCrypt_initialize();
  jint t = (JreURShift32(a, n) ^ b) & m;
  a ^= JreLShift32(t, n);
  b ^= t;
  *IOSIntArray_GetRef(nil_chk(results), 0) = a;
  *IOSIntArray_GetRef(results, 1) = b;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecDigestUnixCrypt)
