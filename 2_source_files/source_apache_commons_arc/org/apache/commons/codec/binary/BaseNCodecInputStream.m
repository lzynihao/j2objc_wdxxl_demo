//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/binary/BaseNCodecInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "org/apache/commons/codec/binary/BaseNCodec.h"
#include "org/apache/commons/codec/binary/BaseNCodecInputStream.h"

@interface OrgApacheCommonsCodecBinaryBaseNCodecInputStream () {
 @public
  OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec_;
  jboolean doEncode_;
  IOSByteArray *singleByte_;
  OrgApacheCommonsCodecBinaryBaseNCodec_Context *context_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, baseNCodec_, OrgApacheCommonsCodecBinaryBaseNCodec *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, singleByte_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, context_, OrgApacheCommonsCodecBinaryBaseNCodec_Context *)

@implementation OrgApacheCommonsCodecBinaryBaseNCodecInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withOrgApacheCommonsCodecBinaryBaseNCodec:(OrgApacheCommonsCodecBinaryBaseNCodec *)baseNCodec
                              withBoolean:(jboolean)doEncode {
  OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(self, inArg, baseNCodec, doEncode);
  return self;
}

- (jint)available {
  return ((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context_))->eof_ ? 0 : 1;
}

- (void)markWithInt:(jint)readLimit {
  @synchronized(self) {
  }
}

- (jboolean)markSupported {
  return false;
}

- (jint)read {
  jint r = [self readWithByteArray:singleByte_ withInt:0 withInt:1];
  while (r == 0) {
    r = [self readWithByteArray:singleByte_ withInt:0 withInt:1];
  }
  if (r > 0) {
    jbyte b = IOSByteArray_Get(nil_chk(singleByte_), 0);
    return b < 0 ? 256 + b : b;
  }
  return OrgApacheCommonsCodecBinaryBaseNCodec_EOF;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)offset
                  withInt:(jint)len {
  if (b == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  else if (offset < 0 || len < 0) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  else if (offset > b->size_ || offset + len > b->size_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  else if (len == 0) {
    return 0;
  }
  else {
    jint readLen = 0;
    while (readLen == 0) {
      if (![((OrgApacheCommonsCodecBinaryBaseNCodec *) nil_chk(baseNCodec_)) hasDataWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:context_]) {
        IOSByteArray *buf = [IOSByteArray newArrayWithLength:doEncode_ ? 4096 : 8192];
        jint c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:buf];
        if (doEncode_) {
          [baseNCodec_ encodeWithByteArray:buf withInt:0 withInt:c withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context_];
        }
        else {
          [baseNCodec_ decodeWithByteArray:buf withInt:0 withInt:c withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context_];
        }
      }
      readLen = [baseNCodec_ readResultsWithByteArray:b withInt:offset withInt:len withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context_];
    }
    return readLen;
  }
}

- (void)reset {
  @synchronized(self) {
    @throw new_JavaIoIOException_initWithNSString_(@"mark/reset not supported");
  }
}

- (jlong)skipWithLong:(jlong)n {
  if (n < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"Negative skip length: ", n));
  }
  IOSByteArray *b = [IOSByteArray newArrayWithLength:512];
  jlong todo = n;
  while (todo > 0) {
    jint len = (jint) JavaLangMath_minWithLong_withLong_(b->size_, todo);
    len = [self readWithByteArray:b withInt:0 withInt:len];
    if (len == OrgApacheCommonsCodecBinaryBaseNCodec_EOF) {
      break;
    }
    todo -= len;
  }
  return n - todo;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoInputStream:withOrgApacheCommonsCodecBinaryBaseNCodec:withBoolean:);
  methods[1].selector = @selector(available);
  methods[2].selector = @selector(markWithInt:);
  methods[3].selector = @selector(markSupported);
  methods[4].selector = @selector(read);
  methods[5].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(skipWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "baseNCodec_", "LOrgApacheCommonsCodecBinaryBaseNCodec;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doEncode_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "singleByte_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "context_", "LOrgApacheCommonsCodecBinaryBaseNCodec_Context;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LOrgApacheCommonsCodecBinaryBaseNCodec;Z", "LJavaIoIOException;", "mark", "I", "read", "[BII", "skip", "J" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBaseNCodecInputStream = { "BaseNCodecInputStream", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBaseNCodecInputStream;
}

@end

void OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(OrgApacheCommonsCodecBinaryBaseNCodecInputStream *self, JavaIoInputStream *inArg, OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec, jboolean doEncode) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, inArg);
  self->singleByte_ = [IOSByteArray newArrayWithLength:1];
  self->context_ = new_OrgApacheCommonsCodecBinaryBaseNCodec_Context_init();
  self->doEncode_ = doEncode;
  self->baseNCodec_ = baseNCodec;
}

OrgApacheCommonsCodecBinaryBaseNCodecInputStream *new_OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(JavaIoInputStream *inArg, OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec, jboolean doEncode) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_, inArg, baseNCodec, doEncode)
}

OrgApacheCommonsCodecBinaryBaseNCodecInputStream *create_OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(JavaIoInputStream *inArg, OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec, jboolean doEncode) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_, inArg, baseNCodec, doEncode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBaseNCodecInputStream)
