//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/CharSequenceUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "org/apache/commons/lang3/CharSequenceUtils.h"

inline jint OrgApacheCommonsLang3CharSequenceUtils_get_NOT_FOUND(void);
#define OrgApacheCommonsLang3CharSequenceUtils_NOT_FOUND -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3CharSequenceUtils, NOT_FOUND, jint)

@implementation OrgApacheCommonsLang3CharSequenceUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3CharSequenceUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangCharSequence>)subSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                                        withInt:(jint)start {
  return OrgApacheCommonsLang3CharSequenceUtils_subSequenceWithJavaLangCharSequence_withInt_(cs, start);
}

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                withInt:(jint)searchChar
                                withInt:(jint)start {
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(cs, searchChar, start);
}

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
               withJavaLangCharSequence:(id<JavaLangCharSequence>)searchChar
                                withInt:(jint)start {
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(cs, searchChar, start);
}

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withInt:(jint)searchChar
                                    withInt:(jint)start {
  return OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(cs, searchChar, start);
}

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                   withJavaLangCharSequence:(id<JavaLangCharSequence>)searchChar
                                    withInt:(jint)start {
  return OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(cs, searchChar, start);
}

+ (IOSCharArray *)toCharArrayWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3CharSequenceUtils_toCharArrayWithJavaLangCharSequence_(cs);
}

+ (jboolean)regionMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                      withBoolean:(jboolean)ignoreCase
                                          withInt:(jint)thisStart
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)substring
                                          withInt:(jint)start
                                          withInt:(jint)length {
  return OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(cs, ignoreCase, thisStart, substring, start, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 5, 4, -1, -1, -1, -1 },
    { NULL, "[C", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(subSequenceWithJavaLangCharSequence:withInt:);
  methods[2].selector = @selector(indexOfWithJavaLangCharSequence:withInt:withInt:);
  methods[3].selector = @selector(indexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[4].selector = @selector(lastIndexOfWithJavaLangCharSequence:withInt:withInt:);
  methods[5].selector = @selector(lastIndexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[6].selector = @selector(toCharArrayWithJavaLangCharSequence:);
  methods[7].selector = @selector(regionMatchesWithJavaLangCharSequence:withBoolean:withInt:withJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_FOUND", "I", .constantValue.asInt = OrgApacheCommonsLang3CharSequenceUtils_NOT_FOUND, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "subSequence", "LJavaLangCharSequence;I", "indexOf", "LJavaLangCharSequence;II", "LJavaLangCharSequence;LJavaLangCharSequence;I", "lastIndexOf", "toCharArray", "LJavaLangCharSequence;", "regionMatches", "LJavaLangCharSequence;ZILJavaLangCharSequence;II" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3CharSequenceUtils = { "CharSequenceUtils", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3CharSequenceUtils;
}

@end

void OrgApacheCommonsLang3CharSequenceUtils_init(OrgApacheCommonsLang3CharSequenceUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3CharSequenceUtils *new_OrgApacheCommonsLang3CharSequenceUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3CharSequenceUtils, init)
}

OrgApacheCommonsLang3CharSequenceUtils *create_OrgApacheCommonsLang3CharSequenceUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3CharSequenceUtils, init)
}

id<JavaLangCharSequence> OrgApacheCommonsLang3CharSequenceUtils_subSequenceWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> cs, jint start) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  return cs == nil ? nil : [cs subSequenceFrom:start to:[cs java_length]];
}

jint OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> cs, jint searchChar, jint start) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  if ([cs isKindOfClass:[NSString class]]) {
    return [((NSString *) nil_chk(((NSString *) cast_chk(cs, [NSString class])))) java_indexOf:searchChar fromIndex:start];
  }
  jint sz = [((id<JavaLangCharSequence>) nil_chk(cs)) java_length];
  if (start < 0) {
    start = 0;
  }
  for (jint i = start; i < sz; i++) {
    if ([cs charAtWithInt:i] == searchChar) {
      return i;
    }
  }
  return OrgApacheCommonsLang3CharSequenceUtils_NOT_FOUND;
}

jint OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> cs, id<JavaLangCharSequence> searchChar, jint start) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  return [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(cs)) description])) java_indexOfString:[((id<JavaLangCharSequence>) nil_chk(searchChar)) description] fromIndex:start];
}

jint OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> cs, jint searchChar, jint start) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  if ([cs isKindOfClass:[NSString class]]) {
    return [((NSString *) nil_chk(((NSString *) cast_chk(cs, [NSString class])))) java_lastIndexOf:searchChar fromIndex:start];
  }
  jint sz = [((id<JavaLangCharSequence>) nil_chk(cs)) java_length];
  if (start < 0) {
    return OrgApacheCommonsLang3CharSequenceUtils_NOT_FOUND;
  }
  if (start >= sz) {
    start = sz - 1;
  }
  for (jint i = start; i >= 0; --i) {
    if ([cs charAtWithInt:i] == searchChar) {
      return i;
    }
  }
  return OrgApacheCommonsLang3CharSequenceUtils_NOT_FOUND;
}

jint OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> cs, id<JavaLangCharSequence> searchChar, jint start) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  return [((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(cs)) description])) java_lastIndexOfString:[((id<JavaLangCharSequence>) nil_chk(searchChar)) description] fromIndex:start];
}

IOSCharArray *OrgApacheCommonsLang3CharSequenceUtils_toCharArrayWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  if ([cs isKindOfClass:[NSString class]]) {
    return [((NSString *) nil_chk(((NSString *) cast_chk(cs, [NSString class])))) java_toCharArray];
  }
  jint sz = [((id<JavaLangCharSequence>) nil_chk(cs)) java_length];
  IOSCharArray *array = [IOSCharArray newArrayWithLength:[cs java_length]];
  for (jint i = 0; i < sz; i++) {
    *IOSCharArray_GetRef(array, i) = [cs charAtWithInt:i];
  }
  return array;
}

jboolean OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> cs, jboolean ignoreCase, jint thisStart, id<JavaLangCharSequence> substring, jint start, jint length) {
  OrgApacheCommonsLang3CharSequenceUtils_initialize();
  if ([cs isKindOfClass:[NSString class]] && [substring isKindOfClass:[NSString class]]) {
    return [((NSString *) nil_chk(((NSString *) cast_chk(cs, [NSString class])))) java_regionMatches:ignoreCase thisOffset:thisStart aString:(NSString *) cast_chk(substring, [NSString class]) otherOffset:start count:length];
  }
  jint index1 = thisStart;
  jint index2 = start;
  jint tmpLen = length;
  while (tmpLen-- > 0) {
    jchar c1 = [((id<JavaLangCharSequence>) nil_chk(cs)) charAtWithInt:index1++];
    jchar c2 = [((id<JavaLangCharSequence>) nil_chk(substring)) charAtWithInt:index2++];
    if (c1 == c2) {
      continue;
    }
    if (!ignoreCase) {
      return false;
    }
    if (JavaLangCharacter_toUpperCaseWithChar_(c1) != JavaLangCharacter_toUpperCaseWithChar_(c2) && JavaLangCharacter_toLowerCaseWithChar_(c1) != JavaLangCharacter_toLowerCaseWithChar_(c2)) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3CharSequenceUtils)
