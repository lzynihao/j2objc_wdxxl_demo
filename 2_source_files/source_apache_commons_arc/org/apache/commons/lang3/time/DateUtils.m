//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/time/DateUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/function/Consumer.h"
#include "org/apache/commons/lang3/time/DateUtils.h"

@class OrgApacheCommonsLang3TimeDateUtils_ModifyType;

@interface OrgApacheCommonsLang3TimeDateUtils ()

+ (JavaUtilDate *)parseDateWithLeniencyWithNSString:(NSString *)str
                                 withJavaUtilLocale:(JavaUtilLocale *)locale
                                  withNSStringArray:(IOSObjectArray *)parsePatterns
                                        withBoolean:(jboolean)lenient;

+ (JavaUtilDate *)addWithJavaUtilDate:(JavaUtilDate *)date
                              withInt:(jint)calendarField
                              withInt:(jint)amount;

+ (JavaUtilDate *)setWithJavaUtilDate:(JavaUtilDate *)date
                              withInt:(jint)calendarField
                              withInt:(jint)amount;

+ (void)modifyWithJavaUtilCalendar:(JavaUtilCalendar *)val
                           withInt:(jint)field
withOrgApacheCommonsLang3TimeDateUtils_ModifyType:(OrgApacheCommonsLang3TimeDateUtils_ModifyType *)modType;

+ (jlong)getFragmentWithJavaUtilDate:(JavaUtilDate *)date
                             withInt:(jint)fragment
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

+ (jlong)getFragmentWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                 withInt:(jint)fragment
          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

inline IOSObjectArray *OrgApacheCommonsLang3TimeDateUtils_get_fields();
static IOSObjectArray *OrgApacheCommonsLang3TimeDateUtils_fields;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeDateUtils, fields, IOSObjectArray *)

__attribute__((unused)) static JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_parseDateWithLeniencyWithNSString_withJavaUtilLocale_withNSStringArray_withBoolean_(NSString *str, JavaUtilLocale *locale, IOSObjectArray *parsePatterns, jboolean lenient);

__attribute__((unused)) static JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(JavaUtilDate *date, jint calendarField, jint amount);

__attribute__((unused)) static JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(JavaUtilDate *date, jint calendarField, jint amount);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(JavaUtilCalendar *val, jint field, OrgApacheCommonsLang3TimeDateUtils_ModifyType *modType);

__attribute__((unused)) static jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *date, jint fragment, JavaUtilConcurrentTimeUnit *unit);

__attribute__((unused)) static jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(JavaUtilCalendar *calendar, jint fragment, JavaUtilConcurrentTimeUnit *unit);

typedef NS_ENUM(NSUInteger, OrgApacheCommonsLang3TimeDateUtils_ModifyType_Enum) {
  OrgApacheCommonsLang3TimeDateUtils_ModifyType_Enum_TRUNCATE = 0,
  OrgApacheCommonsLang3TimeDateUtils_ModifyType_Enum_ROUND = 1,
  OrgApacheCommonsLang3TimeDateUtils_ModifyType_Enum_CEILING = 2,
};

@interface OrgApacheCommonsLang3TimeDateUtils_ModifyType : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (OrgApacheCommonsLang3TimeDateUtils_ModifyType *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeDateUtils_ModifyType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_values_[];

inline OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_get_TRUNCATE();
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE)

inline OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_get_ROUND();
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3TimeDateUtils_ModifyType, ROUND)

inline OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_get_CEILING();
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3TimeDateUtils_ModifyType, CEILING)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(OrgApacheCommonsLang3TimeDateUtils_ModifyType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgApacheCommonsLang3TimeDateUtils_ModifyType *new_OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3TimeDateUtils_ModifyType_values();

__attribute__((unused)) static OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeDateUtils_ModifyType)

@interface OrgApacheCommonsLang3TimeDateUtils_DateIterator () {
 @public
  JavaUtilCalendar *endFinal_;
  JavaUtilCalendar *spot_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeDateUtils_DateIterator, endFinal_, JavaUtilCalendar *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeDateUtils_DateIterator, spot_, JavaUtilCalendar *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeDateUtils)

@implementation OrgApacheCommonsLang3TimeDateUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeDateUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isSameDayWithJavaUtilDate:(JavaUtilDate *)date1
                     withJavaUtilDate:(JavaUtilDate *)date2 {
  return OrgApacheCommonsLang3TimeDateUtils_isSameDayWithJavaUtilDate_withJavaUtilDate_(date1, date2);
}

+ (jboolean)isSameDayWithJavaUtilCalendar:(JavaUtilCalendar *)cal1
                     withJavaUtilCalendar:(JavaUtilCalendar *)cal2 {
  return OrgApacheCommonsLang3TimeDateUtils_isSameDayWithJavaUtilCalendar_withJavaUtilCalendar_(cal1, cal2);
}

+ (jboolean)isSameInstantWithJavaUtilDate:(JavaUtilDate *)date1
                         withJavaUtilDate:(JavaUtilDate *)date2 {
  return OrgApacheCommonsLang3TimeDateUtils_isSameInstantWithJavaUtilDate_withJavaUtilDate_(date1, date2);
}

+ (jboolean)isSameInstantWithJavaUtilCalendar:(JavaUtilCalendar *)cal1
                         withJavaUtilCalendar:(JavaUtilCalendar *)cal2 {
  return OrgApacheCommonsLang3TimeDateUtils_isSameInstantWithJavaUtilCalendar_withJavaUtilCalendar_(cal1, cal2);
}

+ (jboolean)isSameLocalTimeWithJavaUtilCalendar:(JavaUtilCalendar *)cal1
                           withJavaUtilCalendar:(JavaUtilCalendar *)cal2 {
  return OrgApacheCommonsLang3TimeDateUtils_isSameLocalTimeWithJavaUtilCalendar_withJavaUtilCalendar_(cal1, cal2);
}

+ (JavaUtilDate *)parseDateWithNSString:(NSString *)str
                      withNSStringArray:(IOSObjectArray *)parsePatterns {
  return OrgApacheCommonsLang3TimeDateUtils_parseDateWithNSString_withNSStringArray_(str, parsePatterns);
}

+ (JavaUtilDate *)parseDateWithNSString:(NSString *)str
                     withJavaUtilLocale:(JavaUtilLocale *)locale
                      withNSStringArray:(IOSObjectArray *)parsePatterns {
  return OrgApacheCommonsLang3TimeDateUtils_parseDateWithNSString_withJavaUtilLocale_withNSStringArray_(str, locale, parsePatterns);
}

+ (JavaUtilDate *)parseDateStrictlyWithNSString:(NSString *)str
                              withNSStringArray:(IOSObjectArray *)parsePatterns {
  return OrgApacheCommonsLang3TimeDateUtils_parseDateStrictlyWithNSString_withNSStringArray_(str, parsePatterns);
}

+ (JavaUtilDate *)parseDateStrictlyWithNSString:(NSString *)str
                             withJavaUtilLocale:(JavaUtilLocale *)locale
                              withNSStringArray:(IOSObjectArray *)parsePatterns {
  return OrgApacheCommonsLang3TimeDateUtils_parseDateStrictlyWithNSString_withJavaUtilLocale_withNSStringArray_(str, locale, parsePatterns);
}

+ (JavaUtilDate *)parseDateWithLeniencyWithNSString:(NSString *)str
                                 withJavaUtilLocale:(JavaUtilLocale *)locale
                                  withNSStringArray:(IOSObjectArray *)parsePatterns
                                        withBoolean:(jboolean)lenient {
  return OrgApacheCommonsLang3TimeDateUtils_parseDateWithLeniencyWithNSString_withJavaUtilLocale_withNSStringArray_withBoolean_(str, locale, parsePatterns, lenient);
}

+ (JavaUtilDate *)addYearsWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addYearsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addMonthsWithJavaUtilDate:(JavaUtilDate *)date
                                    withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addMonthsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addWeeksWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addWeeksWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addDaysWithJavaUtilDate:(JavaUtilDate *)date
                                  withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addDaysWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addHoursWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addHoursWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addMinutesWithJavaUtilDate:(JavaUtilDate *)date
                                     withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addMinutesWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addSecondsWithJavaUtilDate:(JavaUtilDate *)date
                                     withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addSecondsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addMillisecondsWithJavaUtilDate:(JavaUtilDate *)date
                                          withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addMillisecondsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)addWithJavaUtilDate:(JavaUtilDate *)date
                              withInt:(jint)calendarField
                              withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, calendarField, amount);
}

+ (JavaUtilDate *)setYearsWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setYearsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setMonthsWithJavaUtilDate:(JavaUtilDate *)date
                                    withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setMonthsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setDaysWithJavaUtilDate:(JavaUtilDate *)date
                                  withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setDaysWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setHoursWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setHoursWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setMinutesWithJavaUtilDate:(JavaUtilDate *)date
                                     withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setMinutesWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setSecondsWithJavaUtilDate:(JavaUtilDate *)date
                                     withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setSecondsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setMillisecondsWithJavaUtilDate:(JavaUtilDate *)date
                                          withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setMillisecondsWithJavaUtilDate_withInt_(date, amount);
}

+ (JavaUtilDate *)setWithJavaUtilDate:(JavaUtilDate *)date
                              withInt:(jint)calendarField
                              withInt:(jint)amount {
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, calendarField, amount);
}

+ (JavaUtilCalendar *)toCalendarWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgApacheCommonsLang3TimeDateUtils_toCalendarWithJavaUtilDate_(date);
}

+ (JavaUtilDate *)roundWithJavaUtilDate:(JavaUtilDate *)date
                                withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_roundWithJavaUtilDate_withInt_(date, field);
}

+ (JavaUtilCalendar *)roundWithJavaUtilCalendar:(JavaUtilCalendar *)date
                                        withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_roundWithJavaUtilCalendar_withInt_(date, field);
}

+ (JavaUtilDate *)roundWithId:(id)date
                      withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_roundWithId_withInt_(date, field);
}

+ (JavaUtilDate *)truncateWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilDate_withInt_(date, field);
}

+ (JavaUtilCalendar *)truncateWithJavaUtilCalendar:(JavaUtilCalendar *)date
                                           withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(date, field);
}

+ (JavaUtilDate *)truncateWithId:(id)date
                         withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncateWithId_withInt_(date, field);
}

+ (JavaUtilDate *)ceilingWithJavaUtilDate:(JavaUtilDate *)date
                                  withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_ceilingWithJavaUtilDate_withInt_(date, field);
}

+ (JavaUtilCalendar *)ceilingWithJavaUtilCalendar:(JavaUtilCalendar *)date
                                          withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_ceilingWithJavaUtilCalendar_withInt_(date, field);
}

+ (JavaUtilDate *)ceilingWithId:(id)date
                        withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_ceilingWithId_withInt_(date, field);
}

+ (void)modifyWithJavaUtilCalendar:(JavaUtilCalendar *)val
                           withInt:(jint)field
withOrgApacheCommonsLang3TimeDateUtils_ModifyType:(OrgApacheCommonsLang3TimeDateUtils_ModifyType *)modType {
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(val, field, modType);
}

+ (id<JavaUtilIterator>)iteratorWithJavaUtilDate:(JavaUtilDate *)focus
                                         withInt:(jint)rangeStyle {
  return OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilDate_withInt_(focus, rangeStyle);
}

+ (id<JavaUtilIterator>)iteratorWithJavaUtilCalendar:(JavaUtilCalendar *)focus
                                             withInt:(jint)rangeStyle {
  return OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilCalendar_withInt_(focus, rangeStyle);
}

+ (id<JavaUtilIterator>)iteratorWithId:(id)focus
                               withInt:(jint)rangeStyle {
  return OrgApacheCommonsLang3TimeDateUtils_iteratorWithId_withInt_(focus, rangeStyle);
}

+ (jlong)getFragmentInMillisecondsWithJavaUtilDate:(JavaUtilDate *)date
                                           withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInMillisecondsWithJavaUtilDate_withInt_(date, fragment);
}

+ (jlong)getFragmentInSecondsWithJavaUtilDate:(JavaUtilDate *)date
                                      withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInSecondsWithJavaUtilDate_withInt_(date, fragment);
}

+ (jlong)getFragmentInMinutesWithJavaUtilDate:(JavaUtilDate *)date
                                      withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInMinutesWithJavaUtilDate_withInt_(date, fragment);
}

+ (jlong)getFragmentInHoursWithJavaUtilDate:(JavaUtilDate *)date
                                    withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInHoursWithJavaUtilDate_withInt_(date, fragment);
}

+ (jlong)getFragmentInDaysWithJavaUtilDate:(JavaUtilDate *)date
                                   withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInDaysWithJavaUtilDate_withInt_(date, fragment);
}

+ (jlong)getFragmentInMillisecondsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                               withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInMillisecondsWithJavaUtilCalendar_withInt_(calendar, fragment);
}

+ (jlong)getFragmentInSecondsWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                          withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInSecondsWithJavaUtilCalendar_withInt_(calendar, fragment);
}

+ (jlong)getFragmentInMinutesWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                          withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInMinutesWithJavaUtilCalendar_withInt_(calendar, fragment);
}

+ (jlong)getFragmentInHoursWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                        withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInHoursWithJavaUtilCalendar_withInt_(calendar, fragment);
}

+ (jlong)getFragmentInDaysWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                       withInt:(jint)fragment {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentInDaysWithJavaUtilCalendar_withInt_(calendar, fragment);
}

+ (jlong)getFragmentWithJavaUtilDate:(JavaUtilDate *)date
                             withInt:(jint)fragment
      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(date, fragment, unit);
}

+ (jlong)getFragmentWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                 withInt:(jint)fragment
          withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, unit);
}

+ (jboolean)truncatedEqualsWithJavaUtilCalendar:(JavaUtilCalendar *)cal1
                           withJavaUtilCalendar:(JavaUtilCalendar *)cal2
                                        withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncatedEqualsWithJavaUtilCalendar_withJavaUtilCalendar_withInt_(cal1, cal2, field);
}

+ (jboolean)truncatedEqualsWithJavaUtilDate:(JavaUtilDate *)date1
                           withJavaUtilDate:(JavaUtilDate *)date2
                                    withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncatedEqualsWithJavaUtilDate_withJavaUtilDate_withInt_(date1, date2, field);
}

+ (jint)truncatedCompareToWithJavaUtilCalendar:(JavaUtilCalendar *)cal1
                          withJavaUtilCalendar:(JavaUtilCalendar *)cal2
                                       withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncatedCompareToWithJavaUtilCalendar_withJavaUtilCalendar_withInt_(cal1, cal2, field);
}

+ (jint)truncatedCompareToWithJavaUtilDate:(JavaUtilDate *)date1
                          withJavaUtilDate:(JavaUtilDate *)date2
                                   withInt:(jint)field {
  return OrgApacheCommonsLang3TimeDateUtils_truncatedCompareToWithJavaUtilDate_withJavaUtilDate_withInt_(date1, date2, field);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x89, 5, 6, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x89, 5, 8, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x89, 9, 6, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x89, 9, 8, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xa, 10, 11, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 14, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 15, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 16, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 17, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 18, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 19, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 20, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 23, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 24, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 25, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 26, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 27, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 28, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 29, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xa, 30, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 33, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 33, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 36, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x9, 36, 34, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 36, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 37, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x9, 37, 34, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x9, 37, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 39, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x9, 40, 13, -1, 41, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x9, 40, 34, -1, 42, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x9, 40, 35, -1, 43, -1, -1 },
    { NULL, "J", 0x9, 44, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 45, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 46, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 47, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 48, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 44, 34, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 45, 34, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 46, 34, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 47, 34, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 48, 34, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 49, 50, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 49, 51, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 52, 53, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 52, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 55, 53, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 55, 54, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isSameDayWithJavaUtilDate:withJavaUtilDate:);
  methods[2].selector = @selector(isSameDayWithJavaUtilCalendar:withJavaUtilCalendar:);
  methods[3].selector = @selector(isSameInstantWithJavaUtilDate:withJavaUtilDate:);
  methods[4].selector = @selector(isSameInstantWithJavaUtilCalendar:withJavaUtilCalendar:);
  methods[5].selector = @selector(isSameLocalTimeWithJavaUtilCalendar:withJavaUtilCalendar:);
  methods[6].selector = @selector(parseDateWithNSString:withNSStringArray:);
  methods[7].selector = @selector(parseDateWithNSString:withJavaUtilLocale:withNSStringArray:);
  methods[8].selector = @selector(parseDateStrictlyWithNSString:withNSStringArray:);
  methods[9].selector = @selector(parseDateStrictlyWithNSString:withJavaUtilLocale:withNSStringArray:);
  methods[10].selector = @selector(parseDateWithLeniencyWithNSString:withJavaUtilLocale:withNSStringArray:withBoolean:);
  methods[11].selector = @selector(addYearsWithJavaUtilDate:withInt:);
  methods[12].selector = @selector(addMonthsWithJavaUtilDate:withInt:);
  methods[13].selector = @selector(addWeeksWithJavaUtilDate:withInt:);
  methods[14].selector = @selector(addDaysWithJavaUtilDate:withInt:);
  methods[15].selector = @selector(addHoursWithJavaUtilDate:withInt:);
  methods[16].selector = @selector(addMinutesWithJavaUtilDate:withInt:);
  methods[17].selector = @selector(addSecondsWithJavaUtilDate:withInt:);
  methods[18].selector = @selector(addMillisecondsWithJavaUtilDate:withInt:);
  methods[19].selector = @selector(addWithJavaUtilDate:withInt:withInt:);
  methods[20].selector = @selector(setYearsWithJavaUtilDate:withInt:);
  methods[21].selector = @selector(setMonthsWithJavaUtilDate:withInt:);
  methods[22].selector = @selector(setDaysWithJavaUtilDate:withInt:);
  methods[23].selector = @selector(setHoursWithJavaUtilDate:withInt:);
  methods[24].selector = @selector(setMinutesWithJavaUtilDate:withInt:);
  methods[25].selector = @selector(setSecondsWithJavaUtilDate:withInt:);
  methods[26].selector = @selector(setMillisecondsWithJavaUtilDate:withInt:);
  methods[27].selector = @selector(setWithJavaUtilDate:withInt:withInt:);
  methods[28].selector = @selector(toCalendarWithJavaUtilDate:);
  methods[29].selector = @selector(roundWithJavaUtilDate:withInt:);
  methods[30].selector = @selector(roundWithJavaUtilCalendar:withInt:);
  methods[31].selector = @selector(roundWithId:withInt:);
  methods[32].selector = @selector(truncateWithJavaUtilDate:withInt:);
  methods[33].selector = @selector(truncateWithJavaUtilCalendar:withInt:);
  methods[34].selector = @selector(truncateWithId:withInt:);
  methods[35].selector = @selector(ceilingWithJavaUtilDate:withInt:);
  methods[36].selector = @selector(ceilingWithJavaUtilCalendar:withInt:);
  methods[37].selector = @selector(ceilingWithId:withInt:);
  methods[38].selector = @selector(modifyWithJavaUtilCalendar:withInt:withOrgApacheCommonsLang3TimeDateUtils_ModifyType:);
  methods[39].selector = @selector(iteratorWithJavaUtilDate:withInt:);
  methods[40].selector = @selector(iteratorWithJavaUtilCalendar:withInt:);
  methods[41].selector = @selector(iteratorWithId:withInt:);
  methods[42].selector = @selector(getFragmentInMillisecondsWithJavaUtilDate:withInt:);
  methods[43].selector = @selector(getFragmentInSecondsWithJavaUtilDate:withInt:);
  methods[44].selector = @selector(getFragmentInMinutesWithJavaUtilDate:withInt:);
  methods[45].selector = @selector(getFragmentInHoursWithJavaUtilDate:withInt:);
  methods[46].selector = @selector(getFragmentInDaysWithJavaUtilDate:withInt:);
  methods[47].selector = @selector(getFragmentInMillisecondsWithJavaUtilCalendar:withInt:);
  methods[48].selector = @selector(getFragmentInSecondsWithJavaUtilCalendar:withInt:);
  methods[49].selector = @selector(getFragmentInMinutesWithJavaUtilCalendar:withInt:);
  methods[50].selector = @selector(getFragmentInHoursWithJavaUtilCalendar:withInt:);
  methods[51].selector = @selector(getFragmentInDaysWithJavaUtilCalendar:withInt:);
  methods[52].selector = @selector(getFragmentWithJavaUtilDate:withInt:withJavaUtilConcurrentTimeUnit:);
  methods[53].selector = @selector(getFragmentWithJavaUtilCalendar:withInt:withJavaUtilConcurrentTimeUnit:);
  methods[54].selector = @selector(truncatedEqualsWithJavaUtilCalendar:withJavaUtilCalendar:withInt:);
  methods[55].selector = @selector(truncatedEqualsWithJavaUtilDate:withJavaUtilDate:withInt:);
  methods[56].selector = @selector(truncatedCompareToWithJavaUtilCalendar:withJavaUtilCalendar:withInt:);
  methods[57].selector = @selector(truncatedCompareToWithJavaUtilDate:withJavaUtilDate:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MILLIS_PER_SECOND", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeDateUtils_MILLIS_PER_SECOND, 0x19, -1, -1, -1, -1 },
    { "MILLIS_PER_MINUTE", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeDateUtils_MILLIS_PER_MINUTE, 0x19, -1, -1, -1, -1 },
    { "MILLIS_PER_HOUR", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeDateUtils_MILLIS_PER_HOUR, 0x19, -1, -1, -1, -1 },
    { "MILLIS_PER_DAY", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeDateUtils_MILLIS_PER_DAY, 0x19, -1, -1, -1, -1 },
    { "SEMI_MONTH", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_SEMI_MONTH, 0x19, -1, -1, -1, -1 },
    { "fields", "[[I", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "RANGE_WEEK_SUNDAY", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_SUNDAY, 0x19, -1, -1, -1, -1 },
    { "RANGE_WEEK_MONDAY", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_MONDAY, 0x19, -1, -1, -1, -1 },
    { "RANGE_WEEK_RELATIVE", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_RELATIVE, 0x19, -1, -1, -1, -1 },
    { "RANGE_WEEK_CENTER", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_CENTER, 0x19, -1, -1, -1, -1 },
    { "RANGE_MONTH_SUNDAY", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_RANGE_MONTH_SUNDAY, 0x19, -1, -1, -1, -1 },
    { "RANGE_MONTH_MONDAY", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeDateUtils_RANGE_MONTH_MONDAY, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isSameDay", "LJavaUtilDate;LJavaUtilDate;", "LJavaUtilCalendar;LJavaUtilCalendar;", "isSameInstant", "isSameLocalTime", "parseDate", "LNSString;[LNSString;", "LJavaTextParseException;", "LNSString;LJavaUtilLocale;[LNSString;", "parseDateStrictly", "parseDateWithLeniency", "LNSString;LJavaUtilLocale;[LNSString;Z", "addYears", "LJavaUtilDate;I", "addMonths", "addWeeks", "addDays", "addHours", "addMinutes", "addSeconds", "addMilliseconds", "add", "LJavaUtilDate;II", "setYears", "setMonths", "setDays", "setHours", "setMinutes", "setSeconds", "setMilliseconds", "set", "toCalendar", "LJavaUtilDate;", "round", "LJavaUtilCalendar;I", "LNSObject;I", "truncate", "ceiling", "modify", "LJavaUtilCalendar;ILOrgApacheCommonsLang3TimeDateUtils_ModifyType;", "iterator", "(Ljava/util/Date;I)Ljava/util/Iterator<Ljava/util/Calendar;>;", "(Ljava/util/Calendar;I)Ljava/util/Iterator<Ljava/util/Calendar;>;", "(Ljava/lang/Object;I)Ljava/util/Iterator<*>;", "getFragmentInMilliseconds", "getFragmentInSeconds", "getFragmentInMinutes", "getFragmentInHours", "getFragmentInDays", "getFragment", "LJavaUtilDate;ILJavaUtilConcurrentTimeUnit;", "LJavaUtilCalendar;ILJavaUtilConcurrentTimeUnit;", "truncatedEquals", "LJavaUtilCalendar;LJavaUtilCalendar;I", "LJavaUtilDate;LJavaUtilDate;I", "truncatedCompareTo", &OrgApacheCommonsLang3TimeDateUtils_fields, "LOrgApacheCommonsLang3TimeDateUtils_ModifyType;LOrgApacheCommonsLang3TimeDateUtils_DateIterator;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeDateUtils = { "DateUtils", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x1, 58, 12, -1, 57, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeDateUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeDateUtils class]) {
    OrgApacheCommonsLang3TimeDateUtils_fields = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_MILLISECOND } count:1], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_SECOND } count:1], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_MINUTE } count:1], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_HOUR_OF_DAY, JavaUtilCalendar_HOUR } count:2], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_DATE, JavaUtilCalendar_DAY_OF_MONTH, JavaUtilCalendar_AM_PM } count:3], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_MONTH, OrgApacheCommonsLang3TimeDateUtils_SEMI_MONTH } count:2], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_YEAR } count:1], [IOSIntArray newArrayWithInts:(jint[]){ JavaUtilCalendar_ERA } count:1] } count:8 type:IOSClass_intArray(1)];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeDateUtils)
  }
}

@end

void OrgApacheCommonsLang3TimeDateUtils_init(OrgApacheCommonsLang3TimeDateUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TimeDateUtils *new_OrgApacheCommonsLang3TimeDateUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeDateUtils, init)
}

OrgApacheCommonsLang3TimeDateUtils *create_OrgApacheCommonsLang3TimeDateUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeDateUtils, init)
}

jboolean OrgApacheCommonsLang3TimeDateUtils_isSameDayWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *date1, JavaUtilDate *date2) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date1 == nil || date2 == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *cal1 = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal1)) setTimeWithJavaUtilDate:date1];
  JavaUtilCalendar *cal2 = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(cal2)) setTimeWithJavaUtilDate:date2];
  return OrgApacheCommonsLang3TimeDateUtils_isSameDayWithJavaUtilCalendar_withJavaUtilCalendar_(cal1, cal2);
}

jboolean OrgApacheCommonsLang3TimeDateUtils_isSameDayWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *cal1, JavaUtilCalendar *cal2) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (cal1 == nil || cal2 == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return ([cal1 getWithInt:JavaUtilCalendar_ERA] == [cal2 getWithInt:JavaUtilCalendar_ERA] && [cal1 getWithInt:JavaUtilCalendar_YEAR] == [cal2 getWithInt:JavaUtilCalendar_YEAR] && [cal1 getWithInt:JavaUtilCalendar_DAY_OF_YEAR] == [cal2 getWithInt:JavaUtilCalendar_DAY_OF_YEAR]);
}

jboolean OrgApacheCommonsLang3TimeDateUtils_isSameInstantWithJavaUtilDate_withJavaUtilDate_(JavaUtilDate *date1, JavaUtilDate *date2) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date1 == nil || date2 == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return [date1 getTime] == [date2 getTime];
}

jboolean OrgApacheCommonsLang3TimeDateUtils_isSameInstantWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *cal1, JavaUtilCalendar *cal2) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (cal1 == nil || cal2 == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return [((JavaUtilDate *) nil_chk([cal1 getTime])) getTime] == [((JavaUtilDate *) nil_chk([cal2 getTime])) getTime];
}

jboolean OrgApacheCommonsLang3TimeDateUtils_isSameLocalTimeWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *cal1, JavaUtilCalendar *cal2) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (cal1 == nil || cal2 == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  return ([cal1 getWithInt:JavaUtilCalendar_MILLISECOND] == [cal2 getWithInt:JavaUtilCalendar_MILLISECOND] && [cal1 getWithInt:JavaUtilCalendar_SECOND] == [cal2 getWithInt:JavaUtilCalendar_SECOND] && [cal1 getWithInt:JavaUtilCalendar_MINUTE] == [cal2 getWithInt:JavaUtilCalendar_MINUTE] && [cal1 getWithInt:JavaUtilCalendar_HOUR_OF_DAY] == [cal2 getWithInt:JavaUtilCalendar_HOUR_OF_DAY] && [cal1 getWithInt:JavaUtilCalendar_DAY_OF_YEAR] == [cal2 getWithInt:JavaUtilCalendar_DAY_OF_YEAR] && [cal1 getWithInt:JavaUtilCalendar_YEAR] == [cal2 getWithInt:JavaUtilCalendar_YEAR] && [cal1 getWithInt:JavaUtilCalendar_ERA] == [cal2 getWithInt:JavaUtilCalendar_ERA] && [cal1 java_getClass] == [cal2 java_getClass]);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_parseDateWithNSString_withNSStringArray_(NSString *str, IOSObjectArray *parsePatterns) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_parseDateWithNSString_withJavaUtilLocale_withNSStringArray_(str, nil, parsePatterns);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_parseDateWithNSString_withJavaUtilLocale_withNSStringArray_(NSString *str, JavaUtilLocale *locale, IOSObjectArray *parsePatterns) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_parseDateWithLeniencyWithNSString_withJavaUtilLocale_withNSStringArray_withBoolean_(str, locale, parsePatterns, true);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_parseDateStrictlyWithNSString_withNSStringArray_(NSString *str, IOSObjectArray *parsePatterns) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_parseDateStrictlyWithNSString_withJavaUtilLocale_withNSStringArray_(str, nil, parsePatterns);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_parseDateStrictlyWithNSString_withJavaUtilLocale_withNSStringArray_(NSString *str, JavaUtilLocale *locale, IOSObjectArray *parsePatterns) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_parseDateWithLeniencyWithNSString_withJavaUtilLocale_withNSStringArray_withBoolean_(str, nil, parsePatterns, false);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_parseDateWithLeniencyWithNSString_withJavaUtilLocale_withNSStringArray_withBoolean_(NSString *str, JavaUtilLocale *locale, IOSObjectArray *parsePatterns, jboolean lenient) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (str == nil || parsePatterns == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Date and Patterns must not be null");
  }
  JavaTextSimpleDateFormat *parser;
  if (locale == nil) {
    parser = new_JavaTextSimpleDateFormat_init();
  }
  else {
    parser = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"", locale);
  }
  [parser setLenientWithBoolean:lenient];
  JavaTextParsePosition *pos = new_JavaTextParsePosition_initWithInt_(0);
  {
    IOSObjectArray *a__ = parsePatterns;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *parsePattern = *b__++;
      NSString *pattern = parsePattern;
      if ([((NSString *) nil_chk(parsePattern)) java_hasSuffix:@"ZZ"]) {
        pattern = [((NSString *) nil_chk(pattern)) java_substring:0 endIndex:[pattern java_length] - 1];
      }
      [parser applyPatternWithNSString:pattern];
      [pos setIndexWithInt:0];
      NSString *str2 = str;
      if ([parsePattern java_hasSuffix:@"ZZ"]) {
        str2 = [str java_replaceAll:@"([-+][0-9][0-9]):([0-9][0-9])$" withReplacement:@"$1$2"];
      }
      JavaUtilDate *date = [parser parseWithNSString:str2 withJavaTextParsePosition:pos];
      if (date != nil && [pos getIndex] == [((NSString *) nil_chk(str2)) java_length]) {
        return date;
      }
    }
  }
  @throw new_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"Unable to parse the date: ", str), -1);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addYearsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_YEAR, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addMonthsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_MONTH, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addWeeksWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_WEEK_OF_YEAR, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addDaysWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_DAY_OF_MONTH, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addHoursWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_HOUR_OF_DAY, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addMinutesWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_MINUTE, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addSecondsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_SECOND, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addMillisecondsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_MILLISECOND, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_addWithJavaUtilDate_withInt_withInt_(JavaUtilDate *date, jint calendarField, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *c = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(c)) setTimeWithJavaUtilDate:date];
  [c addWithInt:calendarField withInt:amount];
  return [c getTime];
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setYearsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_YEAR, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setMonthsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_MONTH, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setDaysWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_DAY_OF_MONTH, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setHoursWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_HOUR_OF_DAY, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setMinutesWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_MINUTE, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setSecondsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_SECOND, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setMillisecondsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(date, JavaUtilCalendar_MILLISECOND, amount);
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_setWithJavaUtilDate_withInt_withInt_(JavaUtilDate *date, jint calendarField, jint amount) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *c = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(c)) setLenientWithBoolean:false];
  [c setTimeWithJavaUtilDate:date];
  [c setWithInt:calendarField withInt:amount];
  return [c getTime];
}

JavaUtilCalendar *OrgApacheCommonsLang3TimeDateUtils_toCalendarWithJavaUtilDate_(JavaUtilDate *date) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  JavaUtilCalendar *c = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(c)) setTimeWithJavaUtilDate:date];
  return c;
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_roundWithJavaUtilDate_withInt_(JavaUtilDate *date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *gval = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(gval)) setTimeWithJavaUtilDate:date];
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(gval, field, JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, ROUND));
  return [gval getTime];
}

JavaUtilCalendar *OrgApacheCommonsLang3TimeDateUtils_roundWithJavaUtilCalendar_withInt_(JavaUtilCalendar *date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *rounded = (JavaUtilCalendar *) cast_chk([date java_clone], [JavaUtilCalendar class]);
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(rounded, field, JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, ROUND));
  return rounded;
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_roundWithId_withInt_(id date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    return OrgApacheCommonsLang3TimeDateUtils_roundWithJavaUtilDate_withInt_((JavaUtilDate *) cast_chk(date, [JavaUtilDate class]), field);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    return [((JavaUtilCalendar *) nil_chk(OrgApacheCommonsLang3TimeDateUtils_roundWithJavaUtilCalendar_withInt_((JavaUtilCalendar *) cast_chk(date, [JavaUtilCalendar class]), field))) getTime];
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@", @"Could not round ", date));
  }
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilDate_withInt_(JavaUtilDate *date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *gval = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(gval)) setTimeWithJavaUtilDate:date];
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(gval, field, JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE));
  return [gval getTime];
}

JavaUtilCalendar *OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(JavaUtilCalendar *date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *truncated = (JavaUtilCalendar *) cast_chk([date java_clone], [JavaUtilCalendar class]);
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(truncated, field, JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE));
  return truncated;
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_truncateWithId_withInt_(id date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    return OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilDate_withInt_((JavaUtilDate *) cast_chk(date, [JavaUtilDate class]), field);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    return [((JavaUtilCalendar *) nil_chk(OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_((JavaUtilCalendar *) cast_chk(date, [JavaUtilCalendar class]), field))) getTime];
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@", @"Could not truncate ", date));
  }
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_ceilingWithJavaUtilDate_withInt_(JavaUtilDate *date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *gval = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(gval)) setTimeWithJavaUtilDate:date];
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(gval, field, JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, CEILING));
  return [gval getTime];
}

JavaUtilCalendar *OrgApacheCommonsLang3TimeDateUtils_ceilingWithJavaUtilCalendar_withInt_(JavaUtilCalendar *date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *ceiled = (JavaUtilCalendar *) cast_chk([date java_clone], [JavaUtilCalendar class]);
  OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(ceiled, field, JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, CEILING));
  return ceiled;
}

JavaUtilDate *OrgApacheCommonsLang3TimeDateUtils_ceilingWithId_withInt_(id date, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  if ([date isKindOfClass:[JavaUtilDate class]]) {
    return OrgApacheCommonsLang3TimeDateUtils_ceilingWithJavaUtilDate_withInt_((JavaUtilDate *) cast_chk(date, [JavaUtilDate class]), field);
  }
  else if ([date isKindOfClass:[JavaUtilCalendar class]]) {
    return [((JavaUtilCalendar *) nil_chk(OrgApacheCommonsLang3TimeDateUtils_ceilingWithJavaUtilCalendar_withInt_((JavaUtilCalendar *) cast_chk(date, [JavaUtilCalendar class]), field))) getTime];
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@", @"Could not find ceiling of for type: ", [date java_getClass]));
  }
}

void OrgApacheCommonsLang3TimeDateUtils_modifyWithJavaUtilCalendar_withInt_withOrgApacheCommonsLang3TimeDateUtils_ModifyType_(JavaUtilCalendar *val, jint field, OrgApacheCommonsLang3TimeDateUtils_ModifyType *modType) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if ([((JavaUtilCalendar *) nil_chk(val)) getWithInt:JavaUtilCalendar_YEAR] > 280000000) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Calendar value too large for accurate calculations");
  }
  if (field == JavaUtilCalendar_MILLISECOND) {
    return;
  }
  JavaUtilDate *date = [val getTime];
  jlong time = [((JavaUtilDate *) nil_chk(date)) getTime];
  jboolean done = false;
  jint millisecs = [val getWithInt:JavaUtilCalendar_MILLISECOND];
  if (JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE) == modType || millisecs < 500) {
    time = time - millisecs;
  }
  if (field == JavaUtilCalendar_SECOND) {
    done = true;
  }
  jint seconds = [val getWithInt:JavaUtilCalendar_SECOND];
  if (!done && (JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE) == modType || seconds < 30)) {
    time = time - (seconds * 1000LL);
  }
  if (field == JavaUtilCalendar_MINUTE) {
    done = true;
  }
  jint minutes = [val getWithInt:JavaUtilCalendar_MINUTE];
  if (!done && (JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE) == modType || minutes < 30)) {
    time = time - (minutes * 60000LL);
  }
  if ([date getTime] != time) {
    [date setTimeWithLong:time];
    [val setTimeWithJavaUtilDate:date];
  }
  jboolean roundUp = false;
  {
    IOSObjectArray *a__ = OrgApacheCommonsLang3TimeDateUtils_fields;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *aField = *b__++;
      {
        IOSIntArray *a__ = aField;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint element = *b__++;
          if (element == field) {
            if (modType == JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, CEILING) || (modType == JreLoadEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, ROUND) && roundUp)) {
              if (field == OrgApacheCommonsLang3TimeDateUtils_SEMI_MONTH) {
                if ([val getWithInt:JavaUtilCalendar_DATE] == 1) {
                  [val addWithInt:JavaUtilCalendar_DATE withInt:15];
                }
                else {
                  [val addWithInt:JavaUtilCalendar_DATE withInt:-15];
                  [val addWithInt:JavaUtilCalendar_MONTH withInt:1];
                }
              }
              else if (field == JavaUtilCalendar_AM_PM) {
                if ([val getWithInt:JavaUtilCalendar_HOUR_OF_DAY] == 0) {
                  [val addWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:12];
                }
                else {
                  [val addWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:-12];
                  [val addWithInt:JavaUtilCalendar_DATE withInt:1];
                }
              }
              else {
                [val addWithInt:IOSIntArray_Get(nil_chk(aField), 0) withInt:1];
              }
            }
            return;
          }
        }
      }
      jint offset = 0;
      jboolean offsetSet = false;
      switch (field) {
        case OrgApacheCommonsLang3TimeDateUtils_SEMI_MONTH:
        if (IOSIntArray_Get(nil_chk(aField), 0) == JavaUtilCalendar_DATE) {
          offset = [val getWithInt:JavaUtilCalendar_DATE] - 1;
          if (offset >= 15) {
            offset -= 15;
          }
          roundUp = (offset > 7);
          offsetSet = true;
        }
        break;
        case JavaUtilCalendar_AM_PM:
        if (IOSIntArray_Get(nil_chk(aField), 0) == JavaUtilCalendar_HOUR_OF_DAY) {
          offset = [val getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
          if (offset >= 12) {
            offset -= 12;
          }
          roundUp = (offset >= 6);
          offsetSet = true;
        }
        break;
        default:
        break;
      }
      if (!offsetSet) {
        jint min = [val getActualMinimumWithInt:IOSIntArray_Get(nil_chk(aField), 0)];
        jint max = [val getActualMaximumWithInt:IOSIntArray_Get(aField, 0)];
        offset = [val getWithInt:IOSIntArray_Get(aField, 0)] - min;
        roundUp = (offset > ((max - min) / 2));
      }
      if (offset != 0) {
        [val setWithInt:IOSIntArray_Get(nil_chk(aField), 0) withInt:[val getWithInt:IOSIntArray_Get(aField, 0)] - offset];
      }
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The field ", field, @" is not supported"));
}

id<JavaUtilIterator> OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilDate_withInt_(JavaUtilDate *focus, jint rangeStyle) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (focus == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *gval = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(gval)) setTimeWithJavaUtilDate:focus];
  return OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilCalendar_withInt_(gval, rangeStyle);
}

id<JavaUtilIterator> OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilCalendar_withInt_(JavaUtilCalendar *focus, jint rangeStyle) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (focus == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *start = nil;
  JavaUtilCalendar *end = nil;
  jint startCutoff = JavaUtilCalendar_SUNDAY;
  jint endCutoff = JavaUtilCalendar_SATURDAY;
  switch (rangeStyle) {
    case OrgApacheCommonsLang3TimeDateUtils_RANGE_MONTH_SUNDAY:
    case OrgApacheCommonsLang3TimeDateUtils_RANGE_MONTH_MONDAY:
    start = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(focus, JavaUtilCalendar_MONTH);
    end = (JavaUtilCalendar *) cast_chk([((JavaUtilCalendar *) nil_chk(start)) java_clone], [JavaUtilCalendar class]);
    [((JavaUtilCalendar *) nil_chk(end)) addWithInt:JavaUtilCalendar_MONTH withInt:1];
    [end addWithInt:JavaUtilCalendar_DATE withInt:-1];
    if (rangeStyle == OrgApacheCommonsLang3TimeDateUtils_RANGE_MONTH_MONDAY) {
      startCutoff = JavaUtilCalendar_MONDAY;
      endCutoff = JavaUtilCalendar_SUNDAY;
    }
    break;
    case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_SUNDAY:
    case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_MONDAY:
    case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_RELATIVE:
    case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_CENTER:
    start = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(focus, JavaUtilCalendar_DATE);
    end = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(focus, JavaUtilCalendar_DATE);
    switch (rangeStyle) {
      case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_SUNDAY:
      break;
      case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_MONDAY:
      startCutoff = JavaUtilCalendar_MONDAY;
      endCutoff = JavaUtilCalendar_SUNDAY;
      break;
      case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_RELATIVE:
      startCutoff = [focus getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
      endCutoff = startCutoff - 1;
      break;
      case OrgApacheCommonsLang3TimeDateUtils_RANGE_WEEK_CENTER:
      startCutoff = [focus getWithInt:JavaUtilCalendar_DAY_OF_WEEK] - 3;
      endCutoff = [focus getWithInt:JavaUtilCalendar_DAY_OF_WEEK] + 3;
      break;
      default:
      break;
    }
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The range style ", rangeStyle, @" is not valid."));
  }
  if (startCutoff < JavaUtilCalendar_SUNDAY) {
    startCutoff += 7;
  }
  if (startCutoff > JavaUtilCalendar_SATURDAY) {
    startCutoff -= 7;
  }
  if (endCutoff < JavaUtilCalendar_SUNDAY) {
    endCutoff += 7;
  }
  if (endCutoff > JavaUtilCalendar_SATURDAY) {
    endCutoff -= 7;
  }
  while ([((JavaUtilCalendar *) nil_chk(start)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] != startCutoff) {
    [start addWithInt:JavaUtilCalendar_DATE withInt:-1];
  }
  while ([((JavaUtilCalendar *) nil_chk(end)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] != endCutoff) {
    [end addWithInt:JavaUtilCalendar_DATE withInt:1];
  }
  return new_OrgApacheCommonsLang3TimeDateUtils_DateIterator_initWithJavaUtilCalendar_withJavaUtilCalendar_(start, end);
}

id<JavaUtilIterator> OrgApacheCommonsLang3TimeDateUtils_iteratorWithId_withInt_(id focus, jint rangeStyle) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (focus == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  if ([focus isKindOfClass:[JavaUtilDate class]]) {
    return OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilDate_withInt_((JavaUtilDate *) cast_chk(focus, [JavaUtilDate class]), rangeStyle);
  }
  else if ([focus isKindOfClass:[JavaUtilCalendar class]]) {
    return OrgApacheCommonsLang3TimeDateUtils_iteratorWithJavaUtilCalendar_withInt_((JavaUtilCalendar *) cast_chk(focus, [JavaUtilCalendar class]), rangeStyle);
  }
  else {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$@", @"Could not iterate based on ", focus));
  }
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInMillisecondsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(date, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInSecondsWithJavaUtilDate_withInt_(JavaUtilDate *date, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(date, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInMinutesWithJavaUtilDate_withInt_(JavaUtilDate *date, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(date, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInHoursWithJavaUtilDate_withInt_(JavaUtilDate *date, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(date, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInDaysWithJavaUtilDate_withInt_(JavaUtilDate *date, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(date, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInMillisecondsWithJavaUtilCalendar_withInt_(JavaUtilCalendar *calendar, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInSecondsWithJavaUtilCalendar_withInt_(JavaUtilCalendar *calendar, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInMinutesWithJavaUtilCalendar_withInt_(JavaUtilCalendar *calendar, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInHoursWithJavaUtilCalendar_withInt_(JavaUtilCalendar *calendar, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentInDaysWithJavaUtilCalendar_withInt_(JavaUtilCalendar *calendar, jint fragment) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS));
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilDate_withInt_withJavaUtilConcurrentTimeUnit_(JavaUtilDate *date, jint fragment, JavaUtilConcurrentTimeUnit *unit) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (date == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  JavaUtilCalendar *calendar = JavaUtilCalendar_getInstance();
  [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:date];
  return OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(calendar, fragment, unit);
}

jlong OrgApacheCommonsLang3TimeDateUtils_getFragmentWithJavaUtilCalendar_withInt_withJavaUtilConcurrentTimeUnit_(JavaUtilCalendar *calendar, jint fragment, JavaUtilConcurrentTimeUnit *unit) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  if (calendar == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The date must not be null");
  }
  jlong result = 0;
  jint offset = (unit == JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)) ? 0 : 1;
  switch (fragment) {
    case JavaUtilCalendar_YEAR:
    result += [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:[calendar getWithInt:JavaUtilCalendar_DAY_OF_YEAR] - offset withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
    break;
    case JavaUtilCalendar_MONTH:
    result += [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:[calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH] - offset withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, DAYS)];
    break;
    default:
    break;
  }
  switch (fragment) {
    case JavaUtilCalendar_YEAR:
    case JavaUtilCalendar_MONTH:
    case JavaUtilCalendar_DAY_OF_YEAR:
    case JavaUtilCalendar_DATE:
    result += [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:[calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, HOURS)];
    case JavaUtilCalendar_HOUR_OF_DAY:
    result += [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:[calendar getWithInt:JavaUtilCalendar_MINUTE] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MINUTES)];
    case JavaUtilCalendar_MINUTE:
    result += [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:[calendar getWithInt:JavaUtilCalendar_SECOND] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
    case JavaUtilCalendar_SECOND:
    result += [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:[calendar getWithInt:JavaUtilCalendar_MILLISECOND] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    break;
    case JavaUtilCalendar_MILLISECOND:
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The fragment ", fragment, @" is not supported"));
  }
  return result;
}

jboolean OrgApacheCommonsLang3TimeDateUtils_truncatedEqualsWithJavaUtilCalendar_withJavaUtilCalendar_withInt_(JavaUtilCalendar *cal1, JavaUtilCalendar *cal2, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_truncatedCompareToWithJavaUtilCalendar_withJavaUtilCalendar_withInt_(cal1, cal2, field) == 0;
}

jboolean OrgApacheCommonsLang3TimeDateUtils_truncatedEqualsWithJavaUtilDate_withJavaUtilDate_withInt_(JavaUtilDate *date1, JavaUtilDate *date2, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  return OrgApacheCommonsLang3TimeDateUtils_truncatedCompareToWithJavaUtilDate_withJavaUtilDate_withInt_(date1, date2, field) == 0;
}

jint OrgApacheCommonsLang3TimeDateUtils_truncatedCompareToWithJavaUtilCalendar_withJavaUtilCalendar_withInt_(JavaUtilCalendar *cal1, JavaUtilCalendar *cal2, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  JavaUtilCalendar *truncatedCal1 = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(cal1, field);
  JavaUtilCalendar *truncatedCal2 = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilCalendar_withInt_(cal2, field);
  return [((JavaUtilCalendar *) nil_chk(truncatedCal1)) compareToWithId:truncatedCal2];
}

jint OrgApacheCommonsLang3TimeDateUtils_truncatedCompareToWithJavaUtilDate_withJavaUtilDate_withInt_(JavaUtilDate *date1, JavaUtilDate *date2, jint field) {
  OrgApacheCommonsLang3TimeDateUtils_initialize();
  JavaUtilDate *truncatedDate1 = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilDate_withInt_(date1, field);
  JavaUtilDate *truncatedDate2 = OrgApacheCommonsLang3TimeDateUtils_truncateWithJavaUtilDate_withInt_(date2, field);
  return [((JavaUtilDate *) nil_chk(truncatedDate1)) compareToWithId:truncatedDate2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeDateUtils)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeDateUtils_ModifyType)

OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_values_[3];

@implementation OrgApacheCommonsLang3TimeDateUtils_ModifyType

+ (IOSObjectArray *)values {
  return OrgApacheCommonsLang3TimeDateUtils_ModifyType_values();
}

+ (OrgApacheCommonsLang3TimeDateUtils_ModifyType *)valueOfWithNSString:(NSString *)name {
  return OrgApacheCommonsLang3TimeDateUtils_ModifyType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheCommonsLang3TimeDateUtils_ModifyType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeDateUtils_ModifyType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUNCATE", "LOrgApacheCommonsLang3TimeDateUtils_ModifyType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ROUND", "LOrgApacheCommonsLang3TimeDateUtils_ModifyType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "CEILING", "LOrgApacheCommonsLang3TimeDateUtils_ModifyType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE), &JreEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, ROUND), &JreEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, CEILING), "LOrgApacheCommonsLang3TimeDateUtils;", "Ljava/lang/Enum<Lorg/apache/commons/lang3/time/DateUtils$ModifyType;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeDateUtils_ModifyType = { "ModifyType", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_OrgApacheCommonsLang3TimeDateUtils_ModifyType;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeDateUtils_ModifyType class]) {
    JreEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, TRUNCATE) = new_OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(@"TRUNCATE", 0);
    JreEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, ROUND) = new_OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(@"ROUND", 1);
    JreEnum(OrgApacheCommonsLang3TimeDateUtils_ModifyType, CEILING) = new_OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(@"CEILING", 2);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeDateUtils_ModifyType)
  }
}

@end

void OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(OrgApacheCommonsLang3TimeDateUtils_ModifyType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgApacheCommonsLang3TimeDateUtils_ModifyType *new_OrgApacheCommonsLang3TimeDateUtils_ModifyType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeDateUtils_ModifyType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *OrgApacheCommonsLang3TimeDateUtils_ModifyType_values() {
  OrgApacheCommonsLang3TimeDateUtils_ModifyType_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheCommonsLang3TimeDateUtils_ModifyType_values_ count:3 type:OrgApacheCommonsLang3TimeDateUtils_ModifyType_class_()];
}

OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_valueOfWithNSString_(NSString *name) {
  OrgApacheCommonsLang3TimeDateUtils_ModifyType_initialize();
  for (int i = 0; i < 3; i++) {
    OrgApacheCommonsLang3TimeDateUtils_ModifyType *e = OrgApacheCommonsLang3TimeDateUtils_ModifyType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheCommonsLang3TimeDateUtils_ModifyType *OrgApacheCommonsLang3TimeDateUtils_ModifyType_fromOrdinal(NSUInteger ordinal) {
  OrgApacheCommonsLang3TimeDateUtils_ModifyType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgApacheCommonsLang3TimeDateUtils_ModifyType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeDateUtils_ModifyType)

@implementation OrgApacheCommonsLang3TimeDateUtils_DateIterator

- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)startFinal
                    withJavaUtilCalendar:(JavaUtilCalendar *)endFinal {
  OrgApacheCommonsLang3TimeDateUtils_DateIterator_initWithJavaUtilCalendar_withJavaUtilCalendar_(self, startFinal, endFinal);
  return self;
}

- (jboolean)hasNext {
  return [((JavaUtilCalendar *) nil_chk(spot_)) beforeWithId:endFinal_];
}

- (JavaUtilCalendar *)next {
  if ([((JavaUtilCalendar *) nil_chk(spot_)) isEqual:endFinal_]) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  [spot_ addWithInt:JavaUtilCalendar_DATE withInt:1];
  return (JavaUtilCalendar *) cast_chk([spot_ java_clone], [JavaUtilCalendar class]);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCalendar:withJavaUtilCalendar:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "endFinal_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "spot_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCalendar;LJavaUtilCalendar;", "LOrgApacheCommonsLang3TimeDateUtils;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Calendar;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeDateUtils_DateIterator = { "DateIterator", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x8, 4, 2, 1, -1, -1, 2, -1 };
  return &_OrgApacheCommonsLang3TimeDateUtils_DateIterator;
}

@end

void OrgApacheCommonsLang3TimeDateUtils_DateIterator_initWithJavaUtilCalendar_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeDateUtils_DateIterator *self, JavaUtilCalendar *startFinal, JavaUtilCalendar *endFinal) {
  NSObject_init(self);
  self->endFinal_ = endFinal;
  self->spot_ = startFinal;
  [((JavaUtilCalendar *) nil_chk(self->spot_)) addWithInt:JavaUtilCalendar_DATE withInt:-1];
}

OrgApacheCommonsLang3TimeDateUtils_DateIterator *new_OrgApacheCommonsLang3TimeDateUtils_DateIterator_initWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *startFinal, JavaUtilCalendar *endFinal) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeDateUtils_DateIterator, initWithJavaUtilCalendar_withJavaUtilCalendar_, startFinal, endFinal)
}

OrgApacheCommonsLang3TimeDateUtils_DateIterator *create_OrgApacheCommonsLang3TimeDateUtils_DateIterator_initWithJavaUtilCalendar_withJavaUtilCalendar_(JavaUtilCalendar *startFinal, JavaUtilCalendar *endFinal) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeDateUtils_DateIterator, initWithJavaUtilCalendar_withJavaUtilCalendar_, startFinal, endFinal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeDateUtils_DateIterator)
