//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/ClassUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/ClassUtils.h"
#include "org/apache/commons/lang3/JavaVersion.h"
#include "org/apache/commons/lang3/StringUtils.h"
#include "org/apache/commons/lang3/SystemUtils.h"
#include "org/apache/commons/lang3/mutable/MutableObject.h"

@interface OrgApacheCommonsLang3ClassUtils ()

+ (void)getAllInterfacesWithIOSClass:(IOSClass *)cls
                 withJavaUtilHashSet:(JavaUtilHashSet *)interfacesFound;

+ (NSString *)toCanonicalNameWithNSString:(NSString *)className_;

+ (NSString *)getCanonicalNameWithNSString:(NSString *)className_;

@end

inline id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_get_primitiveWrapperMap();
static id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ClassUtils, primitiveWrapperMap, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_get_wrapperPrimitiveMap();
static id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_wrapperPrimitiveMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ClassUtils, wrapperPrimitiveMap, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_get_abbreviationMap();
static id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_abbreviationMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ClassUtils, abbreviationMap, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_get_reverseAbbreviationMap();
static id<JavaUtilMap> OrgApacheCommonsLang3ClassUtils_reverseAbbreviationMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ClassUtils, reverseAbbreviationMap, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_withJavaUtilHashSet_(IOSClass *cls, JavaUtilHashSet *interfacesFound);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ClassUtils_toCanonicalNameWithNSString_(NSString *className_);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ClassUtils_getCanonicalNameWithNSString_(NSString *className_);

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_Interfaces_initWithNSString_withInt_(OrgApacheCommonsLang3ClassUtils_Interfaces *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_Interfaces *new_OrgApacheCommonsLang3ClassUtils_Interfaces_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface OrgApacheCommonsLang3ClassUtils_1 : NSObject < JavaLangIterable > {
 @public
  IOSClass *val$type_;
}

- (instancetype)initWithIOSClass:(IOSClass *)capture$0;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ClassUtils_1)

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(OrgApacheCommonsLang3ClassUtils_1 *self, IOSClass *capture$0);

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_1 *new_OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(IOSClass *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_1 *create_OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(IOSClass *capture$0);

@interface OrgApacheCommonsLang3ClassUtils_1_1 : NSObject < JavaUtilIterator > {
 @public
  OrgApacheCommonsLang3MutableMutableObject *val$next_;
}

- (instancetype)initWithOrgApacheCommonsLang3MutableMutableObject:(OrgApacheCommonsLang3MutableMutableObject *)capture$0;

- (jboolean)hasNext;

- (IOSClass *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ClassUtils_1_1)

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(OrgApacheCommonsLang3ClassUtils_1_1 *self, OrgApacheCommonsLang3MutableMutableObject *capture$0);

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_1_1 *new_OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(OrgApacheCommonsLang3MutableMutableObject *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_1_1 *create_OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(OrgApacheCommonsLang3MutableMutableObject *capture$0);

@interface OrgApacheCommonsLang3ClassUtils_2 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$classes_;
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ClassUtils_2)

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(OrgApacheCommonsLang3ClassUtils_2 *self, id<JavaLangIterable> capture$0);

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_2 *new_OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(id<JavaLangIterable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_2 *create_OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(id<JavaLangIterable> capture$0);

@interface OrgApacheCommonsLang3ClassUtils_2_1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> val$wrapped_;
  id<JavaUtilSet> val$seenInterfaces_;
  id<JavaUtilIterator> interfaces_;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
                         withJavaUtilSet:(id<JavaUtilSet>)capture$1;

- (jboolean)hasNext;

- (IOSClass *)next;

- (void)walkInterfacesWithJavaUtilSet:(id<JavaUtilSet>)addTo
                         withIOSClass:(IOSClass *)c;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ClassUtils_2_1)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ClassUtils_2_1, interfaces_, id<JavaUtilIterator>)

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(OrgApacheCommonsLang3ClassUtils_2_1 *self, id<JavaUtilIterator> capture$0, id<JavaUtilSet> capture$1);

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_2_1 *new_OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(id<JavaUtilIterator> capture$0, id<JavaUtilSet> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ClassUtils_2_1 *create_OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(id<JavaUtilIterator> capture$0, id<JavaUtilSet> capture$1);

__attribute__((unused)) static void OrgApacheCommonsLang3ClassUtils_2_1_walkInterfacesWithJavaUtilSet_withIOSClass_(OrgApacheCommonsLang3ClassUtils_2_1 *self, id<JavaUtilSet> addTo, IOSClass *c);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ClassUtils)

NSString *OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR;
NSString *OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR;

@implementation OrgApacheCommonsLang3ClassUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ClassUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getShortClassNameWithId:(id)object
                         withNSString:(NSString *)valueIfNull {
  return OrgApacheCommonsLang3ClassUtils_getShortClassNameWithId_withNSString_(object, valueIfNull);
}

+ (NSString *)getShortClassNameWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getShortClassNameWithIOSClass_(cls);
}

+ (NSString *)getShortClassNameWithNSString:(NSString *)className_ {
  return OrgApacheCommonsLang3ClassUtils_getShortClassNameWithNSString_(className_);
}

+ (NSString *)getSimpleNameWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getSimpleNameWithIOSClass_(cls);
}

+ (NSString *)getSimpleNameWithId:(id)object
                     withNSString:(NSString *)valueIfNull {
  return OrgApacheCommonsLang3ClassUtils_getSimpleNameWithId_withNSString_(object, valueIfNull);
}

+ (NSString *)getPackageNameWithId:(id)object
                      withNSString:(NSString *)valueIfNull {
  return OrgApacheCommonsLang3ClassUtils_getPackageNameWithId_withNSString_(object, valueIfNull);
}

+ (NSString *)getPackageNameWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getPackageNameWithIOSClass_(cls);
}

+ (NSString *)getPackageNameWithNSString:(NSString *)className_ {
  return OrgApacheCommonsLang3ClassUtils_getPackageNameWithNSString_(className_);
}

+ (NSString *)getAbbreviatedNameWithIOSClass:(IOSClass *)cls
                                     withInt:(jint)len {
  return OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithIOSClass_withInt_(cls, len);
}

+ (NSString *)getAbbreviatedNameWithNSString:(NSString *)className_
                                     withInt:(jint)len {
  return OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithNSString_withInt_(className_, len);
}

+ (id<JavaUtilList>)getAllSuperclassesWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getAllSuperclassesWithIOSClass_(cls);
}

+ (id<JavaUtilList>)getAllInterfacesWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_(cls);
}

+ (void)getAllInterfacesWithIOSClass:(IOSClass *)cls
                 withJavaUtilHashSet:(JavaUtilHashSet *)interfacesFound {
  OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_withJavaUtilHashSet_(cls, interfacesFound);
}

+ (id<JavaUtilList>)convertClassNamesToClassesWithJavaUtilList:(id<JavaUtilList>)classNames {
  return OrgApacheCommonsLang3ClassUtils_convertClassNamesToClassesWithJavaUtilList_(classNames);
}

+ (id<JavaUtilList>)convertClassesToClassNamesWithJavaUtilList:(id<JavaUtilList>)classes {
  return OrgApacheCommonsLang3ClassUtils_convertClassesToClassNamesWithJavaUtilList_(classes);
}

+ (jboolean)isAssignableWithIOSClassArray:(IOSObjectArray *)classArray
                        withIOSClassArray:(IOSObjectArray *)toClassArray {
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_(classArray, toClassArray);
}

+ (jboolean)isAssignableWithIOSClassArray:(IOSObjectArray *)classArray
                        withIOSClassArray:(IOSObjectArray *)toClassArray
                              withBoolean:(jboolean)autoboxing {
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(classArray, toClassArray, autoboxing);
}

+ (jboolean)isPrimitiveOrWrapperWithIOSClass:(IOSClass *)type {
  return OrgApacheCommonsLang3ClassUtils_isPrimitiveOrWrapperWithIOSClass_(type);
}

+ (jboolean)isPrimitiveWrapperWithIOSClass:(IOSClass *)type {
  return OrgApacheCommonsLang3ClassUtils_isPrimitiveWrapperWithIOSClass_(type);
}

+ (jboolean)isAssignableWithIOSClass:(IOSClass *)cls
                        withIOSClass:(IOSClass *)toClass {
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_(cls, toClass);
}

+ (jboolean)isAssignableWithIOSClass:(IOSClass *)cls
                        withIOSClass:(IOSClass *)toClass
                         withBoolean:(jboolean)autoboxing {
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(cls, toClass, autoboxing);
}

+ (IOSClass *)primitiveToWrapperWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(cls);
}

+ (IOSObjectArray *)primitivesToWrappersWithIOSClassArray:(IOSObjectArray *)classes {
  return OrgApacheCommonsLang3ClassUtils_primitivesToWrappersWithIOSClassArray_(classes);
}

+ (IOSClass *)wrapperToPrimitiveWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_wrapperToPrimitiveWithIOSClass_(cls);
}

+ (IOSObjectArray *)wrappersToPrimitivesWithIOSClassArray:(IOSObjectArray *)classes {
  return OrgApacheCommonsLang3ClassUtils_wrappersToPrimitivesWithIOSClassArray_(classes);
}

+ (jboolean)isInnerClassWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_isInnerClassWithIOSClass_(cls);
}

+ (IOSClass *)getClassWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                 withNSString:(NSString *)className_
                                  withBoolean:(jboolean)initialize_ {
  return OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_withBoolean_(classLoader, className_, initialize_);
}

+ (IOSClass *)getClassWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader
                                 withNSString:(NSString *)className_ {
  return OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_(classLoader, className_);
}

+ (IOSClass *)getClassWithNSString:(NSString *)className_ {
  return OrgApacheCommonsLang3ClassUtils_getClassWithNSString_(className_);
}

+ (IOSClass *)getClassWithNSString:(NSString *)className_
                       withBoolean:(jboolean)initialize_ {
  return OrgApacheCommonsLang3ClassUtils_getClassWithNSString_withBoolean_(className_, initialize_);
}

+ (JavaLangReflectMethod *)getPublicMethodWithIOSClass:(IOSClass *)cls
                                          withNSString:(NSString *)methodName
                                     withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ClassUtils_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
}

+ (NSString *)toCanonicalNameWithNSString:(NSString *)className_ {
  return OrgApacheCommonsLang3ClassUtils_toCanonicalNameWithNSString_(className_);
}

+ (IOSObjectArray *)toClassWithNSObjectArray:(IOSObjectArray *)array {
  return OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(array);
}

+ (NSString *)getShortCanonicalNameWithId:(id)object
                             withNSString:(NSString *)valueIfNull {
  return OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithId_withNSString_(object, valueIfNull);
}

+ (NSString *)getShortCanonicalNameWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithIOSClass_(cls);
}

+ (NSString *)getShortCanonicalNameWithNSString:(NSString *)canonicalName {
  return OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithNSString_(canonicalName);
}

+ (NSString *)getPackageCanonicalNameWithId:(id)object
                               withNSString:(NSString *)valueIfNull {
  return OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithId_withNSString_(object, valueIfNull);
}

+ (NSString *)getPackageCanonicalNameWithIOSClass:(IOSClass *)cls {
  return OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithIOSClass_(cls);
}

+ (NSString *)getPackageCanonicalNameWithNSString:(NSString *)canonicalName {
  return OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithNSString_(canonicalName);
}

+ (NSString *)getCanonicalNameWithNSString:(NSString *)className_ {
  return OrgApacheCommonsLang3ClassUtils_getCanonicalNameWithNSString_(className_);
}

+ (id<JavaLangIterable>)hierarchyWithIOSClass:(IOSClass *)type {
  return OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_(type);
}

+ (id<JavaLangIterable>)hierarchyWithIOSClass:(IOSClass *)type
withOrgApacheCommonsLang3ClassUtils_Interfaces:(OrgApacheCommonsLang3ClassUtils_Interfaces *)interfacesBehavior {
  return OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_withOrgApacheCommonsLang3ClassUtils_Interfaces_(type, interfacesBehavior);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 11, 2, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 13, 2, -1, 12, -1, -1 },
    { NULL, "V", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 19, 17, -1, 20, -1, -1 },
    { NULL, "Z", 0x89, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x9, 21, 24, -1, 25, -1, -1 },
    { NULL, "Z", 0x9, 26, 2, -1, 27, -1, -1 },
    { NULL, "Z", 0x9, 28, 2, -1, 27, -1, -1 },
    { NULL, "Z", 0x9, 21, 29, -1, 30, -1, -1 },
    { NULL, "Z", 0x9, 21, 31, -1, 32, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 33, 2, -1, 34, -1, -1 },
    { NULL, "[LIOSClass;", 0x89, 35, 36, -1, 37, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 38, 2, -1, 34, -1, -1 },
    { NULL, "[LIOSClass;", 0x89, 39, 36, -1, 37, -1, -1 },
    { NULL, "Z", 0x9, 40, 2, -1, 27, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 41, 42, 43, 44, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 41, 45, 43, 46, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 41, 4, 43, 47, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 41, 48, 43, 49, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x89, 50, 51, 52, 53, -1, -1 },
    { NULL, "LNSString;", 0xa, 54, 4, -1, -1, -1, -1 },
    { NULL, "[LIOSClass;", 0x89, 55, 56, -1, 57, -1, -1 },
    { NULL, "LNSString;", 0x9, 58, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 58, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 58, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 60, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 61, 2, -1, 62, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 61, 63, -1, 64, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getShortClassNameWithId:withNSString:);
  methods[2].selector = @selector(getShortClassNameWithIOSClass:);
  methods[3].selector = @selector(getShortClassNameWithNSString:);
  methods[4].selector = @selector(getSimpleNameWithIOSClass:);
  methods[5].selector = @selector(getSimpleNameWithId:withNSString:);
  methods[6].selector = @selector(getPackageNameWithId:withNSString:);
  methods[7].selector = @selector(getPackageNameWithIOSClass:);
  methods[8].selector = @selector(getPackageNameWithNSString:);
  methods[9].selector = @selector(getAbbreviatedNameWithIOSClass:withInt:);
  methods[10].selector = @selector(getAbbreviatedNameWithNSString:withInt:);
  methods[11].selector = @selector(getAllSuperclassesWithIOSClass:);
  methods[12].selector = @selector(getAllInterfacesWithIOSClass:);
  methods[13].selector = @selector(getAllInterfacesWithIOSClass:withJavaUtilHashSet:);
  methods[14].selector = @selector(convertClassNamesToClassesWithJavaUtilList:);
  methods[15].selector = @selector(convertClassesToClassNamesWithJavaUtilList:);
  methods[16].selector = @selector(isAssignableWithIOSClassArray:withIOSClassArray:);
  methods[17].selector = @selector(isAssignableWithIOSClassArray:withIOSClassArray:withBoolean:);
  methods[18].selector = @selector(isPrimitiveOrWrapperWithIOSClass:);
  methods[19].selector = @selector(isPrimitiveWrapperWithIOSClass:);
  methods[20].selector = @selector(isAssignableWithIOSClass:withIOSClass:);
  methods[21].selector = @selector(isAssignableWithIOSClass:withIOSClass:withBoolean:);
  methods[22].selector = @selector(primitiveToWrapperWithIOSClass:);
  methods[23].selector = @selector(primitivesToWrappersWithIOSClassArray:);
  methods[24].selector = @selector(wrapperToPrimitiveWithIOSClass:);
  methods[25].selector = @selector(wrappersToPrimitivesWithIOSClassArray:);
  methods[26].selector = @selector(isInnerClassWithIOSClass:);
  methods[27].selector = @selector(getClassWithJavaLangClassLoader:withNSString:withBoolean:);
  methods[28].selector = @selector(getClassWithJavaLangClassLoader:withNSString:);
  methods[29].selector = @selector(getClassWithNSString:);
  methods[30].selector = @selector(getClassWithNSString:withBoolean:);
  methods[31].selector = @selector(getPublicMethodWithIOSClass:withNSString:withIOSClassArray:);
  methods[32].selector = @selector(toCanonicalNameWithNSString:);
  methods[33].selector = @selector(toClassWithNSObjectArray:);
  methods[34].selector = @selector(getShortCanonicalNameWithId:withNSString:);
  methods[35].selector = @selector(getShortCanonicalNameWithIOSClass:);
  methods[36].selector = @selector(getShortCanonicalNameWithNSString:);
  methods[37].selector = @selector(getPackageCanonicalNameWithId:withNSString:);
  methods[38].selector = @selector(getPackageCanonicalNameWithIOSClass:);
  methods[39].selector = @selector(getPackageCanonicalNameWithNSString:);
  methods[40].selector = @selector(getCanonicalNameWithNSString:);
  methods[41].selector = @selector(hierarchyWithIOSClass:);
  methods[42].selector = @selector(hierarchyWithIOSClass:withOrgApacheCommonsLang3ClassUtils_Interfaces:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PACKAGE_SEPARATOR_CHAR", "C", .constantValue.asUnichar = OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR, 0x19, -1, -1, -1, -1 },
    { "PACKAGE_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "INNER_CLASS_SEPARATOR_CHAR", "C", .constantValue.asUnichar = OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR_CHAR, 0x19, -1, -1, -1, -1 },
    { "INNER_CLASS_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "primitiveWrapperMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 67, 68, -1 },
    { "wrapperPrimitiveMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 69, 68, -1 },
    { "abbreviationMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 70, 71, -1 },
    { "reverseAbbreviationMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 72, 71, -1 },
  };
  static const void *ptrTable[] = { "getShortClassName", "LNSObject;LNSString;", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/String;", "LNSString;", "getSimpleName", "getPackageName", "getAbbreviatedName", "LIOSClass;I", "(Ljava/lang/Class<*>;I)Ljava/lang/String;", "LNSString;I", "getAllSuperclasses", "(Ljava/lang/Class<*>;)Ljava/util/List<Ljava/lang/Class<*>;>;", "getAllInterfaces", "LIOSClass;LJavaUtilHashSet;", "(Ljava/lang/Class<*>;Ljava/util/HashSet<Ljava/lang/Class<*>;>;)V", "convertClassNamesToClasses", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/util/List<Ljava/lang/Class<*>;>;", "convertClassesToClassNames", "(Ljava/util/List<Ljava/lang/Class<*>;>;)Ljava/util/List<Ljava/lang/String;>;", "isAssignable", "[LIOSClass;[LIOSClass;", "([Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)Z", "[LIOSClass;[LIOSClass;Z", "([Ljava/lang/Class<*>;[Ljava/lang/Class<*>;Z)Z", "isPrimitiveOrWrapper", "(Ljava/lang/Class<*>;)Z", "isPrimitiveWrapper", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Z", "LIOSClass;LIOSClass;Z", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;Z)Z", "primitiveToWrapper", "(Ljava/lang/Class<*>;)Ljava/lang/Class<*>;", "primitivesToWrappers", "[LIOSClass;", "([Ljava/lang/Class<*>;)[Ljava/lang/Class<*>;", "wrapperToPrimitive", "wrappersToPrimitives", "isInnerClass", "getClass", "LJavaLangClassLoader;LNSString;Z", "LJavaLangClassNotFoundException;", "(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class<*>;", "LJavaLangClassLoader;LNSString;", "(Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/Class<*>;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", "LNSString;Z", "(Ljava/lang/String;Z)Ljava/lang/Class<*>;", "getPublicMethod", "LIOSClass;LNSString;[LIOSClass;", "LJavaLangSecurityException;LJavaLangNoSuchMethodException;", "(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;", "toCanonicalName", "toClass", "[LNSObject;", "([Ljava/lang/Object;)[Ljava/lang/Class<*>;", "getShortCanonicalName", "getPackageCanonicalName", "getCanonicalName", "hierarchy", "(Ljava/lang/Class<*>;)Ljava/lang/Iterable<Ljava/lang/Class<*>;>;", "LIOSClass;LOrgApacheCommonsLang3ClassUtils_Interfaces;", "(Ljava/lang/Class<*>;Lorg/apache/commons/lang3/ClassUtils$Interfaces;)Ljava/lang/Iterable<Ljava/lang/Class<*>;>;", &OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR, &OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR, &OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/lang/Class<*>;>;", &OrgApacheCommonsLang3ClassUtils_wrapperPrimitiveMap, &OrgApacheCommonsLang3ClassUtils_abbreviationMap, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &OrgApacheCommonsLang3ClassUtils_reverseAbbreviationMap, "LOrgApacheCommonsLang3ClassUtils_Interfaces;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ClassUtils = { "ClassUtils", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x1, 43, 8, -1, 73, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ClassUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ClassUtils class]) {
    OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR = NSString_java_valueOfChar_(OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR);
    OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR = NSString_java_valueOfChar_(OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR_CHAR);
    OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap = new_JavaUtilHashMap_init();
    {
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangBoolean, TYPE) withId:JavaLangBoolean_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangByte, TYPE) withId:JavaLangByte_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangCharacter, TYPE) withId:JavaLangCharacter_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangShort, TYPE) withId:JavaLangShort_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangInteger, TYPE) withId:JavaLangInteger_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangLong, TYPE) withId:JavaLangLong_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangDouble, TYPE) withId:JavaLangDouble_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangFloat, TYPE) withId:JavaLangFloat_class_()];
      (void) [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap putWithId:JreLoadStatic(JavaLangVoid, TYPE) withId:JreLoadStatic(JavaLangVoid, TYPE)];
    }
    OrgApacheCommonsLang3ClassUtils_wrapperPrimitiveMap = new_JavaUtilHashMap_init();
    {
      for (IOSClass * __strong primitiveClass in nil_chk([OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap keySet])) {
        IOSClass *wrapperClass = [OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap getWithId:primitiveClass];
        if (![((IOSClass *) nil_chk(primitiveClass)) isEqual:wrapperClass]) {
          (void) [OrgApacheCommonsLang3ClassUtils_wrapperPrimitiveMap putWithId:wrapperClass withId:primitiveClass];
        }
      }
    }
    {
      id<JavaUtilMap> m = new_JavaUtilHashMap_init();
      (void) [m putWithId:@"int" withId:@"I"];
      (void) [m putWithId:@"boolean" withId:@"Z"];
      (void) [m putWithId:@"float" withId:@"F"];
      (void) [m putWithId:@"long" withId:@"J"];
      (void) [m putWithId:@"short" withId:@"S"];
      (void) [m putWithId:@"byte" withId:@"B"];
      (void) [m putWithId:@"double" withId:@"D"];
      (void) [m putWithId:@"char" withId:@"C"];
      (void) [m putWithId:@"void" withId:@"V"];
      id<JavaUtilMap> r = new_JavaUtilHashMap_init();
      for (id<JavaUtilMap_Entry> __strong e in nil_chk([m entrySet])) {
        (void) [r putWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getValue] withId:[e getKey]];
      }
      OrgApacheCommonsLang3ClassUtils_abbreviationMap = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(m);
      OrgApacheCommonsLang3ClassUtils_reverseAbbreviationMap = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(r);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ClassUtils)
  }
}

@end

void OrgApacheCommonsLang3ClassUtils_init(OrgApacheCommonsLang3ClassUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3ClassUtils *new_OrgApacheCommonsLang3ClassUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ClassUtils, init)
}

OrgApacheCommonsLang3ClassUtils *create_OrgApacheCommonsLang3ClassUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ClassUtils, init)
}

NSString *OrgApacheCommonsLang3ClassUtils_getShortClassNameWithId_withNSString_(id object, NSString *valueIfNull) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (object == nil) {
    return valueIfNull;
  }
  return OrgApacheCommonsLang3ClassUtils_getShortClassNameWithIOSClass_([object java_getClass]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getShortClassNameWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return OrgApacheCommonsLang3ClassUtils_getShortClassNameWithNSString_([cls getName]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getShortClassNameWithNSString_(NSString *className_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(className_)) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *arrayPrefix = new_JavaLangStringBuilder_init();
  if ([((NSString *) nil_chk(className_)) java_hasPrefix:@"["]) {
    while ([((NSString *) nil_chk(className_)) charAtWithInt:0] == '[') {
      className_ = [className_ java_substring:1];
      (void) [arrayPrefix appendWithNSString:@"[]"];
    }
    if ([className_ charAtWithInt:0] == 'L' && [className_ charAtWithInt:[className_ java_length] - 1] == ';') {
      className_ = [className_ java_substring:1 endIndex:[className_ java_length] - 1];
    }
    if ([((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_reverseAbbreviationMap)) containsKeyWithId:className_]) {
      className_ = [OrgApacheCommonsLang3ClassUtils_reverseAbbreviationMap getWithId:className_];
    }
  }
  jint lastDotIdx = [((NSString *) nil_chk(className_)) java_lastIndexOf:OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR];
  jint innerIdx = [className_ java_indexOf:OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR_CHAR fromIndex:lastDotIdx == -1 ? 0 : lastDotIdx + 1];
  NSString *out = [className_ java_substring:lastDotIdx + 1];
  if (innerIdx != -1) {
    out = [((NSString *) nil_chk(out)) java_replace:OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR_CHAR withChar:OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR];
  }
  return JreStrcat("$@", out, arrayPrefix);
}

NSString *OrgApacheCommonsLang3ClassUtils_getSimpleNameWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [cls getSimpleName];
}

NSString *OrgApacheCommonsLang3ClassUtils_getSimpleNameWithId_withNSString_(id object, NSString *valueIfNull) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (object == nil) {
    return valueIfNull;
  }
  return OrgApacheCommonsLang3ClassUtils_getSimpleNameWithIOSClass_([object java_getClass]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getPackageNameWithId_withNSString_(id object, NSString *valueIfNull) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (object == nil) {
    return valueIfNull;
  }
  return OrgApacheCommonsLang3ClassUtils_getPackageNameWithIOSClass_([object java_getClass]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getPackageNameWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return OrgApacheCommonsLang3ClassUtils_getPackageNameWithNSString_([cls getName]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getPackageNameWithNSString_(NSString *className_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(className_)) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  while ([((NSString *) nil_chk(className_)) charAtWithInt:0] == '[') {
    className_ = [className_ java_substring:1];
  }
  if ([className_ charAtWithInt:0] == 'L' && [className_ charAtWithInt:[className_ java_length] - 1] == ';') {
    className_ = [className_ java_substring:1];
  }
  jint i = [((NSString *) nil_chk(className_)) java_lastIndexOf:OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR];
  if (i == -1) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [className_ java_substring:0 endIndex:i];
}

NSString *OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithIOSClass_withInt_(IOSClass *cls, jint len) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithNSString_withInt_([cls getName], len);
}

NSString *OrgApacheCommonsLang3ClassUtils_getAbbreviatedNameWithNSString_withInt_(NSString *className_, jint len) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (len <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"len must be > 0");
  }
  if (className_ == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint availableSpace = len;
  jint packageLevels = OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withChar_(className_, '.');
  IOSObjectArray *output = [IOSObjectArray newArrayWithLength:packageLevels + 1 type:NSString_class_()];
  jint endIndex = [className_ java_length] - 1;
  for (jint level = packageLevels; level >= 0; level--) {
    jint startIndex = [className_ java_lastIndexOf:'.' fromIndex:endIndex];
    NSString *part = [className_ java_substring:startIndex + 1 endIndex:endIndex + 1];
    availableSpace -= [((NSString *) nil_chk(part)) java_length];
    if (level > 0) {
      availableSpace--;
    }
    if (level == packageLevels) {
      (void) IOSObjectArray_Set(output, level, part);
    }
    else {
      if (availableSpace > 0) {
        (void) IOSObjectArray_Set(output, level, part);
      }
      else {
        (void) IOSObjectArray_Set(output, level, [part java_substring:0 endIndex:1]);
      }
    }
    endIndex = startIndex - 1;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_(output, '.');
}

id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_getAllSuperclassesWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return nil;
  }
  id<JavaUtilList> classes = new_JavaUtilArrayList_init();
  IOSClass *superclass_ = [cls getSuperclass];
  while (superclass_ != nil) {
    [classes addWithId:superclass_];
    superclass_ = [superclass_ getSuperclass];
  }
  return classes;
}

id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return nil;
  }
  JavaUtilLinkedHashSet *interfacesFound = new_JavaUtilLinkedHashSet_init();
  OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_withJavaUtilHashSet_(cls, interfacesFound);
  return new_JavaUtilArrayList_initWithJavaUtilCollection_(interfacesFound);
}

void OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_withJavaUtilHashSet_(IOSClass *cls, JavaUtilHashSet *interfacesFound) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  while (cls != nil) {
    IOSObjectArray *interfaces = [cls getInterfaces];
    {
      IOSObjectArray *a__ = interfaces;
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *i = *b__++;
        if ([((JavaUtilHashSet *) nil_chk(interfacesFound)) addWithId:i]) {
          OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_withJavaUtilHashSet_(i, interfacesFound);
        }
      }
    }
    cls = [cls getSuperclass];
  }
}

id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_convertClassNamesToClassesWithJavaUtilList_(id<JavaUtilList> classNames) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (classNames == nil) {
    return nil;
  }
  id<JavaUtilList> classes = new_JavaUtilArrayList_initWithInt_([classNames size]);
  for (NSString * __strong className_ in classNames) {
    @try {
      [classes addWithId:IOSClass_forName_(className_)];
    }
    @catch (JavaLangException *ex) {
      [classes addWithId:nil];
    }
  }
  return classes;
}

id<JavaUtilList> OrgApacheCommonsLang3ClassUtils_convertClassesToClassNamesWithJavaUtilList_(id<JavaUtilList> classes) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (classes == nil) {
    return nil;
  }
  id<JavaUtilList> classNames = new_JavaUtilArrayList_initWithInt_([classes size]);
  for (IOSClass * __strong cls in classes) {
    if (cls == nil) {
      [classNames addWithId:nil];
    }
    else {
      [classNames addWithId:[cls getName]];
    }
  }
  return classNames;
}

jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_(IOSObjectArray *classArray, IOSObjectArray *toClassArray) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(classArray, toClassArray, OrgApacheCommonsLang3SystemUtils_isJavaVersionAtLeastWithOrgApacheCommonsLang3JavaVersion_(JreLoadEnum(OrgApacheCommonsLang3JavaVersion, JAVA_1_5)));
}

jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(IOSObjectArray *classArray, IOSObjectArray *toClassArray, jboolean autoboxing) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (OrgApacheCommonsLang3ArrayUtils_isSameLengthWithNSObjectArray_withNSObjectArray_(classArray, toClassArray) == false) {
    return false;
  }
  if (classArray == nil) {
    classArray = JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_CLASS_ARRAY);
  }
  if (toClassArray == nil) {
    toClassArray = JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_CLASS_ARRAY);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(classArray))->size_; i++) {
    if (OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSObjectArray_Get(classArray, i), IOSObjectArray_Get(nil_chk(toClassArray), i), autoboxing) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3ClassUtils_isPrimitiveOrWrapperWithIOSClass_(IOSClass *type) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (type == nil) {
    return false;
  }
  return [type isPrimitive] || OrgApacheCommonsLang3ClassUtils_isPrimitiveWrapperWithIOSClass_(type);
}

jboolean OrgApacheCommonsLang3ClassUtils_isPrimitiveWrapperWithIOSClass_(IOSClass *type) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_wrapperPrimitiveMap)) containsKeyWithId:type];
}

jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *toClass) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(cls, toClass, OrgApacheCommonsLang3SystemUtils_isJavaVersionAtLeastWithOrgApacheCommonsLang3JavaVersion_(JreLoadEnum(OrgApacheCommonsLang3JavaVersion, JAVA_1_5)));
}

jboolean OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSClass *cls, IOSClass *toClass, jboolean autoboxing) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (toClass == nil) {
    return false;
  }
  if (cls == nil) {
    return ![toClass isPrimitive];
  }
  if (autoboxing) {
    if ([cls isPrimitive] && ![toClass isPrimitive]) {
      cls = OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(cls);
      if (cls == nil) {
        return false;
      }
    }
    if ([toClass isPrimitive] && ![cls isPrimitive]) {
      cls = OrgApacheCommonsLang3ClassUtils_wrapperToPrimitiveWithIOSClass_(cls);
      if (cls == nil) {
        return false;
      }
    }
  }
  if ([cls isEqual:toClass]) {
    return true;
  }
  if ([cls isPrimitive]) {
    if ([toClass isPrimitive] == false) {
      return false;
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangInteger, TYPE))) isEqual:cls]) {
      return [((IOSClass *) nil_chk(JreLoadStatic(JavaLangLong, TYPE))) isEqual:toClass] || [((IOSClass *) nil_chk(JreLoadStatic(JavaLangFloat, TYPE))) isEqual:toClass] || [((IOSClass *) nil_chk(JreLoadStatic(JavaLangDouble, TYPE))) isEqual:toClass];
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangLong, TYPE))) isEqual:cls]) {
      return [((IOSClass *) nil_chk(JreLoadStatic(JavaLangFloat, TYPE))) isEqual:toClass] || [((IOSClass *) nil_chk(JreLoadStatic(JavaLangDouble, TYPE))) isEqual:toClass];
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangBoolean, TYPE))) isEqual:cls]) {
      return false;
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangDouble, TYPE))) isEqual:cls]) {
      return false;
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangFloat, TYPE))) isEqual:cls]) {
      return [JreLoadStatic(JavaLangDouble, TYPE) isEqual:toClass];
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangCharacter, TYPE))) isEqual:cls]) {
      return [JreLoadStatic(JavaLangInteger, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangLong, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangFloat, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangDouble, TYPE) isEqual:toClass];
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangShort, TYPE))) isEqual:cls]) {
      return [JreLoadStatic(JavaLangInteger, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangLong, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangFloat, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangDouble, TYPE) isEqual:toClass];
    }
    if ([((IOSClass *) nil_chk(JreLoadStatic(JavaLangByte, TYPE))) isEqual:cls]) {
      return [JreLoadStatic(JavaLangShort, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangInteger, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangLong, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangFloat, TYPE) isEqual:toClass] || [JreLoadStatic(JavaLangDouble, TYPE) isEqual:toClass];
    }
    return false;
  }
  return [toClass isAssignableFrom:cls];
}

IOSClass *OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  IOSClass *convertedClass = cls;
  if (cls != nil && [cls isPrimitive]) {
    convertedClass = [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_primitiveWrapperMap)) getWithId:cls];
  }
  return convertedClass;
}

IOSObjectArray *OrgApacheCommonsLang3ClassUtils_primitivesToWrappersWithIOSClassArray_(IOSObjectArray *classes) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (classes == nil) {
    return nil;
  }
  if (classes->size_ == 0) {
    return classes;
  }
  IOSObjectArray *convertedClasses = [IOSObjectArray newArrayWithLength:classes->size_ type:IOSClass_class_()];
  for (jint i = 0; i < classes->size_; i++) {
    (void) IOSObjectArray_Set(convertedClasses, i, OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(IOSObjectArray_Get(classes, i)));
  }
  return convertedClasses;
}

IOSClass *OrgApacheCommonsLang3ClassUtils_wrapperToPrimitiveWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_wrapperPrimitiveMap)) getWithId:cls];
}

IOSObjectArray *OrgApacheCommonsLang3ClassUtils_wrappersToPrimitivesWithIOSClassArray_(IOSObjectArray *classes) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (classes == nil) {
    return nil;
  }
  if (classes->size_ == 0) {
    return classes;
  }
  IOSObjectArray *convertedClasses = [IOSObjectArray newArrayWithLength:classes->size_ type:IOSClass_class_()];
  for (jint i = 0; i < classes->size_; i++) {
    (void) IOSObjectArray_Set(convertedClasses, i, OrgApacheCommonsLang3ClassUtils_wrapperToPrimitiveWithIOSClass_(IOSObjectArray_Get(classes, i)));
  }
  return convertedClasses;
}

jboolean OrgApacheCommonsLang3ClassUtils_isInnerClassWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return cls != nil && [cls getEnclosingClass] != nil;
}

IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_withBoolean_(JavaLangClassLoader *classLoader, NSString *className_, jboolean initialize_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  @try {
    IOSClass *clazz;
    if ([((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_abbreviationMap)) containsKeyWithId:className_]) {
      NSString *clsName = JreStrcat("C$", '[', [OrgApacheCommonsLang3ClassUtils_abbreviationMap getWithId:className_]);
      clazz = [((IOSClass *) nil_chk(IOSClass_forName_initialize_classLoader_(clsName, initialize_, classLoader))) getComponentType];
    }
    else {
      clazz = IOSClass_forName_initialize_classLoader_(OrgApacheCommonsLang3ClassUtils_toCanonicalNameWithNSString_(className_), initialize_, classLoader);
    }
    return clazz;
  }
  @catch (JavaLangClassNotFoundException *ex) {
    jint lastDotIndex = [((NSString *) nil_chk(className_)) java_lastIndexOf:OrgApacheCommonsLang3ClassUtils_PACKAGE_SEPARATOR_CHAR];
    if (lastDotIndex != -1) {
      @try {
        return OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_withBoolean_(classLoader, JreStrcat("$C$", [className_ java_substring:0 endIndex:lastDotIndex], OrgApacheCommonsLang3ClassUtils_INNER_CLASS_SEPARATOR_CHAR, [className_ java_substring:lastDotIndex + 1]), initialize_);
      }
      @catch (JavaLangClassNotFoundException *ex2) {
      }
    }
    @throw ex;
  }
}

IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_(JavaLangClassLoader *classLoader, NSString *className_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_withBoolean_(classLoader, className_, true);
}

IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithNSString_(NSString *className_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_getClassWithNSString_withBoolean_(className_, true);
}

IOSClass *OrgApacheCommonsLang3ClassUtils_getClassWithNSString_withBoolean_(NSString *className_, jboolean initialize_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  JavaLangClassLoader *contextCL = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
  JavaLangClassLoader *loader = contextCL == nil ? [OrgApacheCommonsLang3ClassUtils_class_() getClassLoader] : contextCL;
  return OrgApacheCommonsLang3ClassUtils_getClassWithJavaLangClassLoader_withNSString_withBoolean_(loader, className_, initialize_);
}

JavaLangReflectMethod *OrgApacheCommonsLang3ClassUtils_getPublicMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  JavaLangReflectMethod *declaredMethod = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:parameterTypes];
  if (JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(declaredMethod)) getDeclaringClass])) getModifiers])) {
    return declaredMethod;
  }
  id<JavaUtilList> candidateClasses = new_JavaUtilArrayList_init();
  [candidateClasses addAllWithJavaUtilCollection:OrgApacheCommonsLang3ClassUtils_getAllInterfacesWithIOSClass_(cls)];
  [candidateClasses addAllWithJavaUtilCollection:OrgApacheCommonsLang3ClassUtils_getAllSuperclassesWithIOSClass_(cls)];
  for (IOSClass * __strong candidateClass in candidateClasses) {
    if (!JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk(candidateClass)) getModifiers])) {
      continue;
    }
    JavaLangReflectMethod *candidateMethod;
    @try {
      candidateMethod = [candidateClass getMethod:methodName parameterTypes:parameterTypes];
    }
    @catch (JavaLangNoSuchMethodException *ex) {
      continue;
    }
    if (JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(candidateMethod)) getDeclaringClass])) getModifiers])) {
      return candidateMethod;
    }
  }
  @throw new_JavaLangNoSuchMethodException_initWithNSString_(JreStrcat("$$C$", @"Can't find a public method for ", methodName, ' ', OrgApacheCommonsLang3ArrayUtils_toStringWithId_(parameterTypes)));
}

NSString *OrgApacheCommonsLang3ClassUtils_toCanonicalNameWithNSString_(NSString *className_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  className_ = OrgApacheCommonsLang3StringUtils_deleteWhitespaceWithNSString_(className_);
  if (className_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"className must not be null.");
  }
  else if ([className_ java_hasSuffix:@"[]"]) {
    JavaLangStringBuilder *classNameBuffer = new_JavaLangStringBuilder_init();
    while ([((NSString *) nil_chk(className_)) java_hasSuffix:@"[]"]) {
      className_ = [className_ java_substring:0 endIndex:[className_ java_length] - 2];
      (void) [classNameBuffer appendWithNSString:@"["];
    }
    NSString *abbreviation = [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_abbreviationMap)) getWithId:className_];
    if (abbreviation != nil) {
      (void) [classNameBuffer appendWithNSString:abbreviation];
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([classNameBuffer appendWithNSString:@"L"])) appendWithNSString:className_])) appendWithNSString:@";"];
    }
    className_ = [classNameBuffer description];
  }
  return className_;
}

IOSObjectArray *OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(IOSObjectArray *array) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (array == nil) {
    return nil;
  }
  else if (array->size_ == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_CLASS_ARRAY);
  }
  IOSObjectArray *classes = [IOSObjectArray newArrayWithLength:array->size_ type:IOSClass_class_()];
  for (jint i = 0; i < array->size_; i++) {
    (void) IOSObjectArray_Set(classes, i, IOSObjectArray_Get(array, i) == nil ? nil : [nil_chk(IOSObjectArray_Get(array, i)) java_getClass]);
  }
  return classes;
}

NSString *OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithId_withNSString_(id object, NSString *valueIfNull) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (object == nil) {
    return valueIfNull;
  }
  return OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithNSString_([[object java_getClass] getName]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithNSString_([cls getName]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getShortCanonicalNameWithNSString_(NSString *canonicalName) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_getShortClassNameWithNSString_(OrgApacheCommonsLang3ClassUtils_getCanonicalNameWithNSString_(canonicalName));
}

NSString *OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithId_withNSString_(id object, NSString *valueIfNull) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (object == nil) {
    return valueIfNull;
  }
  return OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithNSString_([[object java_getClass] getName]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithIOSClass_(IOSClass *cls) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  if (cls == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithNSString_([cls getName]);
}

NSString *OrgApacheCommonsLang3ClassUtils_getPackageCanonicalNameWithNSString_(NSString *canonicalName) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_getPackageNameWithNSString_(OrgApacheCommonsLang3ClassUtils_getCanonicalNameWithNSString_(canonicalName));
}

NSString *OrgApacheCommonsLang3ClassUtils_getCanonicalNameWithNSString_(NSString *className_) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  className_ = OrgApacheCommonsLang3StringUtils_deleteWhitespaceWithNSString_(className_);
  if (className_ == nil) {
    return nil;
  }
  jint dim = 0;
  while ([((NSString *) nil_chk(className_)) java_hasPrefix:@"["]) {
    dim++;
    className_ = [className_ java_substring:1];
  }
  if (dim < 1) {
    return className_;
  }
  if ([className_ java_hasPrefix:@"L"]) {
    className_ = [className_ java_substring:1 endIndex:[className_ java_hasSuffix:@";"] ? [className_ java_length] - 1 : [className_ java_length]];
  }
  else {
    if ([className_ java_length] > 0) {
      className_ = [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ClassUtils_reverseAbbreviationMap)) getWithId:[className_ java_substring:0 endIndex:1]];
    }
  }
  JavaLangStringBuilder *canonicalClassNameBuffer = new_JavaLangStringBuilder_initWithNSString_(className_);
  for (jint i = 0; i < dim; i++) {
    (void) [canonicalClassNameBuffer appendWithNSString:@"[]"];
  }
  return [canonicalClassNameBuffer description];
}

id<JavaLangIterable> OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_(IOSClass *type) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  return OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_withOrgApacheCommonsLang3ClassUtils_Interfaces_(type, JreLoadEnum(OrgApacheCommonsLang3ClassUtils_Interfaces, EXCLUDE));
}

id<JavaLangIterable> OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_withOrgApacheCommonsLang3ClassUtils_Interfaces_(IOSClass *type, OrgApacheCommonsLang3ClassUtils_Interfaces *interfacesBehavior) {
  OrgApacheCommonsLang3ClassUtils_initialize();
  id<JavaLangIterable> classes = new_OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(type);
  if (interfacesBehavior != JreLoadEnum(OrgApacheCommonsLang3ClassUtils_Interfaces, INCLUDE)) {
    return classes;
  }
  return new_OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(classes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ClassUtils)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ClassUtils_Interfaces)

OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_values_[2];

@implementation OrgApacheCommonsLang3ClassUtils_Interfaces

+ (IOSObjectArray *)values {
  return OrgApacheCommonsLang3ClassUtils_Interfaces_values();
}

+ (OrgApacheCommonsLang3ClassUtils_Interfaces *)valueOfWithNSString:(NSString *)name {
  return OrgApacheCommonsLang3ClassUtils_Interfaces_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheCommonsLang3ClassUtils_Interfaces;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ClassUtils_Interfaces;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INCLUDE", "LOrgApacheCommonsLang3ClassUtils_Interfaces;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "EXCLUDE", "LOrgApacheCommonsLang3ClassUtils_Interfaces;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheCommonsLang3ClassUtils_Interfaces, INCLUDE), &JreEnum(OrgApacheCommonsLang3ClassUtils_Interfaces, EXCLUDE), "LOrgApacheCommonsLang3ClassUtils;", "Ljava/lang/Enum<Lorg/apache/commons/lang3/ClassUtils$Interfaces;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ClassUtils_Interfaces = { "Interfaces", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_OrgApacheCommonsLang3ClassUtils_Interfaces;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ClassUtils_Interfaces class]) {
    JreEnum(OrgApacheCommonsLang3ClassUtils_Interfaces, INCLUDE) = new_OrgApacheCommonsLang3ClassUtils_Interfaces_initWithNSString_withInt_(@"INCLUDE", 0);
    JreEnum(OrgApacheCommonsLang3ClassUtils_Interfaces, EXCLUDE) = new_OrgApacheCommonsLang3ClassUtils_Interfaces_initWithNSString_withInt_(@"EXCLUDE", 1);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ClassUtils_Interfaces)
  }
}

@end

void OrgApacheCommonsLang3ClassUtils_Interfaces_initWithNSString_withInt_(OrgApacheCommonsLang3ClassUtils_Interfaces *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgApacheCommonsLang3ClassUtils_Interfaces *new_OrgApacheCommonsLang3ClassUtils_Interfaces_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ClassUtils_Interfaces, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *OrgApacheCommonsLang3ClassUtils_Interfaces_values() {
  OrgApacheCommonsLang3ClassUtils_Interfaces_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheCommonsLang3ClassUtils_Interfaces_values_ count:2 type:OrgApacheCommonsLang3ClassUtils_Interfaces_class_()];
}

OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_valueOfWithNSString_(NSString *name) {
  OrgApacheCommonsLang3ClassUtils_Interfaces_initialize();
  for (int i = 0; i < 2; i++) {
    OrgApacheCommonsLang3ClassUtils_Interfaces *e = OrgApacheCommonsLang3ClassUtils_Interfaces_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheCommonsLang3ClassUtils_Interfaces *OrgApacheCommonsLang3ClassUtils_Interfaces_fromOrdinal(NSUInteger ordinal) {
  OrgApacheCommonsLang3ClassUtils_Interfaces_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return OrgApacheCommonsLang3ClassUtils_Interfaces_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ClassUtils_Interfaces)

@implementation OrgApacheCommonsLang3ClassUtils_1

- (instancetype)initWithIOSClass:(IOSClass *)capture$0 {
  OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(self, capture$0);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  OrgApacheCommonsLang3MutableMutableObject *next = new_OrgApacheCommonsLang3MutableMutableObject_initWithId_(val$type_);
  return new_OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(next);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$type_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Class<*>;>;", "Ljava/lang/Class<*>;", "LOrgApacheCommonsLang3ClassUtils;", "hierarchyWithIOSClass:withOrgApacheCommonsLang3ClassUtils_Interfaces:", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ClassUtils_1 = { "", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_OrgApacheCommonsLang3ClassUtils_1;
}

@end

void OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(OrgApacheCommonsLang3ClassUtils_1 *self, IOSClass *capture$0) {
  self->val$type_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsLang3ClassUtils_1 *new_OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(IOSClass *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ClassUtils_1, initWithIOSClass_, capture$0)
}

OrgApacheCommonsLang3ClassUtils_1 *create_OrgApacheCommonsLang3ClassUtils_1_initWithIOSClass_(IOSClass *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ClassUtils_1, initWithIOSClass_, capture$0)
}

@implementation OrgApacheCommonsLang3ClassUtils_1_1

- (instancetype)initWithOrgApacheCommonsLang3MutableMutableObject:(OrgApacheCommonsLang3MutableMutableObject *)capture$0 {
  OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(self, capture$0);
  return self;
}

- (jboolean)hasNext {
  return [((OrgApacheCommonsLang3MutableMutableObject *) nil_chk(val$next_)) getValue] != nil;
}

- (IOSClass *)next {
  IOSClass *result = [((OrgApacheCommonsLang3MutableMutableObject *) nil_chk(val$next_)) getValue];
  [val$next_ setValueWithId:[((IOSClass *) nil_chk(result)) getSuperclass]];
  return result;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3MutableMutableObject:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$next_", "LOrgApacheCommonsLang3MutableMutableObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/Class<*>;", "Lorg/apache/commons/lang3/mutable/MutableObject<Ljava/lang/Class<*>;>;", "LOrgApacheCommonsLang3ClassUtils_1;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ClassUtils_1_1 = { "", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x8018, 4, 1, 2, -1, 3, 4, -1 };
  return &_OrgApacheCommonsLang3ClassUtils_1_1;
}

@end

void OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(OrgApacheCommonsLang3ClassUtils_1_1 *self, OrgApacheCommonsLang3MutableMutableObject *capture$0) {
  self->val$next_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsLang3ClassUtils_1_1 *new_OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(OrgApacheCommonsLang3MutableMutableObject *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ClassUtils_1_1, initWithOrgApacheCommonsLang3MutableMutableObject_, capture$0)
}

OrgApacheCommonsLang3ClassUtils_1_1 *create_OrgApacheCommonsLang3ClassUtils_1_1_initWithOrgApacheCommonsLang3MutableMutableObject_(OrgApacheCommonsLang3MutableMutableObject *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ClassUtils_1_1, initWithOrgApacheCommonsLang3MutableMutableObject_, capture$0)
}

@implementation OrgApacheCommonsLang3ClassUtils_2

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0 {
  OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(self, capture$0);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilSet> seenInterfaces = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> wrapped = [((id<JavaLangIterable>) nil_chk(val$classes_)) iterator];
  return new_OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(wrapped, seenInterfaces);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$classes_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Class<*>;>;", "Ljava/lang/Iterable<Ljava/lang/Class<*>;>;", "LOrgApacheCommonsLang3ClassUtils;", "hierarchyWithIOSClass:withOrgApacheCommonsLang3ClassUtils_Interfaces:", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ClassUtils_2 = { "", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, 4, -1 };
  return &_OrgApacheCommonsLang3ClassUtils_2;
}

@end

void OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(OrgApacheCommonsLang3ClassUtils_2 *self, id<JavaLangIterable> capture$0) {
  self->val$classes_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsLang3ClassUtils_2 *new_OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(id<JavaLangIterable> capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ClassUtils_2, initWithJavaLangIterable_, capture$0)
}

OrgApacheCommonsLang3ClassUtils_2 *create_OrgApacheCommonsLang3ClassUtils_2_initWithJavaLangIterable_(id<JavaLangIterable> capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ClassUtils_2, initWithJavaLangIterable_, capture$0)
}

@implementation OrgApacheCommonsLang3ClassUtils_2_1

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
                         withJavaUtilSet:(id<JavaUtilSet>)capture$1 {
  OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(self, capture$0, capture$1);
  return self;
}

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(interfaces_)) hasNext] || [((id<JavaUtilIterator>) nil_chk(val$wrapped_)) hasNext];
}

- (IOSClass *)next {
  if ([((id<JavaUtilIterator>) nil_chk(interfaces_)) hasNext]) {
    IOSClass *nextInterface = [((id<JavaUtilIterator>) nil_chk(interfaces_)) next];
    [((id<JavaUtilSet>) nil_chk(val$seenInterfaces_)) addWithId:nextInterface];
    return nextInterface;
  }
  IOSClass *nextSuperclass = [((id<JavaUtilIterator>) nil_chk(val$wrapped_)) next];
  id<JavaUtilSet> currentInterfaces = new_JavaUtilLinkedHashSet_init();
  OrgApacheCommonsLang3ClassUtils_2_1_walkInterfacesWithJavaUtilSet_withIOSClass_(self, currentInterfaces, nextSuperclass);
  interfaces_ = [currentInterfaces iterator];
  return nextSuperclass;
}

- (void)walkInterfacesWithJavaUtilSet:(id<JavaUtilSet>)addTo
                         withIOSClass:(IOSClass *)c {
  OrgApacheCommonsLang3ClassUtils_2_1_walkInterfacesWithJavaUtilSet_withIOSClass_(self, addTo, c);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilIterator:withJavaUtilSet:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(walkInterfacesWithJavaUtilSet:withIOSClass:);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$wrapped_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$seenInterfaces_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "interfaces_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/Class<*>;", "walkInterfaces", "LJavaUtilSet;LIOSClass;", "(Ljava/util/Set<Ljava/lang/Class<*>;>;Ljava/lang/Class<*>;)V", "Ljava/util/Iterator<Ljava/lang/Class<*>;>;", "Ljava/util/Set<Ljava/lang/Class<*>;>;", "LOrgApacheCommonsLang3ClassUtils_2;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ClassUtils_2_1 = { "", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x8018, 5, 3, 6, -1, 7, 8, -1 };
  return &_OrgApacheCommonsLang3ClassUtils_2_1;
}

@end

void OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(OrgApacheCommonsLang3ClassUtils_2_1 *self, id<JavaUtilIterator> capture$0, id<JavaUtilSet> capture$1) {
  self->val$wrapped_ = capture$0;
  self->val$seenInterfaces_ = capture$1;
  NSObject_init(self);
  self->interfaces_ = [((id<JavaUtilSet>) nil_chk(JavaUtilCollections_emptySet())) iterator];
}

OrgApacheCommonsLang3ClassUtils_2_1 *new_OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(id<JavaUtilIterator> capture$0, id<JavaUtilSet> capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ClassUtils_2_1, initWithJavaUtilIterator_withJavaUtilSet_, capture$0, capture$1)
}

OrgApacheCommonsLang3ClassUtils_2_1 *create_OrgApacheCommonsLang3ClassUtils_2_1_initWithJavaUtilIterator_withJavaUtilSet_(id<JavaUtilIterator> capture$0, id<JavaUtilSet> capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ClassUtils_2_1, initWithJavaUtilIterator_withJavaUtilSet_, capture$0, capture$1)
}

void OrgApacheCommonsLang3ClassUtils_2_1_walkInterfacesWithJavaUtilSet_withIOSClass_(OrgApacheCommonsLang3ClassUtils_2_1 *self, id<JavaUtilSet> addTo, IOSClass *c) {
  {
    IOSObjectArray *a__ = [((IOSClass *) nil_chk(c)) getInterfaces];
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *iface = *b__++;
      if (![((id<JavaUtilSet>) nil_chk(self->val$seenInterfaces_)) containsWithId:iface]) {
        [((id<JavaUtilSet>) nil_chk(addTo)) addWithId:iface];
      }
      OrgApacheCommonsLang3ClassUtils_2_1_walkInterfacesWithJavaUtilSet_withIOSClass_(self, addTo, iface);
    }
  }
}
