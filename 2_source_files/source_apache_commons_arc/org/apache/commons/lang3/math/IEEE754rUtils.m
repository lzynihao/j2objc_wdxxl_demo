//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/math/IEEE754rUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/apache/commons/lang3/Validate.h"
#include "org/apache/commons/lang3/math/IEEE754rUtils.h"

@implementation OrgApacheCommonsLang3MathIEEE754rUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3MathIEEE754rUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jdouble)minWithDoubleArray:(IOSDoubleArray *)array {
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithDoubleArray_(array);
}

+ (jfloat)minWithFloatArray:(IOSFloatArray *)array {
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloatArray_(array);
}

+ (jdouble)minWithDouble:(jdouble)a
              withDouble:(jdouble)b
              withDouble:(jdouble)c {
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_withDouble_(a, b, c);
}

+ (jdouble)minWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_(a, b);
}

+ (jfloat)minWithFloat:(jfloat)a
             withFloat:(jfloat)b
             withFloat:(jfloat)c {
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_withFloat_(a, b, c);
}

+ (jfloat)minWithFloat:(jfloat)a
             withFloat:(jfloat)b {
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_(a, b);
}

+ (jdouble)maxWithDoubleArray:(IOSDoubleArray *)array {
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDoubleArray_(array);
}

+ (jfloat)maxWithFloatArray:(IOSFloatArray *)array {
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloatArray_(array);
}

+ (jdouble)maxWithDouble:(jdouble)a
              withDouble:(jdouble)b
              withDouble:(jdouble)c {
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_withDouble_(a, b, c);
}

+ (jdouble)maxWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_(a, b);
}

+ (jfloat)maxWithFloat:(jfloat)a
             withFloat:(jfloat)b
             withFloat:(jfloat)c {
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_withFloat_(a, b, c);
}

+ (jfloat)maxWithFloat:(jfloat)a
             withFloat:(jfloat)b {
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_(a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x89, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x89, 0, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x89, 7, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x89, 7, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(minWithDoubleArray:);
  methods[2].selector = @selector(minWithFloatArray:);
  methods[3].selector = @selector(minWithDouble:withDouble:withDouble:);
  methods[4].selector = @selector(minWithDouble:withDouble:);
  methods[5].selector = @selector(minWithFloat:withFloat:withFloat:);
  methods[6].selector = @selector(minWithFloat:withFloat:);
  methods[7].selector = @selector(maxWithDoubleArray:);
  methods[8].selector = @selector(maxWithFloatArray:);
  methods[9].selector = @selector(maxWithDouble:withDouble:withDouble:);
  methods[10].selector = @selector(maxWithDouble:withDouble:);
  methods[11].selector = @selector(maxWithFloat:withFloat:withFloat:);
  methods[12].selector = @selector(maxWithFloat:withFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "min", "[D", "[F", "DDD", "DD", "FFF", "FF", "max" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3MathIEEE754rUtils = { "IEEE754rUtils", "org.apache.commons.lang3.math", ptrTable, methods, NULL, 7, 0x1, 13, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3MathIEEE754rUtils;
}

@end

void OrgApacheCommonsLang3MathIEEE754rUtils_init(OrgApacheCommonsLang3MathIEEE754rUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3MathIEEE754rUtils *new_OrgApacheCommonsLang3MathIEEE754rUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MathIEEE754rUtils, init)
}

OrgApacheCommonsLang3MathIEEE754rUtils *create_OrgApacheCommonsLang3MathIEEE754rUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MathIEEE754rUtils, init)
}

jdouble OrgApacheCommonsLang3MathIEEE754rUtils_minWithDoubleArray_(IOSDoubleArray *array) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (array == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Array must not be null");
  }
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(array->size_ != 0, @"Array cannot be empty.", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  jdouble min = IOSDoubleArray_Get(array, 0);
  for (jint i = 1; i < array->size_; i++) {
    min = OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_(IOSDoubleArray_Get(array, i), min);
  }
  return min;
}

jfloat OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloatArray_(IOSFloatArray *array) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (array == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Array must not be null");
  }
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(array->size_ != 0, @"Array cannot be empty.", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  jfloat min = IOSFloatArray_Get(array, 0);
  for (jint i = 1; i < array->size_; i++) {
    min = OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_(IOSFloatArray_Get(array, i), min);
  }
  return min;
}

jdouble OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_(OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_(a, b), c);
}

jdouble OrgApacheCommonsLang3MathIEEE754rUtils_minWithDouble_withDouble_(jdouble a, jdouble b) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (JavaLangDouble_isNaNWithDouble_(a)) {
    return b;
  }
  else if (JavaLangDouble_isNaNWithDouble_(b)) {
    return a;
  }
  else {
    return JavaLangMath_minWithDouble_withDouble_(a, b);
  }
}

jfloat OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_withFloat_(jfloat a, jfloat b, jfloat c) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  return OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_(OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_(a, b), c);
}

jfloat OrgApacheCommonsLang3MathIEEE754rUtils_minWithFloat_withFloat_(jfloat a, jfloat b) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (JavaLangFloat_isNaNWithFloat_(a)) {
    return b;
  }
  else if (JavaLangFloat_isNaNWithFloat_(b)) {
    return a;
  }
  else {
    return JavaLangMath_minWithFloat_withFloat_(a, b);
  }
}

jdouble OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDoubleArray_(IOSDoubleArray *array) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (array == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Array must not be null");
  }
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(array->size_ != 0, @"Array cannot be empty.", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  jdouble max = IOSDoubleArray_Get(array, 0);
  for (jint j = 1; j < array->size_; j++) {
    max = OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_(IOSDoubleArray_Get(array, j), max);
  }
  return max;
}

jfloat OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloatArray_(IOSFloatArray *array) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (array == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Array must not be null");
  }
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(array->size_ != 0, @"Array cannot be empty.", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  jfloat max = IOSFloatArray_Get(array, 0);
  for (jint j = 1; j < array->size_; j++) {
    max = OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_(IOSFloatArray_Get(array, j), max);
  }
  return max;
}

jdouble OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_(OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_(a, b), c);
}

jdouble OrgApacheCommonsLang3MathIEEE754rUtils_maxWithDouble_withDouble_(jdouble a, jdouble b) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (JavaLangDouble_isNaNWithDouble_(a)) {
    return b;
  }
  else if (JavaLangDouble_isNaNWithDouble_(b)) {
    return a;
  }
  else {
    return JavaLangMath_maxWithDouble_withDouble_(a, b);
  }
}

jfloat OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_withFloat_(jfloat a, jfloat b, jfloat c) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  return OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_(OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_(a, b), c);
}

jfloat OrgApacheCommonsLang3MathIEEE754rUtils_maxWithFloat_withFloat_(jfloat a, jfloat b) {
  OrgApacheCommonsLang3MathIEEE754rUtils_initialize();
  if (JavaLangFloat_isNaNWithFloat_(a)) {
    return b;
  }
  else if (JavaLangFloat_isNaNWithFloat_(b)) {
    return a;
  }
  else {
    return JavaLangMath_maxWithFloat_withFloat_(a, b);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3MathIEEE754rUtils)
