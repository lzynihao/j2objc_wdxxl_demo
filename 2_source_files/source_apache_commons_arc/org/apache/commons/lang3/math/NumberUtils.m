//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/math/NumberUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Array.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "org/apache/commons/lang3/StringUtils.h"
#include "org/apache/commons/lang3/Validate.h"
#include "org/apache/commons/lang3/math/NumberUtils.h"

@interface OrgApacheCommonsLang3MathNumberUtils ()

+ (NSString *)getMantissaWithNSString:(NSString *)str;

+ (NSString *)getMantissaWithNSString:(NSString *)str
                              withInt:(jint)stopPos;

+ (jboolean)isAllZerosWithNSString:(NSString *)str;

+ (void)validateArrayWithId:(id)array;

@end

__attribute__((unused)) static NSString *OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_(NSString *str);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_withInt_(NSString *str, jint stopPos);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(NSString *str);

__attribute__((unused)) static void OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(id array);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3MathNumberUtils)

JavaLangLong *OrgApacheCommonsLang3MathNumberUtils_LONG_ZERO;
JavaLangLong *OrgApacheCommonsLang3MathNumberUtils_LONG_ONE;
JavaLangLong *OrgApacheCommonsLang3MathNumberUtils_LONG_MINUS_ONE;
JavaLangInteger *OrgApacheCommonsLang3MathNumberUtils_INTEGER_ZERO;
JavaLangInteger *OrgApacheCommonsLang3MathNumberUtils_INTEGER_ONE;
JavaLangInteger *OrgApacheCommonsLang3MathNumberUtils_INTEGER_MINUS_ONE;
JavaLangShort *OrgApacheCommonsLang3MathNumberUtils_SHORT_ZERO;
JavaLangShort *OrgApacheCommonsLang3MathNumberUtils_SHORT_ONE;
JavaLangShort *OrgApacheCommonsLang3MathNumberUtils_SHORT_MINUS_ONE;
JavaLangByte *OrgApacheCommonsLang3MathNumberUtils_BYTE_ZERO;
JavaLangByte *OrgApacheCommonsLang3MathNumberUtils_BYTE_ONE;
JavaLangByte *OrgApacheCommonsLang3MathNumberUtils_BYTE_MINUS_ONE;
JavaLangDouble *OrgApacheCommonsLang3MathNumberUtils_DOUBLE_ZERO;
JavaLangDouble *OrgApacheCommonsLang3MathNumberUtils_DOUBLE_ONE;
JavaLangDouble *OrgApacheCommonsLang3MathNumberUtils_DOUBLE_MINUS_ONE;
JavaLangFloat *OrgApacheCommonsLang3MathNumberUtils_FLOAT_ZERO;
JavaLangFloat *OrgApacheCommonsLang3MathNumberUtils_FLOAT_ONE;
JavaLangFloat *OrgApacheCommonsLang3MathNumberUtils_FLOAT_MINUS_ONE;

@implementation OrgApacheCommonsLang3MathNumberUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3MathNumberUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)toIntWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_toIntWithNSString_(str);
}

+ (jint)toIntWithNSString:(NSString *)str
                  withInt:(jint)defaultValue {
  return OrgApacheCommonsLang3MathNumberUtils_toIntWithNSString_withInt_(str, defaultValue);
}

+ (jlong)toLongWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_toLongWithNSString_(str);
}

+ (jlong)toLongWithNSString:(NSString *)str
                   withLong:(jlong)defaultValue {
  return OrgApacheCommonsLang3MathNumberUtils_toLongWithNSString_withLong_(str, defaultValue);
}

+ (jfloat)toFloatWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_toFloatWithNSString_(str);
}

+ (jfloat)toFloatWithNSString:(NSString *)str
                    withFloat:(jfloat)defaultValue {
  return OrgApacheCommonsLang3MathNumberUtils_toFloatWithNSString_withFloat_(str, defaultValue);
}

+ (jdouble)toDoubleWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_toDoubleWithNSString_(str);
}

+ (jdouble)toDoubleWithNSString:(NSString *)str
                     withDouble:(jdouble)defaultValue {
  return OrgApacheCommonsLang3MathNumberUtils_toDoubleWithNSString_withDouble_(str, defaultValue);
}

+ (jbyte)toByteWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_toByteWithNSString_(str);
}

+ (jbyte)toByteWithNSString:(NSString *)str
                   withByte:(jbyte)defaultValue {
  return OrgApacheCommonsLang3MathNumberUtils_toByteWithNSString_withByte_(str, defaultValue);
}

+ (jshort)toShortWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_toShortWithNSString_(str);
}

+ (jshort)toShortWithNSString:(NSString *)str
                    withShort:(jshort)defaultValue {
  return OrgApacheCommonsLang3MathNumberUtils_toShortWithNSString_withShort_(str, defaultValue);
}

+ (NSNumber *)createNumberWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createNumberWithNSString_(str);
}

+ (NSString *)getMantissaWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_(str);
}

+ (NSString *)getMantissaWithNSString:(NSString *)str
                              withInt:(jint)stopPos {
  return OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_withInt_(str, stopPos);
}

+ (jboolean)isAllZerosWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(str);
}

+ (JavaLangFloat *)createFloatWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createFloatWithNSString_(str);
}

+ (JavaLangDouble *)createDoubleWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createDoubleWithNSString_(str);
}

+ (JavaLangInteger *)createIntegerWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createIntegerWithNSString_(str);
}

+ (JavaLangLong *)createLongWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createLongWithNSString_(str);
}

+ (JavaMathBigInteger *)createBigIntegerWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createBigIntegerWithNSString_(str);
}

+ (JavaMathBigDecimal *)createBigDecimalWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_createBigDecimalWithNSString_(str);
}

+ (jlong)minWithLongArray:(IOSLongArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_minWithLongArray_(array);
}

+ (jint)minWithIntArray:(IOSIntArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_minWithIntArray_(array);
}

+ (jshort)minWithShortArray:(IOSShortArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_minWithShortArray_(array);
}

+ (jbyte)minWithByteArray:(IOSByteArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_minWithByteArray_(array);
}

+ (jdouble)minWithDoubleArray:(IOSDoubleArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_minWithDoubleArray_(array);
}

+ (jfloat)minWithFloatArray:(IOSFloatArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_minWithFloatArray_(array);
}

+ (jlong)maxWithLongArray:(IOSLongArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithLongArray_(array);
}

+ (jint)maxWithIntArray:(IOSIntArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithIntArray_(array);
}

+ (jshort)maxWithShortArray:(IOSShortArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithShortArray_(array);
}

+ (jbyte)maxWithByteArray:(IOSByteArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithByteArray_(array);
}

+ (jdouble)maxWithDoubleArray:(IOSDoubleArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithDoubleArray_(array);
}

+ (jfloat)maxWithFloatArray:(IOSFloatArray *)array {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithFloatArray_(array);
}

+ (void)validateArrayWithId:(id)array {
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
}

+ (jlong)minWithLong:(jlong)a
            withLong:(jlong)b
            withLong:(jlong)c {
  return OrgApacheCommonsLang3MathNumberUtils_minWithLong_withLong_withLong_(a, b, c);
}

+ (jint)minWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c {
  return OrgApacheCommonsLang3MathNumberUtils_minWithInt_withInt_withInt_(a, b, c);
}

+ (jshort)minWithShort:(jshort)a
             withShort:(jshort)b
             withShort:(jshort)c {
  return OrgApacheCommonsLang3MathNumberUtils_minWithShort_withShort_withShort_(a, b, c);
}

+ (jbyte)minWithByte:(jbyte)a
            withByte:(jbyte)b
            withByte:(jbyte)c {
  return OrgApacheCommonsLang3MathNumberUtils_minWithByte_withByte_withByte_(a, b, c);
}

+ (jdouble)minWithDouble:(jdouble)a
              withDouble:(jdouble)b
              withDouble:(jdouble)c {
  return OrgApacheCommonsLang3MathNumberUtils_minWithDouble_withDouble_withDouble_(a, b, c);
}

+ (jfloat)minWithFloat:(jfloat)a
             withFloat:(jfloat)b
             withFloat:(jfloat)c {
  return OrgApacheCommonsLang3MathNumberUtils_minWithFloat_withFloat_withFloat_(a, b, c);
}

+ (jlong)maxWithLong:(jlong)a
            withLong:(jlong)b
            withLong:(jlong)c {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithLong_withLong_withLong_(a, b, c);
}

+ (jint)maxWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithInt_withInt_withInt_(a, b, c);
}

+ (jshort)maxWithShort:(jshort)a
             withShort:(jshort)b
             withShort:(jshort)c {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithShort_withShort_withShort_(a, b, c);
}

+ (jbyte)maxWithByte:(jbyte)a
            withByte:(jbyte)b
            withByte:(jbyte)c {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithByte_withByte_withByte_(a, b, c);
}

+ (jdouble)maxWithDouble:(jdouble)a
              withDouble:(jdouble)b
              withDouble:(jdouble)c {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithDouble_withDouble_withDouble_(a, b, c);
}

+ (jfloat)maxWithFloat:(jfloat)a
             withFloat:(jfloat)b
             withFloat:(jfloat)c {
  return OrgApacheCommonsLang3MathNumberUtils_maxWithFloat_withFloat_withFloat_(a, b, c);
}

+ (jboolean)isDigitsWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_isDigitsWithNSString_(str);
}

+ (jboolean)isNumberWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_isNumberWithNSString_(str);
}

+ (jboolean)isParsableWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3MathNumberUtils_isParsableWithNSString_(str);
}

+ (jint)compareWithInt:(jint)x
               withInt:(jint)y {
  return OrgApacheCommonsLang3MathNumberUtils_compareWithInt_withInt_(x, y);
}

+ (jint)compareWithLong:(jlong)x
               withLong:(jlong)y {
  return OrgApacheCommonsLang3MathNumberUtils_compareWithLong_withLong_(x, y);
}

+ (jint)compareWithShort:(jshort)x
               withShort:(jshort)y {
  return OrgApacheCommonsLang3MathNumberUtils_compareWithShort_withShort_(x, y);
}

+ (jint)compareWithByte:(jbyte)x
               withByte:(jbyte)y {
  return OrgApacheCommonsLang3MathNumberUtils_compareWithByte_withByte_(x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 9, 1, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x9, 13, 1, 14, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 15, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 15, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 16, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x9, 17, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x9, 18, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x9, 19, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x9, 20, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 21, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x9, 22, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x89, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 23, 25, -1, -1, -1, -1 },
    { NULL, "S", 0x89, 23, 26, -1, -1, -1, -1 },
    { NULL, "B", 0x89, 23, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x89, 23, 28, -1, -1, -1, -1 },
    { NULL, "F", 0x89, 23, 29, -1, -1, -1, -1 },
    { NULL, "J", 0x89, 30, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 30, 25, -1, -1, -1, -1 },
    { NULL, "S", 0x89, 30, 26, -1, -1, -1, -1 },
    { NULL, "B", 0x89, 30, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x89, 30, 28, -1, -1, -1, -1 },
    { NULL, "F", 0x89, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 23, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 23, 34, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 23, 35, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 23, 36, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 23, 37, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 23, 38, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 30, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 34, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 30, 35, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 30, 36, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 30, 37, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 30, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 39, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 40, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 41, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 45, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 46, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toIntWithNSString:);
  methods[2].selector = @selector(toIntWithNSString:withInt:);
  methods[3].selector = @selector(toLongWithNSString:);
  methods[4].selector = @selector(toLongWithNSString:withLong:);
  methods[5].selector = @selector(toFloatWithNSString:);
  methods[6].selector = @selector(toFloatWithNSString:withFloat:);
  methods[7].selector = @selector(toDoubleWithNSString:);
  methods[8].selector = @selector(toDoubleWithNSString:withDouble:);
  methods[9].selector = @selector(toByteWithNSString:);
  methods[10].selector = @selector(toByteWithNSString:withByte:);
  methods[11].selector = @selector(toShortWithNSString:);
  methods[12].selector = @selector(toShortWithNSString:withShort:);
  methods[13].selector = @selector(createNumberWithNSString:);
  methods[14].selector = @selector(getMantissaWithNSString:);
  methods[15].selector = @selector(getMantissaWithNSString:withInt:);
  methods[16].selector = @selector(isAllZerosWithNSString:);
  methods[17].selector = @selector(createFloatWithNSString:);
  methods[18].selector = @selector(createDoubleWithNSString:);
  methods[19].selector = @selector(createIntegerWithNSString:);
  methods[20].selector = @selector(createLongWithNSString:);
  methods[21].selector = @selector(createBigIntegerWithNSString:);
  methods[22].selector = @selector(createBigDecimalWithNSString:);
  methods[23].selector = @selector(minWithLongArray:);
  methods[24].selector = @selector(minWithIntArray:);
  methods[25].selector = @selector(minWithShortArray:);
  methods[26].selector = @selector(minWithByteArray:);
  methods[27].selector = @selector(minWithDoubleArray:);
  methods[28].selector = @selector(minWithFloatArray:);
  methods[29].selector = @selector(maxWithLongArray:);
  methods[30].selector = @selector(maxWithIntArray:);
  methods[31].selector = @selector(maxWithShortArray:);
  methods[32].selector = @selector(maxWithByteArray:);
  methods[33].selector = @selector(maxWithDoubleArray:);
  methods[34].selector = @selector(maxWithFloatArray:);
  methods[35].selector = @selector(validateArrayWithId:);
  methods[36].selector = @selector(minWithLong:withLong:withLong:);
  methods[37].selector = @selector(minWithInt:withInt:withInt:);
  methods[38].selector = @selector(minWithShort:withShort:withShort:);
  methods[39].selector = @selector(minWithByte:withByte:withByte:);
  methods[40].selector = @selector(minWithDouble:withDouble:withDouble:);
  methods[41].selector = @selector(minWithFloat:withFloat:withFloat:);
  methods[42].selector = @selector(maxWithLong:withLong:withLong:);
  methods[43].selector = @selector(maxWithInt:withInt:withInt:);
  methods[44].selector = @selector(maxWithShort:withShort:withShort:);
  methods[45].selector = @selector(maxWithByte:withByte:withByte:);
  methods[46].selector = @selector(maxWithDouble:withDouble:withDouble:);
  methods[47].selector = @selector(maxWithFloat:withFloat:withFloat:);
  methods[48].selector = @selector(isDigitsWithNSString:);
  methods[49].selector = @selector(isNumberWithNSString:);
  methods[50].selector = @selector(isParsableWithNSString:);
  methods[51].selector = @selector(compareWithInt:withInt:);
  methods[52].selector = @selector(compareWithLong:withLong:);
  methods[53].selector = @selector(compareWithShort:withShort:);
  methods[54].selector = @selector(compareWithByte:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LONG_ZERO", "LJavaLangLong;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "LONG_ONE", "LJavaLangLong;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "LONG_MINUS_ONE", "LJavaLangLong;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "INTEGER_ZERO", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "INTEGER_ONE", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "INTEGER_MINUS_ONE", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 52, -1, -1 },
    { "SHORT_ZERO", "LJavaLangShort;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "SHORT_ONE", "LJavaLangShort;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "SHORT_MINUS_ONE", "LJavaLangShort;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "BYTE_ZERO", "LJavaLangByte;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "BYTE_ONE", "LJavaLangByte;", .constantValue.asLong = 0, 0x19, -1, 57, -1, -1 },
    { "BYTE_MINUS_ONE", "LJavaLangByte;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "DOUBLE_ZERO", "LJavaLangDouble;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "DOUBLE_ONE", "LJavaLangDouble;", .constantValue.asLong = 0, 0x19, -1, 60, -1, -1 },
    { "DOUBLE_MINUS_ONE", "LJavaLangDouble;", .constantValue.asLong = 0, 0x19, -1, 61, -1, -1 },
    { "FLOAT_ZERO", "LJavaLangFloat;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "FLOAT_ONE", "LJavaLangFloat;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "FLOAT_MINUS_ONE", "LJavaLangFloat;", .constantValue.asLong = 0, 0x19, -1, 64, -1, -1 },
  };
  static const void *ptrTable[] = { "toInt", "LNSString;", "LNSString;I", "toLong", "LNSString;J", "toFloat", "LNSString;F", "toDouble", "LNSString;D", "toByte", "LNSString;B", "toShort", "LNSString;S", "createNumber", "LJavaLangNumberFormatException;", "getMantissa", "isAllZeros", "createFloat", "createDouble", "createInteger", "createLong", "createBigInteger", "createBigDecimal", "min", "[J", "[I", "[S", "[B", "[D", "[F", "max", "validateArray", "LNSObject;", "JJJ", "III", "SSS", "BBB", "DDD", "FFF", "isDigits", "isNumber", "isParsable", "compare", "II", "JJ", "SS", "BB", &OrgApacheCommonsLang3MathNumberUtils_LONG_ZERO, &OrgApacheCommonsLang3MathNumberUtils_LONG_ONE, &OrgApacheCommonsLang3MathNumberUtils_LONG_MINUS_ONE, &OrgApacheCommonsLang3MathNumberUtils_INTEGER_ZERO, &OrgApacheCommonsLang3MathNumberUtils_INTEGER_ONE, &OrgApacheCommonsLang3MathNumberUtils_INTEGER_MINUS_ONE, &OrgApacheCommonsLang3MathNumberUtils_SHORT_ZERO, &OrgApacheCommonsLang3MathNumberUtils_SHORT_ONE, &OrgApacheCommonsLang3MathNumberUtils_SHORT_MINUS_ONE, &OrgApacheCommonsLang3MathNumberUtils_BYTE_ZERO, &OrgApacheCommonsLang3MathNumberUtils_BYTE_ONE, &OrgApacheCommonsLang3MathNumberUtils_BYTE_MINUS_ONE, &OrgApacheCommonsLang3MathNumberUtils_DOUBLE_ZERO, &OrgApacheCommonsLang3MathNumberUtils_DOUBLE_ONE, &OrgApacheCommonsLang3MathNumberUtils_DOUBLE_MINUS_ONE, &OrgApacheCommonsLang3MathNumberUtils_FLOAT_ZERO, &OrgApacheCommonsLang3MathNumberUtils_FLOAT_ONE, &OrgApacheCommonsLang3MathNumberUtils_FLOAT_MINUS_ONE };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3MathNumberUtils = { "NumberUtils", "org.apache.commons.lang3.math", ptrTable, methods, fields, 7, 0x1, 55, 18, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3MathNumberUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3MathNumberUtils class]) {
    OrgApacheCommonsLang3MathNumberUtils_LONG_ZERO = JavaLangLong_valueOfWithLong_(0LL);
    OrgApacheCommonsLang3MathNumberUtils_LONG_ONE = JavaLangLong_valueOfWithLong_(1LL);
    OrgApacheCommonsLang3MathNumberUtils_LONG_MINUS_ONE = JavaLangLong_valueOfWithLong_(-1LL);
    OrgApacheCommonsLang3MathNumberUtils_INTEGER_ZERO = JavaLangInteger_valueOfWithInt_(0);
    OrgApacheCommonsLang3MathNumberUtils_INTEGER_ONE = JavaLangInteger_valueOfWithInt_(1);
    OrgApacheCommonsLang3MathNumberUtils_INTEGER_MINUS_ONE = JavaLangInteger_valueOfWithInt_(-1);
    OrgApacheCommonsLang3MathNumberUtils_SHORT_ZERO = JavaLangShort_valueOfWithShort_((jshort) 0);
    OrgApacheCommonsLang3MathNumberUtils_SHORT_ONE = JavaLangShort_valueOfWithShort_((jshort) 1);
    OrgApacheCommonsLang3MathNumberUtils_SHORT_MINUS_ONE = JavaLangShort_valueOfWithShort_((jshort) -1);
    OrgApacheCommonsLang3MathNumberUtils_BYTE_ZERO = JavaLangByte_valueOfWithByte_((jbyte) 0);
    OrgApacheCommonsLang3MathNumberUtils_BYTE_ONE = JavaLangByte_valueOfWithByte_((jbyte) 1);
    OrgApacheCommonsLang3MathNumberUtils_BYTE_MINUS_ONE = JavaLangByte_valueOfWithByte_((jbyte) -1);
    OrgApacheCommonsLang3MathNumberUtils_DOUBLE_ZERO = JavaLangDouble_valueOfWithDouble_(0.0);
    OrgApacheCommonsLang3MathNumberUtils_DOUBLE_ONE = JavaLangDouble_valueOfWithDouble_(1.0);
    OrgApacheCommonsLang3MathNumberUtils_DOUBLE_MINUS_ONE = JavaLangDouble_valueOfWithDouble_(-1.0);
    OrgApacheCommonsLang3MathNumberUtils_FLOAT_ZERO = JavaLangFloat_valueOfWithFloat_(0.0f);
    OrgApacheCommonsLang3MathNumberUtils_FLOAT_ONE = JavaLangFloat_valueOfWithFloat_(1.0f);
    OrgApacheCommonsLang3MathNumberUtils_FLOAT_MINUS_ONE = JavaLangFloat_valueOfWithFloat_(-1.0f);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3MathNumberUtils)
  }
}

@end

void OrgApacheCommonsLang3MathNumberUtils_init(OrgApacheCommonsLang3MathNumberUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3MathNumberUtils *new_OrgApacheCommonsLang3MathNumberUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MathNumberUtils, init)
}

OrgApacheCommonsLang3MathNumberUtils *create_OrgApacheCommonsLang3MathNumberUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MathNumberUtils, init)
}

jint OrgApacheCommonsLang3MathNumberUtils_toIntWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_toIntWithNSString_withInt_(str, 0);
}

jint OrgApacheCommonsLang3MathNumberUtils_toIntWithNSString_withInt_(NSString *str, jint defaultValue) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return defaultValue;
  }
  @try {
    return JavaLangInteger_parseIntWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

jlong OrgApacheCommonsLang3MathNumberUtils_toLongWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_toLongWithNSString_withLong_(str, 0LL);
}

jlong OrgApacheCommonsLang3MathNumberUtils_toLongWithNSString_withLong_(NSString *str, jlong defaultValue) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return defaultValue;
  }
  @try {
    return JavaLangLong_parseLongWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

jfloat OrgApacheCommonsLang3MathNumberUtils_toFloatWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_toFloatWithNSString_withFloat_(str, 0.0f);
}

jfloat OrgApacheCommonsLang3MathNumberUtils_toFloatWithNSString_withFloat_(NSString *str, jfloat defaultValue) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return defaultValue;
  }
  @try {
    return JavaLangFloat_parseFloatWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

jdouble OrgApacheCommonsLang3MathNumberUtils_toDoubleWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_toDoubleWithNSString_withDouble_(str, 0.0);
}

jdouble OrgApacheCommonsLang3MathNumberUtils_toDoubleWithNSString_withDouble_(NSString *str, jdouble defaultValue) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return defaultValue;
  }
  @try {
    return JavaLangDouble_parseDoubleWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

jbyte OrgApacheCommonsLang3MathNumberUtils_toByteWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_toByteWithNSString_withByte_(str, (jbyte) 0);
}

jbyte OrgApacheCommonsLang3MathNumberUtils_toByteWithNSString_withByte_(NSString *str, jbyte defaultValue) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return defaultValue;
  }
  @try {
    return JavaLangByte_parseByteWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

jshort OrgApacheCommonsLang3MathNumberUtils_toShortWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_toShortWithNSString_withShort_(str, (jshort) 0);
}

jshort OrgApacheCommonsLang3MathNumberUtils_toShortWithNSString_withShort_(NSString *str, jshort defaultValue) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return defaultValue;
  }
  @try {
    return JavaLangShort_parseShortWithNSString_(str);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return defaultValue;
  }
}

NSNumber *OrgApacheCommonsLang3MathNumberUtils_createNumberWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(str)) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(@"A blank string is not a valid number");
  }
  IOSObjectArray *hex_prefixes = [IOSObjectArray newArrayWithObjects:(id[]){ @"0x", @"0X", @"-0x", @"-0X", @"#", @"-#" } count:6 type:NSString_class_()];
  jint pfxLen = 0;
  {
    IOSObjectArray *a__ = hex_prefixes;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *pfx = *b__++;
      if ([str java_hasPrefix:pfx]) {
        pfxLen += [((NSString *) nil_chk(pfx)) java_length];
        break;
      }
    }
  }
  if (pfxLen > 0) {
    jchar firstSigDigit = 0;
    for (jint i = pfxLen; i < [str java_length]; i++) {
      firstSigDigit = [str charAtWithInt:i];
      if (firstSigDigit == '0') {
        pfxLen++;
      }
      else {
        break;
      }
    }
    jint hexDigits = [str java_length] - pfxLen;
    if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) {
      return OrgApacheCommonsLang3MathNumberUtils_createBigIntegerWithNSString_(str);
    }
    if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) {
      return OrgApacheCommonsLang3MathNumberUtils_createLongWithNSString_(str);
    }
    return OrgApacheCommonsLang3MathNumberUtils_createIntegerWithNSString_(str);
  }
  jchar lastChar = [str charAtWithInt:[str java_length] - 1];
  NSString *mant;
  NSString *dec;
  NSString *exp;
  jint decPos = [str java_indexOf:'.'];
  jint expPos = [str java_indexOf:'e'] + [str java_indexOf:'E'] + 1;
  jint numDecimals = 0;
  if (decPos > -1) {
    if (expPos > -1) {
      if (expPos < decPos || expPos > [str java_length]) {
        @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", str, @" is not a valid number."));
      }
      dec = [str java_substring:decPos + 1 endIndex:expPos];
    }
    else {
      dec = [str java_substring:decPos + 1];
    }
    mant = OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_withInt_(str, decPos);
    numDecimals = [((NSString *) nil_chk(dec)) java_length];
  }
  else {
    if (expPos > -1) {
      if (expPos > [str java_length]) {
        @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", str, @" is not a valid number."));
      }
      mant = OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_withInt_(str, expPos);
    }
    else {
      mant = OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_(str);
    }
    dec = nil;
  }
  if (!JavaLangCharacter_isDigitWithChar_(lastChar) && lastChar != '.') {
    if (expPos > -1 && expPos < [str java_length] - 1) {
      exp = [str java_substring:expPos + 1 endIndex:[str java_length] - 1];
    }
    else {
      exp = nil;
    }
    NSString *numeric = [str java_substring:0 endIndex:[str java_length] - 1];
    jboolean allZeros = OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(mant) && OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(exp);
    switch (lastChar) {
      case 'l':
      case 'L':
      if (dec == nil && exp == nil && (([((NSString *) nil_chk(numeric)) charAtWithInt:0] == '-' && OrgApacheCommonsLang3MathNumberUtils_isDigitsWithNSString_([numeric java_substring:1])) || OrgApacheCommonsLang3MathNumberUtils_isDigitsWithNSString_(numeric))) {
        @try {
          return OrgApacheCommonsLang3MathNumberUtils_createLongWithNSString_(numeric);
        }
        @catch (JavaLangNumberFormatException *nfe) {
        }
        return OrgApacheCommonsLang3MathNumberUtils_createBigIntegerWithNSString_(numeric);
      }
      @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", str, @" is not a valid number."));
      case 'f':
      case 'F':
      @try {
        JavaLangFloat *f = OrgApacheCommonsLang3MathNumberUtils_createFloatWithNSString_(numeric);
        if (!([((JavaLangFloat *) nil_chk(f)) isInfinite] || ([f floatValue] == 0.0f && !allZeros))) {
          return f;
        }
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
      case 'd':
      case 'D':
      @try {
        JavaLangDouble *d = OrgApacheCommonsLang3MathNumberUtils_createDoubleWithNSString_(numeric);
        if (!([((JavaLangDouble *) nil_chk(d)) isInfinite] || ([d floatValue] == 0.0 && !allZeros))) {
          return d;
        }
      }
      @catch (JavaLangNumberFormatException *nfe) {
      }
      @try {
        return OrgApacheCommonsLang3MathNumberUtils_createBigDecimalWithNSString_(numeric);
      }
      @catch (JavaLangNumberFormatException *e) {
      }
      default:
      @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", str, @" is not a valid number."));
    }
  }
  if (expPos > -1 && expPos < [str java_length] - 1) {
    exp = [str java_substring:expPos + 1 endIndex:[str java_length]];
  }
  else {
    exp = nil;
  }
  if (dec == nil && exp == nil) {
    @try {
      return OrgApacheCommonsLang3MathNumberUtils_createIntegerWithNSString_(str);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
    @try {
      return OrgApacheCommonsLang3MathNumberUtils_createLongWithNSString_(str);
    }
    @catch (JavaLangNumberFormatException *nfe) {
    }
    return OrgApacheCommonsLang3MathNumberUtils_createBigIntegerWithNSString_(str);
  }
  jboolean allZeros = OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(mant) && OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(exp);
  @try {
    if (numDecimals <= 7) {
      JavaLangFloat *f = OrgApacheCommonsLang3MathNumberUtils_createFloatWithNSString_(str);
      if (!([((JavaLangFloat *) nil_chk(f)) isInfinite] || ([f floatValue] == 0.0f && !allZeros))) {
        return f;
      }
    }
  }
  @catch (JavaLangNumberFormatException *nfe) {
  }
  @try {
    if (numDecimals <= 16) {
      JavaLangDouble *d = OrgApacheCommonsLang3MathNumberUtils_createDoubleWithNSString_(str);
      if (!([((JavaLangDouble *) nil_chk(d)) isInfinite] || ([d doubleValue] == 0.0 && !allZeros))) {
        return d;
      }
    }
  }
  @catch (JavaLangNumberFormatException *nfe) {
  }
  return OrgApacheCommonsLang3MathNumberUtils_createBigDecimalWithNSString_(str);
}

NSString *OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_withInt_(str, [((NSString *) nil_chk(str)) java_length]);
}

NSString *OrgApacheCommonsLang3MathNumberUtils_getMantissaWithNSString_withInt_(NSString *str, jint stopPos) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  jchar firstChar = [((NSString *) nil_chk(str)) charAtWithInt:0];
  jboolean hasSign = (firstChar == '-' || firstChar == '+');
  return hasSign ? [str java_substring:1 endIndex:stopPos] : [str java_substring:0 endIndex:stopPos];
}

jboolean OrgApacheCommonsLang3MathNumberUtils_isAllZerosWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return true;
  }
  for (jint i = [str java_length] - 1; i >= 0; i--) {
    if ([str charAtWithInt:i] != '0') {
      return false;
    }
  }
  return [str java_length] > 0;
}

JavaLangFloat *OrgApacheCommonsLang3MathNumberUtils_createFloatWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return JavaLangFloat_valueOfWithNSString_(str);
}

JavaLangDouble *OrgApacheCommonsLang3MathNumberUtils_createDoubleWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return JavaLangDouble_valueOfWithNSString_(str);
}

JavaLangInteger *OrgApacheCommonsLang3MathNumberUtils_createIntegerWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return JavaLangInteger_decodeWithNSString_(str);
}

JavaLangLong *OrgApacheCommonsLang3MathNumberUtils_createLongWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return JavaLangLong_decodeWithNSString_(str);
}

JavaMathBigInteger *OrgApacheCommonsLang3MathNumberUtils_createBigIntegerWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint pos = 0;
  jint radix = 10;
  jboolean negate = false;
  if ([str java_hasPrefix:@"-"]) {
    negate = true;
    pos = 1;
  }
  if ([str java_hasPrefix:@"0x" offset:pos] || [str java_hasPrefix:@"0X" offset:pos]) {
    radix = 16;
    pos += 2;
  }
  else if ([str java_hasPrefix:@"#" offset:pos]) {
    radix = 16;
    pos++;
  }
  else if ([str java_hasPrefix:@"0" offset:pos] && [str java_length] > pos + 1) {
    radix = 8;
    pos++;
  }
  JavaMathBigInteger *value = new_JavaMathBigInteger_initWithNSString_withInt_([str java_substring:pos], radix);
  return negate ? [value negate] : value;
}

JavaMathBigDecimal *OrgApacheCommonsLang3MathNumberUtils_createBigDecimalWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(str)) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(@"A blank string is not a valid number");
  }
  if ([((NSString *) nil_chk([str java_trim])) java_hasPrefix:@"--"]) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$$", str, @" is not a valid number."));
  }
  return new_JavaMathBigDecimal_initWithNSString_(str);
}

jlong OrgApacheCommonsLang3MathNumberUtils_minWithLongArray_(IOSLongArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jlong min = IOSLongArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (IOSLongArray_Get(array, i) < min) {
      min = IOSLongArray_Get(array, i);
    }
  }
  return min;
}

jint OrgApacheCommonsLang3MathNumberUtils_minWithIntArray_(IOSIntArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jint min = IOSIntArray_Get(nil_chk(array), 0);
  for (jint j = 1; j < array->size_; j++) {
    if (IOSIntArray_Get(array, j) < min) {
      min = IOSIntArray_Get(array, j);
    }
  }
  return min;
}

jshort OrgApacheCommonsLang3MathNumberUtils_minWithShortArray_(IOSShortArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jshort min = IOSShortArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (IOSShortArray_Get(array, i) < min) {
      min = IOSShortArray_Get(array, i);
    }
  }
  return min;
}

jbyte OrgApacheCommonsLang3MathNumberUtils_minWithByteArray_(IOSByteArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jbyte min = IOSByteArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (IOSByteArray_Get(array, i) < min) {
      min = IOSByteArray_Get(array, i);
    }
  }
  return min;
}

jdouble OrgApacheCommonsLang3MathNumberUtils_minWithDoubleArray_(IOSDoubleArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jdouble min = IOSDoubleArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(array, i))) {
      return JavaLangDouble_NaN;
    }
    if (IOSDoubleArray_Get(array, i) < min) {
      min = IOSDoubleArray_Get(array, i);
    }
  }
  return min;
}

jfloat OrgApacheCommonsLang3MathNumberUtils_minWithFloatArray_(IOSFloatArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jfloat min = IOSFloatArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (JavaLangFloat_isNaNWithFloat_(IOSFloatArray_Get(array, i))) {
      return JavaLangFloat_NaN;
    }
    if (IOSFloatArray_Get(array, i) < min) {
      min = IOSFloatArray_Get(array, i);
    }
  }
  return min;
}

jlong OrgApacheCommonsLang3MathNumberUtils_maxWithLongArray_(IOSLongArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jlong max = IOSLongArray_Get(nil_chk(array), 0);
  for (jint j = 1; j < array->size_; j++) {
    if (IOSLongArray_Get(array, j) > max) {
      max = IOSLongArray_Get(array, j);
    }
  }
  return max;
}

jint OrgApacheCommonsLang3MathNumberUtils_maxWithIntArray_(IOSIntArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jint max = IOSIntArray_Get(nil_chk(array), 0);
  for (jint j = 1; j < array->size_; j++) {
    if (IOSIntArray_Get(array, j) > max) {
      max = IOSIntArray_Get(array, j);
    }
  }
  return max;
}

jshort OrgApacheCommonsLang3MathNumberUtils_maxWithShortArray_(IOSShortArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jshort max = IOSShortArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (IOSShortArray_Get(array, i) > max) {
      max = IOSShortArray_Get(array, i);
    }
  }
  return max;
}

jbyte OrgApacheCommonsLang3MathNumberUtils_maxWithByteArray_(IOSByteArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jbyte max = IOSByteArray_Get(nil_chk(array), 0);
  for (jint i = 1; i < array->size_; i++) {
    if (IOSByteArray_Get(array, i) > max) {
      max = IOSByteArray_Get(array, i);
    }
  }
  return max;
}

jdouble OrgApacheCommonsLang3MathNumberUtils_maxWithDoubleArray_(IOSDoubleArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jdouble max = IOSDoubleArray_Get(nil_chk(array), 0);
  for (jint j = 1; j < array->size_; j++) {
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(array, j))) {
      return JavaLangDouble_NaN;
    }
    if (IOSDoubleArray_Get(array, j) > max) {
      max = IOSDoubleArray_Get(array, j);
    }
  }
  return max;
}

jfloat OrgApacheCommonsLang3MathNumberUtils_maxWithFloatArray_(IOSFloatArray *array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(array);
  jfloat max = IOSFloatArray_Get(nil_chk(array), 0);
  for (jint j = 1; j < array->size_; j++) {
    if (JavaLangFloat_isNaNWithFloat_(IOSFloatArray_Get(array, j))) {
      return JavaLangFloat_NaN;
    }
    if (IOSFloatArray_Get(array, j) > max) {
      max = IOSFloatArray_Get(array, j);
    }
  }
  return max;
}

void OrgApacheCommonsLang3MathNumberUtils_validateArrayWithId_(id array) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (array == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Array must not be null");
  }
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(JavaLangReflectArray_getLengthWithId_(array) != 0, @"Array cannot be empty.", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
}

jlong OrgApacheCommonsLang3MathNumberUtils_minWithLong_withLong_withLong_(jlong a, jlong b, jlong c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b < a) {
    a = b;
  }
  if (c < a) {
    a = c;
  }
  return a;
}

jint OrgApacheCommonsLang3MathNumberUtils_minWithInt_withInt_withInt_(jint a, jint b, jint c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b < a) {
    a = b;
  }
  if (c < a) {
    a = c;
  }
  return a;
}

jshort OrgApacheCommonsLang3MathNumberUtils_minWithShort_withShort_withShort_(jshort a, jshort b, jshort c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b < a) {
    a = b;
  }
  if (c < a) {
    a = c;
  }
  return a;
}

jbyte OrgApacheCommonsLang3MathNumberUtils_minWithByte_withByte_withByte_(jbyte a, jbyte b, jbyte c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b < a) {
    a = b;
  }
  if (c < a) {
    a = c;
  }
  return a;
}

jdouble OrgApacheCommonsLang3MathNumberUtils_minWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(a, b), c);
}

jfloat OrgApacheCommonsLang3MathNumberUtils_minWithFloat_withFloat_withFloat_(jfloat a, jfloat b, jfloat c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return JavaLangMath_minWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(a, b), c);
}

jlong OrgApacheCommonsLang3MathNumberUtils_maxWithLong_withLong_withLong_(jlong a, jlong b, jlong c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b > a) {
    a = b;
  }
  if (c > a) {
    a = c;
  }
  return a;
}

jint OrgApacheCommonsLang3MathNumberUtils_maxWithInt_withInt_withInt_(jint a, jint b, jint c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b > a) {
    a = b;
  }
  if (c > a) {
    a = c;
  }
  return a;
}

jshort OrgApacheCommonsLang3MathNumberUtils_maxWithShort_withShort_withShort_(jshort a, jshort b, jshort c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b > a) {
    a = b;
  }
  if (c > a) {
    a = c;
  }
  return a;
}

jbyte OrgApacheCommonsLang3MathNumberUtils_maxWithByte_withByte_withByte_(jbyte a, jbyte b, jbyte c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (b > a) {
    a = b;
  }
  if (c > a) {
    a = c;
  }
  return a;
}

jdouble OrgApacheCommonsLang3MathNumberUtils_maxWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(a, b), c);
}

jfloat OrgApacheCommonsLang3MathNumberUtils_maxWithFloat_withFloat_withFloat_(jfloat a, jfloat b, jfloat c) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_maxWithFloat_withFloat_(a, b), c);
}

jboolean OrgApacheCommonsLang3MathNumberUtils_isDigitsWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return false;
  }
  for (jint i = 0; i < [((NSString *) nil_chk(str)) java_length]; i++) {
    if (!JavaLangCharacter_isDigitWithChar_([str charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3MathNumberUtils_isNumberWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return false;
  }
  IOSCharArray *chars = [((NSString *) nil_chk(str)) java_toCharArray];
  jint sz = ((IOSCharArray *) nil_chk(chars))->size_;
  jboolean hasExp = false;
  jboolean hasDecPoint = false;
  jboolean allowSigns = false;
  jboolean foundDigit = false;
  jint start = (IOSCharArray_Get(chars, 0) == '-') ? 1 : 0;
  if (sz > start + 1 && IOSCharArray_Get(chars, start) == '0') {
    if ((IOSCharArray_Get(chars, start + 1) == 'x') || (IOSCharArray_Get(chars, start + 1) == 'X')) {
      jint i = start + 2;
      if (i == sz) {
        return false;
      }
      for (; i < chars->size_; i++) {
        if ((IOSCharArray_Get(chars, i) < '0' || IOSCharArray_Get(chars, i) > '9') && (IOSCharArray_Get(chars, i) < 'a' || IOSCharArray_Get(chars, i) > 'f') && (IOSCharArray_Get(chars, i) < 'A' || IOSCharArray_Get(chars, i) > 'F')) {
          return false;
        }
      }
      return true;
    }
    else if (JavaLangCharacter_isDigitWithChar_(IOSCharArray_Get(chars, start + 1))) {
      jint i = start + 1;
      for (; i < chars->size_; i++) {
        if (IOSCharArray_Get(chars, i) < '0' || IOSCharArray_Get(chars, i) > '7') {
          return false;
        }
      }
      return true;
    }
  }
  sz--;
  jint i = start;
  while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
    if (IOSCharArray_Get(chars, i) >= '0' && IOSCharArray_Get(chars, i) <= '9') {
      foundDigit = true;
      allowSigns = false;
    }
    else if (IOSCharArray_Get(chars, i) == '.') {
      if (hasDecPoint || hasExp) {
        return false;
      }
      hasDecPoint = true;
    }
    else if (IOSCharArray_Get(chars, i) == 'e' || IOSCharArray_Get(chars, i) == 'E') {
      if (hasExp) {
        return false;
      }
      if (!foundDigit) {
        return false;
      }
      hasExp = true;
      allowSigns = true;
    }
    else if (IOSCharArray_Get(chars, i) == '+' || IOSCharArray_Get(chars, i) == '-') {
      if (!allowSigns) {
        return false;
      }
      allowSigns = false;
      foundDigit = false;
    }
    else {
      return false;
    }
    i++;
  }
  if (i < chars->size_) {
    if (IOSCharArray_Get(chars, i) >= '0' && IOSCharArray_Get(chars, i) <= '9') {
      return true;
    }
    if (IOSCharArray_Get(chars, i) == 'e' || IOSCharArray_Get(chars, i) == 'E') {
      return false;
    }
    if (IOSCharArray_Get(chars, i) == '.') {
      if (hasDecPoint || hasExp) {
        return false;
      }
      return foundDigit;
    }
    if (!allowSigns && (IOSCharArray_Get(chars, i) == 'd' || IOSCharArray_Get(chars, i) == 'D' || IOSCharArray_Get(chars, i) == 'f' || IOSCharArray_Get(chars, i) == 'F')) {
      return foundDigit;
    }
    if (IOSCharArray_Get(chars, i) == 'l' || IOSCharArray_Get(chars, i) == 'L') {
      return foundDigit && !hasExp && !hasDecPoint;
    }
    return false;
  }
  return !allowSigns && foundDigit;
}

jboolean OrgApacheCommonsLang3MathNumberUtils_isParsableWithNSString_(NSString *str) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(str, @".")) {
    return false;
  }
  if (OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(str, @"-")) {
    return OrgApacheCommonsLang3MathNumberUtils_isDigitsWithNSString_(OrgApacheCommonsLang3StringUtils_replaceOnceWithNSString_withNSString_withNSString_([((NSString *) nil_chk(str)) java_substring:1], @".", OrgApacheCommonsLang3StringUtils_EMPTY));
  }
  else {
    return OrgApacheCommonsLang3MathNumberUtils_isDigitsWithNSString_(OrgApacheCommonsLang3StringUtils_replaceOnceWithNSString_withNSString_withNSString_(str, @".", OrgApacheCommonsLang3StringUtils_EMPTY));
  }
}

jint OrgApacheCommonsLang3MathNumberUtils_compareWithInt_withInt_(jint x, jint y) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (x == y) {
    return 0;
  }
  if (x < y) {
    return -1;
  }
  else {
    return 1;
  }
}

jint OrgApacheCommonsLang3MathNumberUtils_compareWithLong_withLong_(jlong x, jlong y) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (x == y) {
    return 0;
  }
  if (x < y) {
    return -1;
  }
  else {
    return 1;
  }
}

jint OrgApacheCommonsLang3MathNumberUtils_compareWithShort_withShort_(jshort x, jshort y) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  if (x == y) {
    return 0;
  }
  if (x < y) {
    return -1;
  }
  else {
    return 1;
  }
}

jint OrgApacheCommonsLang3MathNumberUtils_compareWithByte_withByte_(jbyte x, jbyte y) {
  OrgApacheCommonsLang3MathNumberUtils_initialize();
  return x - y;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3MathNumberUtils)
