//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/exception/ExceptionUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/ClassUtils.h"
#include "org/apache/commons/lang3/StringUtils.h"
#include "org/apache/commons/lang3/SystemUtils.h"
#include "org/apache/commons/lang3/exception/ExceptionUtils.h"

@interface OrgApacheCommonsLang3ExceptionExceptionUtils ()

+ (NSException *)getCauseUsingMethodNameWithNSException:(NSException *)throwable
                                           withNSString:(NSString *)methodName;
#define getCauseUsingMethodNameWithJavaLangThrowable getCauseUsingMethodNameWithNSException

+ (jint)indexOfWithNSException:(NSException *)throwable
                  withIOSClass:(IOSClass *)type
                       withInt:(jint)fromIndex
                   withBoolean:(jboolean)subclass;
#define indexOfWithJavaLangThrowable indexOfWithNSException

@end

inline IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_get_CAUSE_METHOD_NAMES();
static IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_CAUSE_METHOD_NAMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ExceptionExceptionUtils, CAUSE_METHOD_NAMES, IOSObjectArray *)

__attribute__((unused)) static NSException *OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseUsingMethodNameWithNSException_withNSString_(NSException *throwable, NSString *methodName);

__attribute__((unused)) static jint OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(NSException *throwable, IOSClass *type, jint fromIndex, jboolean subclass);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$2();

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ExceptionExceptionUtils)

NSString *OrgApacheCommonsLang3ExceptionExceptionUtils_WRAPPED_MARKER = @" [wrapped] ";

@implementation OrgApacheCommonsLang3ExceptionExceptionUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ExceptionExceptionUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)getDefaultCauseMethodNames {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getDefaultCauseMethodNames();
}

+ (NSException *)getCauseWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseWithNSException_(throwable);
}

+ (NSException *)getCauseWithNSException:(NSException *)throwable
                       withNSStringArray:(IOSObjectArray *)methodNames {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseWithNSException_withNSStringArray_(throwable, methodNames);
}

+ (NSException *)getRootCauseWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseWithNSException_(throwable);
}

+ (NSException *)getCauseUsingMethodNameWithNSException:(NSException *)throwable
                                           withNSString:(NSString *)methodName {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseUsingMethodNameWithNSException_withNSString_(throwable, methodName);
}

+ (jint)getThrowableCountWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableCountWithNSException_(throwable);
}

+ (IOSObjectArray *)getThrowablesWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowablesWithNSException_(throwable);
}

+ (id<JavaUtilList>)getThrowableListWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableListWithNSException_(throwable);
}

+ (jint)indexOfThrowableWithNSException:(NSException *)throwable
                           withIOSClass:(IOSClass *)clazz {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfThrowableWithNSException_withIOSClass_(throwable, clazz);
}

+ (jint)indexOfThrowableWithNSException:(NSException *)throwable
                           withIOSClass:(IOSClass *)clazz
                                withInt:(jint)fromIndex {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfThrowableWithNSException_withIOSClass_withInt_(throwable, clazz, fromIndex);
}

+ (jint)indexOfTypeWithNSException:(NSException *)throwable
                      withIOSClass:(IOSClass *)type {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfTypeWithNSException_withIOSClass_(throwable, type);
}

+ (jint)indexOfTypeWithNSException:(NSException *)throwable
                      withIOSClass:(IOSClass *)type
                           withInt:(jint)fromIndex {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfTypeWithNSException_withIOSClass_withInt_(throwable, type, fromIndex);
}

+ (jint)indexOfWithNSException:(NSException *)throwable
                  withIOSClass:(IOSClass *)type
                       withInt:(jint)fromIndex
                   withBoolean:(jboolean)subclass {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(throwable, type, fromIndex, subclass);
}

+ (void)printRootCauseStackTraceWithNSException:(NSException *)throwable {
  OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_(throwable);
}

+ (void)printRootCauseStackTraceWithNSException:(NSException *)throwable
                          withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_withJavaIoPrintStream_(throwable, stream);
}

+ (void)printRootCauseStackTraceWithNSException:(NSException *)throwable
                          withJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_withJavaIoPrintWriter_(throwable, writer);
}

+ (IOSObjectArray *)getRootCauseStackTraceWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseStackTraceWithNSException_(throwable);
}

+ (void)removeCommonFramesWithJavaUtilList:(id<JavaUtilList>)causeFrames
                          withJavaUtilList:(id<JavaUtilList>)wrapperFrames {
  OrgApacheCommonsLang3ExceptionExceptionUtils_removeCommonFramesWithJavaUtilList_withJavaUtilList_(causeFrames, wrapperFrames);
}

+ (NSString *)getStackTraceWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getStackTraceWithNSException_(throwable);
}

+ (IOSObjectArray *)getStackFramesWithNSException:(NSException *)throwable {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFramesWithNSException_(throwable);
}

+ (IOSObjectArray *)getStackFramesWithNSString:(NSString *)stackTrace {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFramesWithNSString_(stackTrace);
}

+ (id<JavaUtilList>)getStackFrameListWithNSException:(NSException *)t {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFrameListWithNSException_(t);
}

+ (NSString *)getMessageWithNSException:(NSException *)th {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getMessageWithNSException_(th);
}

+ (NSString *)getRootCauseMessageWithNSException:(NSException *)th {
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseMessageWithNSException_(th);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, -1, -1, -1, -1, 0, -1 },
    { NULL, "LNSException;", 0x9, 1, 2, -1, -1, 3, -1 },
    { NULL, "LNSException;", 0x9, 1, 4, -1, -1, 5, -1 },
    { NULL, "LNSException;", 0x9, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 2, -1, -1, -1, -1 },
    { NULL, "[LNSException;", 0x9, 10, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 11, 2, -1, 12, -1, -1 },
    { NULL, "I", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "I", 0x9, 13, 16, -1, 17, -1, -1 },
    { NULL, "I", 0x9, 18, 14, -1, 15, -1, -1 },
    { NULL, "I", 0x9, 18, 16, -1, 17, -1, -1 },
    { NULL, "I", 0xa, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x9, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 24, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 25, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, 28, -1, -1 },
    { NULL, "LNSString;", 0x9, 29, 2, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 30, 2, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x8, 30, 31, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 32, 2, -1, 33, -1, -1 },
    { NULL, "LNSString;", 0x9, 34, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 35, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDefaultCauseMethodNames);
  methods[2].selector = @selector(getCauseWithNSException:);
  methods[3].selector = @selector(getCauseWithNSException:withNSStringArray:);
  methods[4].selector = @selector(getRootCauseWithNSException:);
  methods[5].selector = @selector(getCauseUsingMethodNameWithNSException:withNSString:);
  methods[6].selector = @selector(getThrowableCountWithNSException:);
  methods[7].selector = @selector(getThrowablesWithNSException:);
  methods[8].selector = @selector(getThrowableListWithNSException:);
  methods[9].selector = @selector(indexOfThrowableWithNSException:withIOSClass:);
  methods[10].selector = @selector(indexOfThrowableWithNSException:withIOSClass:withInt:);
  methods[11].selector = @selector(indexOfTypeWithNSException:withIOSClass:);
  methods[12].selector = @selector(indexOfTypeWithNSException:withIOSClass:withInt:);
  methods[13].selector = @selector(indexOfWithNSException:withIOSClass:withInt:withBoolean:);
  methods[14].selector = @selector(printRootCauseStackTraceWithNSException:);
  methods[15].selector = @selector(printRootCauseStackTraceWithNSException:withJavaIoPrintStream:);
  methods[16].selector = @selector(printRootCauseStackTraceWithNSException:withJavaIoPrintWriter:);
  methods[17].selector = @selector(getRootCauseStackTraceWithNSException:);
  methods[18].selector = @selector(removeCommonFramesWithJavaUtilList:withJavaUtilList:);
  methods[19].selector = @selector(getStackTraceWithNSException:);
  methods[20].selector = @selector(getStackFramesWithNSException:);
  methods[21].selector = @selector(getStackFramesWithNSString:);
  methods[22].selector = @selector(getStackFrameListWithNSException:);
  methods[23].selector = @selector(getMessageWithNSException:);
  methods[24].selector = @selector(getRootCauseMessageWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WRAPPED_MARKER", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 36, -1, -1 },
    { "CAUSE_METHOD_NAMES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$0, "getCause", "LNSException;", (void *)&OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$1, "LNSException;[LNSString;", (void *)&OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$2, "getRootCause", "getCauseUsingMethodName", "LNSException;LNSString;", "getThrowableCount", "getThrowables", "getThrowableList", "(Ljava/lang/Throwable;)Ljava/util/List<Ljava/lang/Throwable;>;", "indexOfThrowable", "LNSException;LIOSClass;", "(Ljava/lang/Throwable;Ljava/lang/Class<*>;)I", "LNSException;LIOSClass;I", "(Ljava/lang/Throwable;Ljava/lang/Class<*>;I)I", "indexOfType", "indexOf", "LNSException;LIOSClass;IZ", "(Ljava/lang/Throwable;Ljava/lang/Class<*>;IZ)I", "printRootCauseStackTrace", "LNSException;LJavaIoPrintStream;", "LNSException;LJavaIoPrintWriter;", "getRootCauseStackTrace", "removeCommonFrames", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)V", "getStackTrace", "getStackFrames", "LNSString;", "getStackFrameList", "(Ljava/lang/Throwable;)Ljava/util/List<Ljava/lang/String;>;", "getMessage", "getRootCauseMessage", &OrgApacheCommonsLang3ExceptionExceptionUtils_WRAPPED_MARKER, &OrgApacheCommonsLang3ExceptionExceptionUtils_CAUSE_METHOD_NAMES };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ExceptionExceptionUtils = { "ExceptionUtils", "org.apache.commons.lang3.exception", ptrTable, methods, fields, 7, 0x1, 25, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ExceptionExceptionUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ExceptionExceptionUtils class]) {
    OrgApacheCommonsLang3ExceptionExceptionUtils_CAUSE_METHOD_NAMES = [IOSObjectArray newArrayWithObjects:(id[]){ @"getCause", @"getNextException", @"getTargetException", @"getException", @"getSourceException", @"getRootCause", @"getCausedByException", @"getNested", @"getLinkedException", @"getNestedException", @"getLinkedCause", @"getThrowable" } count:12 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ExceptionExceptionUtils)
  }
}

@end

void OrgApacheCommonsLang3ExceptionExceptionUtils_init(OrgApacheCommonsLang3ExceptionExceptionUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3ExceptionExceptionUtils *new_OrgApacheCommonsLang3ExceptionExceptionUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ExceptionExceptionUtils, init)
}

OrgApacheCommonsLang3ExceptionExceptionUtils *create_OrgApacheCommonsLang3ExceptionExceptionUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ExceptionExceptionUtils, init)
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_getDefaultCauseMethodNames() {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return OrgApacheCommonsLang3ArrayUtils_cloneWithNSObjectArray_(OrgApacheCommonsLang3ExceptionExceptionUtils_CAUSE_METHOD_NAMES);
}

NSException *OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseWithNSException_withNSStringArray_(throwable, OrgApacheCommonsLang3ExceptionExceptionUtils_CAUSE_METHOD_NAMES);
}

NSException *OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseWithNSException_withNSStringArray_(NSException *throwable, IOSObjectArray *methodNames) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (throwable == nil) {
    return nil;
  }
  if (methodNames == nil) {
    methodNames = OrgApacheCommonsLang3ExceptionExceptionUtils_CAUSE_METHOD_NAMES;
  }
  {
    IOSObjectArray *a__ = methodNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *methodName = *b__++;
      if (methodName != nil) {
        NSException *cause = OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseUsingMethodNameWithNSException_withNSString_(throwable, methodName);
        if (cause != nil) {
          return cause;
        }
      }
    }
  }
  return nil;
}

NSException *OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  id<JavaUtilList> list = OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableListWithNSException_(throwable);
  return [((id<JavaUtilList>) nil_chk(list)) size] < 2 ? nil : [list getWithInt:[list size] - 1];
}

NSException *OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseUsingMethodNameWithNSException_withNSString_(NSException *throwable, NSString *methodName) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  JavaLangReflectMethod *method = nil;
  @try {
    method = [[((NSException *) nil_chk(throwable)) java_getClass] getMethod:methodName parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ignored) {
  }
  @catch (JavaLangSecurityException *ignored) {
  }
  if (method != nil && [NSException_class_() isAssignableFrom:[method getReturnType]]) {
    @try {
      return (NSException *) cast_chk([method invokeWithId:throwable withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]], [NSException class]);
    }
    @catch (JavaLangIllegalAccessException *ignored) {
    }
    @catch (JavaLangIllegalArgumentException *ignored) {
    }
    @catch (JavaLangReflectInvocationTargetException *ignored) {
    }
  }
  return nil;
}

jint OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableCountWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return [((id<JavaUtilList>) nil_chk(OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableListWithNSException_(throwable))) size];
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowablesWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  id<JavaUtilList> list = OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableListWithNSException_(throwable);
  return [((id<JavaUtilList>) nil_chk(list)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[list size] type:NSException_class_()]];
}

id<JavaUtilList> OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowableListWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  while (throwable != nil && [list containsWithId:throwable] == false) {
    [list addWithId:throwable];
    throwable = OrgApacheCommonsLang3ExceptionExceptionUtils_getCauseWithNSException_(throwable);
  }
  return list;
}

jint OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfThrowableWithNSException_withIOSClass_(NSException *throwable, IOSClass *clazz) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(throwable, clazz, 0, false);
}

jint OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfThrowableWithNSException_withIOSClass_withInt_(NSException *throwable, IOSClass *clazz, jint fromIndex) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(throwable, clazz, fromIndex, false);
}

jint OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfTypeWithNSException_withIOSClass_(NSException *throwable, IOSClass *type) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(throwable, type, 0, true);
}

jint OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfTypeWithNSException_withIOSClass_withInt_(NSException *throwable, IOSClass *type, jint fromIndex) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  return OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(throwable, type, fromIndex, true);
}

jint OrgApacheCommonsLang3ExceptionExceptionUtils_indexOfWithNSException_withIOSClass_withInt_withBoolean_(NSException *throwable, IOSClass *type, jint fromIndex, jboolean subclass) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (throwable == nil || type == nil) {
    return -1;
  }
  if (fromIndex < 0) {
    fromIndex = 0;
  }
  IOSObjectArray *throwables = OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowablesWithNSException_(throwable);
  if (fromIndex >= ((IOSObjectArray *) nil_chk(throwables))->size_) {
    return -1;
  }
  if (subclass) {
    for (jint i = fromIndex; i < throwables->size_; i++) {
      if ([type isAssignableFrom:[((NSException *) nil_chk(IOSObjectArray_Get(throwables, i))) java_getClass]]) {
        return i;
      }
    }
  }
  else {
    for (jint i = fromIndex; i < throwables->size_; i++) {
      if ([type isEqual:[((NSException *) nil_chk(IOSObjectArray_Get(throwables, i))) java_getClass]]) {
        return i;
      }
    }
  }
  return -1;
}

void OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_withJavaIoPrintStream_(throwable, JreLoadStatic(JavaLangSystem, err));
}

void OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_withJavaIoPrintStream_(NSException *throwable, JavaIoPrintStream *stream) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (throwable == nil) {
    return;
  }
  if (stream == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The PrintStream must not be null");
  }
  IOSObjectArray *trace = OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseStackTraceWithNSException_(throwable);
  {
    IOSObjectArray *a__ = trace;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      [stream printlnWithNSString:element];
    }
  }
  [stream flush];
}

void OrgApacheCommonsLang3ExceptionExceptionUtils_printRootCauseStackTraceWithNSException_withJavaIoPrintWriter_(NSException *throwable, JavaIoPrintWriter *writer) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (throwable == nil) {
    return;
  }
  if (writer == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The PrintWriter must not be null");
  }
  IOSObjectArray *trace = OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseStackTraceWithNSException_(throwable);
  {
    IOSObjectArray *a__ = trace;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      [writer printlnWithNSString:element];
    }
  }
  [writer flush];
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseStackTraceWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (throwable == nil) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  IOSObjectArray *throwables = OrgApacheCommonsLang3ExceptionExceptionUtils_getThrowablesWithNSException_(throwable);
  jint count = ((IOSObjectArray *) nil_chk(throwables))->size_;
  id<JavaUtilList> frames = new_JavaUtilArrayList_init();
  id<JavaUtilList> nextTrace = OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFrameListWithNSException_(IOSObjectArray_Get(throwables, count - 1));
  for (jint i = count; --i >= 0; ) {
    id<JavaUtilList> trace = nextTrace;
    if (i != 0) {
      nextTrace = OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFrameListWithNSException_(IOSObjectArray_Get(throwables, i - 1));
      OrgApacheCommonsLang3ExceptionExceptionUtils_removeCommonFramesWithJavaUtilList_withJavaUtilList_(trace, nextTrace);
    }
    if (i == count - 1) {
      [frames addWithId:[((NSException *) nil_chk(IOSObjectArray_Get(throwables, i))) description]];
    }
    else {
      [frames addWithId:JreStrcat("$$", OrgApacheCommonsLang3ExceptionExceptionUtils_WRAPPED_MARKER, [((NSException *) nil_chk(IOSObjectArray_Get(throwables, i))) description])];
    }
    for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(trace)) size]; j++) {
      [frames addWithId:[trace getWithInt:j]];
    }
  }
  return [frames toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[frames size] type:NSString_class_()]];
}

void OrgApacheCommonsLang3ExceptionExceptionUtils_removeCommonFramesWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> causeFrames, id<JavaUtilList> wrapperFrames) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (causeFrames == nil || wrapperFrames == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The List must not be null");
  }
  jint causeFrameIndex = [causeFrames size] - 1;
  jint wrapperFrameIndex = [wrapperFrames size] - 1;
  while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {
    NSString *causeFrame = [causeFrames getWithInt:causeFrameIndex];
    NSString *wrapperFrame = [wrapperFrames getWithInt:wrapperFrameIndex];
    if ([((NSString *) nil_chk(causeFrame)) isEqual:wrapperFrame]) {
      (void) [causeFrames removeWithInt:causeFrameIndex];
    }
    causeFrameIndex--;
    wrapperFrameIndex--;
  }
}

NSString *OrgApacheCommonsLang3ExceptionExceptionUtils_getStackTraceWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(sw, true);
  [((NSException *) nil_chk(throwable)) printStackTraceWithJavaIoPrintWriter:pw];
  return [((JavaLangStringBuffer *) nil_chk([sw getBuffer])) description];
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFramesWithNSException_(NSException *throwable) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (throwable == nil) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFramesWithNSString_(OrgApacheCommonsLang3ExceptionExceptionUtils_getStackTraceWithNSException_(throwable));
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFramesWithNSString_(NSString *stackTrace) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  NSString *linebreak = JreLoadStatic(OrgApacheCommonsLang3SystemUtils, LINE_SEPARATOR);
  JavaUtilStringTokenizer *frames = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(stackTrace, linebreak);
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  while ([frames hasMoreTokens]) {
    [list addWithId:[frames nextToken]];
  }
  return [list toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[list size] type:NSString_class_()]];
}

id<JavaUtilList> OrgApacheCommonsLang3ExceptionExceptionUtils_getStackFrameListWithNSException_(NSException *t) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  NSString *stackTrace = OrgApacheCommonsLang3ExceptionExceptionUtils_getStackTraceWithNSException_(t);
  NSString *linebreak = JreLoadStatic(OrgApacheCommonsLang3SystemUtils, LINE_SEPARATOR);
  JavaUtilStringTokenizer *frames = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(stackTrace, linebreak);
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  jboolean traceStarted = false;
  while ([frames hasMoreTokens]) {
    NSString *token = [frames nextToken];
    jint at = [((NSString *) nil_chk(token)) java_indexOfString:@"at"];
    if (at != -1 && [((NSString *) nil_chk([((NSString *) nil_chk([token java_substring:0 endIndex:at])) java_trim])) java_isEmpty]) {
      traceStarted = true;
      [list addWithId:token];
    }
    else if (traceStarted) {
      break;
    }
  }
  return list;
}

NSString *OrgApacheCommonsLang3ExceptionExceptionUtils_getMessageWithNSException_(NSException *th) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  if (th == nil) {
    return @"";
  }
  NSString *clsName = OrgApacheCommonsLang3ClassUtils_getShortClassNameWithId_withNSString_(th, nil);
  NSString *msg = [th getMessage];
  return JreStrcat("$$$", clsName, @": ", OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_(msg));
}

NSString *OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseMessageWithNSException_(NSException *th) {
  OrgApacheCommonsLang3ExceptionExceptionUtils_initialize();
  NSException *root = OrgApacheCommonsLang3ExceptionExceptionUtils_getRootCauseWithNSException_(th);
  root = root == nil ? th : root;
  return OrgApacheCommonsLang3ExceptionExceptionUtils_getMessageWithNSException_(root);
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheCommonsLang3ExceptionExceptionUtils__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ExceptionExceptionUtils)
