//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/CharUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/commons/lang3/CharUtils.h"
#include "org/apache/commons/lang3/StringUtils.h"

inline IOSObjectArray *OrgApacheCommonsLang3CharUtils_get_CHAR_STRING_ARRAY();
static IOSObjectArray *OrgApacheCommonsLang3CharUtils_CHAR_STRING_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3CharUtils, CHAR_STRING_ARRAY, IOSObjectArray *)

inline IOSCharArray *OrgApacheCommonsLang3CharUtils_get_HEX_DIGITS();
static IOSCharArray *OrgApacheCommonsLang3CharUtils_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3CharUtils, HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3CharUtils__Annotations$0();

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3CharUtils)

@implementation OrgApacheCommonsLang3CharUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3CharUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangCharacter *)toCharacterObjectWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_toCharacterObjectWithChar_(ch);
}

+ (JavaLangCharacter *)toCharacterObjectWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3CharUtils_toCharacterObjectWithNSString_(str);
}

+ (jchar)toCharWithJavaLangCharacter:(JavaLangCharacter *)ch {
  return OrgApacheCommonsLang3CharUtils_toCharWithJavaLangCharacter_(ch);
}

+ (jchar)toCharWithJavaLangCharacter:(JavaLangCharacter *)ch
                            withChar:(jchar)defaultValue {
  return OrgApacheCommonsLang3CharUtils_toCharWithJavaLangCharacter_withChar_(ch, defaultValue);
}

+ (jchar)toCharWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3CharUtils_toCharWithNSString_(str);
}

+ (jchar)toCharWithNSString:(NSString *)str
                   withChar:(jchar)defaultValue {
  return OrgApacheCommonsLang3CharUtils_toCharWithNSString_withChar_(str, defaultValue);
}

+ (jint)toIntValueWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_toIntValueWithChar_(ch);
}

+ (jint)toIntValueWithChar:(jchar)ch
                   withInt:(jint)defaultValue {
  return OrgApacheCommonsLang3CharUtils_toIntValueWithChar_withInt_(ch, defaultValue);
}

+ (jint)toIntValueWithJavaLangCharacter:(JavaLangCharacter *)ch {
  return OrgApacheCommonsLang3CharUtils_toIntValueWithJavaLangCharacter_(ch);
}

+ (jint)toIntValueWithJavaLangCharacter:(JavaLangCharacter *)ch
                                withInt:(jint)defaultValue {
  return OrgApacheCommonsLang3CharUtils_toIntValueWithJavaLangCharacter_withInt_(ch, defaultValue);
}

+ (NSString *)toStringWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_toStringWithChar_(ch);
}

+ (NSString *)toStringWithJavaLangCharacter:(JavaLangCharacter *)ch {
  return OrgApacheCommonsLang3CharUtils_toStringWithJavaLangCharacter_(ch);
}

+ (NSString *)unicodeEscapedWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_unicodeEscapedWithChar_(ch);
}

+ (NSString *)unicodeEscapedWithJavaLangCharacter:(JavaLangCharacter *)ch {
  return OrgApacheCommonsLang3CharUtils_unicodeEscapedWithJavaLangCharacter_(ch);
}

+ (jboolean)isAsciiWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiWithChar_(ch);
}

+ (jboolean)isAsciiPrintableWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiPrintableWithChar_(ch);
}

+ (jboolean)isAsciiControlWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiControlWithChar_(ch);
}

+ (jboolean)isAsciiAlphaWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiAlphaWithChar_(ch);
}

+ (jboolean)isAsciiAlphaUpperWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiAlphaUpperWithChar_(ch);
}

+ (jboolean)isAsciiAlphaLowerWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiAlphaLowerWithChar_(ch);
}

+ (jboolean)isAsciiNumericWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiNumericWithChar_(ch);
}

+ (jboolean)isAsciiAlphanumericWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharUtils_isAsciiAlphanumericWithChar_(ch);
}

+ (jint)compareWithChar:(jchar)x
               withChar:(jchar)y {
  return OrgApacheCommonsLang3CharUtils_compareWithChar_withChar_(x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharacter;", 0x9, 0, 1, -1, -1, 2, -1 },
    { NULL, "LJavaLangCharacter;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 4, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 19, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toCharacterObjectWithChar:);
  methods[2].selector = @selector(toCharacterObjectWithNSString:);
  methods[3].selector = @selector(toCharWithJavaLangCharacter:);
  methods[4].selector = @selector(toCharWithJavaLangCharacter:withChar:);
  methods[5].selector = @selector(toCharWithNSString:);
  methods[6].selector = @selector(toCharWithNSString:withChar:);
  methods[7].selector = @selector(toIntValueWithChar:);
  methods[8].selector = @selector(toIntValueWithChar:withInt:);
  methods[9].selector = @selector(toIntValueWithJavaLangCharacter:);
  methods[10].selector = @selector(toIntValueWithJavaLangCharacter:withInt:);
  methods[11].selector = @selector(toStringWithChar:);
  methods[12].selector = @selector(toStringWithJavaLangCharacter:);
  methods[13].selector = @selector(unicodeEscapedWithChar:);
  methods[14].selector = @selector(unicodeEscapedWithJavaLangCharacter:);
  methods[15].selector = @selector(isAsciiWithChar:);
  methods[16].selector = @selector(isAsciiPrintableWithChar:);
  methods[17].selector = @selector(isAsciiControlWithChar:);
  methods[18].selector = @selector(isAsciiAlphaWithChar:);
  methods[19].selector = @selector(isAsciiAlphaUpperWithChar:);
  methods[20].selector = @selector(isAsciiAlphaLowerWithChar:);
  methods[21].selector = @selector(isAsciiNumericWithChar:);
  methods[22].selector = @selector(isAsciiAlphanumericWithChar:);
  methods[23].selector = @selector(compareWithChar:withChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CHAR_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "LF", "C", .constantValue.asUnichar = OrgApacheCommonsLang3CharUtils_LF, 0x19, -1, -1, -1, -1 },
    { "CR", "C", .constantValue.asUnichar = OrgApacheCommonsLang3CharUtils_CR, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toCharacterObject", "C", (void *)&OrgApacheCommonsLang3CharUtils__Annotations$0, "LNSString;", "toChar", "LJavaLangCharacter;", "LJavaLangCharacter;C", "LNSString;C", "toIntValue", "CI", "LJavaLangCharacter;I", "toString", "unicodeEscaped", "isAscii", "isAsciiPrintable", "isAsciiControl", "isAsciiAlpha", "isAsciiAlphaUpper", "isAsciiAlphaLower", "isAsciiNumeric", "isAsciiAlphanumeric", "compare", "CC", &OrgApacheCommonsLang3CharUtils_CHAR_STRING_ARRAY, &OrgApacheCommonsLang3CharUtils_HEX_DIGITS };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3CharUtils = { "CharUtils", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x1, 24, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3CharUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3CharUtils class]) {
    OrgApacheCommonsLang3CharUtils_CHAR_STRING_ARRAY = [IOSObjectArray newArrayWithLength:128 type:NSString_class_()];
    OrgApacheCommonsLang3CharUtils_HEX_DIGITS = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
    {
      for (jchar c = 0; c < OrgApacheCommonsLang3CharUtils_CHAR_STRING_ARRAY->size_; c++) {
        (void) IOSObjectArray_Set(OrgApacheCommonsLang3CharUtils_CHAR_STRING_ARRAY, c, NSString_java_valueOfChar_(c));
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3CharUtils)
  }
}

@end

void OrgApacheCommonsLang3CharUtils_init(OrgApacheCommonsLang3CharUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3CharUtils *new_OrgApacheCommonsLang3CharUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3CharUtils, init)
}

OrgApacheCommonsLang3CharUtils *create_OrgApacheCommonsLang3CharUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3CharUtils, init)
}

JavaLangCharacter *OrgApacheCommonsLang3CharUtils_toCharacterObjectWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return JavaLangCharacter_valueOfWithChar_(ch);
}

JavaLangCharacter *OrgApacheCommonsLang3CharUtils_toCharacterObjectWithNSString_(NSString *str) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return nil;
  }
  return JavaLangCharacter_valueOfWithChar_([((NSString *) nil_chk(str)) charAtWithInt:0]);
}

jchar OrgApacheCommonsLang3CharUtils_toCharWithJavaLangCharacter_(JavaLangCharacter *ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Character must not be null");
  }
  return [ch charValue];
}

jchar OrgApacheCommonsLang3CharUtils_toCharWithJavaLangCharacter_withChar_(JavaLangCharacter *ch, jchar defaultValue) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch == nil) {
    return defaultValue;
  }
  return [ch charValue];
}

jchar OrgApacheCommonsLang3CharUtils_toCharWithNSString_(NSString *str) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The String must not be empty");
  }
  return [((NSString *) nil_chk(str)) charAtWithInt:0];
}

jchar OrgApacheCommonsLang3CharUtils_toCharWithNSString_withChar_(NSString *str, jchar defaultValue) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return defaultValue;
  }
  return [((NSString *) nil_chk(str)) charAtWithInt:0];
}

jint OrgApacheCommonsLang3CharUtils_toIntValueWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (OrgApacheCommonsLang3CharUtils_isAsciiNumericWithChar_(ch) == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @"The character ", ch, @" is not in the range '0' - '9'"));
  }
  return ch - 48;
}

jint OrgApacheCommonsLang3CharUtils_toIntValueWithChar_withInt_(jchar ch, jint defaultValue) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (OrgApacheCommonsLang3CharUtils_isAsciiNumericWithChar_(ch) == false) {
    return defaultValue;
  }
  return ch - 48;
}

jint OrgApacheCommonsLang3CharUtils_toIntValueWithJavaLangCharacter_(JavaLangCharacter *ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The character must not be null");
  }
  return OrgApacheCommonsLang3CharUtils_toIntValueWithChar_([ch charValue]);
}

jint OrgApacheCommonsLang3CharUtils_toIntValueWithJavaLangCharacter_withInt_(JavaLangCharacter *ch, jint defaultValue) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch == nil) {
    return defaultValue;
  }
  return OrgApacheCommonsLang3CharUtils_toIntValueWithChar_withInt_([ch charValue], defaultValue);
}

NSString *OrgApacheCommonsLang3CharUtils_toStringWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch < 128) {
    return IOSObjectArray_Get(nil_chk(OrgApacheCommonsLang3CharUtils_CHAR_STRING_ARRAY), ch);
  }
  return [NSString java_stringWithCharacters:[IOSCharArray newArrayWithChars:(jchar[]){ ch } count:1]];
}

NSString *OrgApacheCommonsLang3CharUtils_toStringWithJavaLangCharacter_(JavaLangCharacter *ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3CharUtils_toStringWithChar_([ch charValue]);
}

NSString *OrgApacheCommonsLang3CharUtils_unicodeEscapedWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(6);
  (void) [sb appendWithNSString:@"\\u"];
  (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(OrgApacheCommonsLang3CharUtils_HEX_DIGITS), (JreRShift32(ch, 12)) & 15)];
  (void) [sb appendWithChar:IOSCharArray_Get(OrgApacheCommonsLang3CharUtils_HEX_DIGITS, (JreRShift32(ch, 8)) & 15)];
  (void) [sb appendWithChar:IOSCharArray_Get(OrgApacheCommonsLang3CharUtils_HEX_DIGITS, (JreRShift32(ch, 4)) & 15)];
  (void) [sb appendWithChar:IOSCharArray_Get(OrgApacheCommonsLang3CharUtils_HEX_DIGITS, (ch) & 15)];
  return [sb description];
}

NSString *OrgApacheCommonsLang3CharUtils_unicodeEscapedWithJavaLangCharacter_(JavaLangCharacter *ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  if (ch == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3CharUtils_unicodeEscapedWithChar_([ch charValue]);
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return ch < 128;
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiPrintableWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return ch >= 32 && ch < 127;
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiControlWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return ch < 32 || ch == 127;
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiAlphaWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return OrgApacheCommonsLang3CharUtils_isAsciiAlphaUpperWithChar_(ch) || OrgApacheCommonsLang3CharUtils_isAsciiAlphaLowerWithChar_(ch);
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiAlphaUpperWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return ch >= 'A' && ch <= 'Z';
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiAlphaLowerWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return ch >= 'a' && ch <= 'z';
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiNumericWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return ch >= '0' && ch <= '9';
}

jboolean OrgApacheCommonsLang3CharUtils_isAsciiAlphanumericWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return OrgApacheCommonsLang3CharUtils_isAsciiAlphaWithChar_(ch) || OrgApacheCommonsLang3CharUtils_isAsciiNumericWithChar_(ch);
}

jint OrgApacheCommonsLang3CharUtils_compareWithChar_withChar_(jchar x, jchar y) {
  OrgApacheCommonsLang3CharUtils_initialize();
  return x - y;
}

IOSObjectArray *OrgApacheCommonsLang3CharUtils__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3CharUtils)
