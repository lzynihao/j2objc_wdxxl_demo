//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/text/StrTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/StringUtils.h"
#include "org/apache/commons/lang3/text/StrBuilder.h"
#include "org/apache/commons/lang3/text/StrMatcher.h"
#include "org/apache/commons/lang3/text/StrTokenizer.h"

@interface OrgApacheCommonsLang3TextStrTokenizer () {
 @public
  IOSCharArray *chars_;
  IOSObjectArray *tokens_;
  jint tokenPos_;
  OrgApacheCommonsLang3TextStrMatcher *delimMatcher_;
  OrgApacheCommonsLang3TextStrMatcher *quoteMatcher_;
  OrgApacheCommonsLang3TextStrMatcher *ignoredMatcher_;
  OrgApacheCommonsLang3TextStrMatcher *trimmerMatcher_;
  jboolean emptyAsNull_;
  jboolean ignoreEmptyTokens_;
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getCSVClone;

+ (OrgApacheCommonsLang3TextStrTokenizer *)getTSVClone;

- (void)checkTokenized;

- (void)addTokenWithJavaUtilList:(id<JavaUtilList>)list
                    withNSString:(NSString *)tok;

- (jint)readNextTokenWithCharArray:(IOSCharArray *)srcChars
                           withInt:(jint)start
                           withInt:(jint)len
withOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)workArea
                  withJavaUtilList:(id<JavaUtilList>)tokenList;

- (jint)readWithQuotesWithCharArray:(IOSCharArray *)srcChars
                            withInt:(jint)start
                            withInt:(jint)len
withOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)workArea
                   withJavaUtilList:(id<JavaUtilList>)tokenList
                            withInt:(jint)quoteStart
                            withInt:(jint)quoteLen;

- (jboolean)isQuoteWithCharArray:(IOSCharArray *)srcChars
                         withInt:(jint)pos
                         withInt:(jint)len
                         withInt:(jint)quoteStart
                         withInt:(jint)quoteLen;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrTokenizer, chars_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrTokenizer, tokens_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrTokenizer, delimMatcher_, OrgApacheCommonsLang3TextStrMatcher *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrTokenizer, quoteMatcher_, OrgApacheCommonsLang3TextStrMatcher *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrTokenizer, ignoredMatcher_, OrgApacheCommonsLang3TextStrMatcher *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrTokenizer, trimmerMatcher_, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_get_CSV_TOKENIZER_PROTOTYPE();
static OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrTokenizer, CSV_TOKENIZER_PROTOTYPE, OrgApacheCommonsLang3TextStrTokenizer *)

inline OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_get_TSV_TOKENIZER_PROTOTYPE();
static OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrTokenizer, TSV_TOKENIZER_PROTOTYPE, OrgApacheCommonsLang3TextStrTokenizer *)

__attribute__((unused)) static OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getCSVClone();

__attribute__((unused)) static OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getTSVClone();

__attribute__((unused)) static void OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(OrgApacheCommonsLang3TextStrTokenizer *self);

__attribute__((unused)) static void OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(OrgApacheCommonsLang3TextStrTokenizer *self, id<JavaUtilList> list, NSString *tok);

__attribute__((unused)) static jint OrgApacheCommonsLang3TextStrTokenizer_readNextTokenWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *srcChars, jint start, jint len, OrgApacheCommonsLang3TextStrBuilder *workArea, id<JavaUtilList> tokenList);

__attribute__((unused)) static jint OrgApacheCommonsLang3TextStrTokenizer_readWithQuotesWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_withInt_withInt_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *srcChars, jint start, jint len, OrgApacheCommonsLang3TextStrBuilder *workArea, id<JavaUtilList> tokenList, jint quoteStart, jint quoteLen);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3TextStrTokenizer_isQuoteWithCharArray_withInt_withInt_withInt_withInt_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *srcChars, jint pos, jint len, jint quoteStart, jint quoteLen);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TextStrTokenizer)

@implementation OrgApacheCommonsLang3TextStrTokenizer

+ (OrgApacheCommonsLang3TextStrTokenizer *)getCSVClone {
  return OrgApacheCommonsLang3TextStrTokenizer_getCSVClone();
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getCSVInstance {
  return OrgApacheCommonsLang3TextStrTokenizer_getCSVInstance();
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getCSVInstanceWithNSString:(NSString *)input {
  return OrgApacheCommonsLang3TextStrTokenizer_getCSVInstanceWithNSString_(input);
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getCSVInstanceWithCharArray:(IOSCharArray *)input {
  return OrgApacheCommonsLang3TextStrTokenizer_getCSVInstanceWithCharArray_(input);
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getTSVClone {
  return OrgApacheCommonsLang3TextStrTokenizer_getTSVClone();
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getTSVInstance {
  return OrgApacheCommonsLang3TextStrTokenizer_getTSVInstance();
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getTSVInstanceWithNSString:(NSString *)input {
  return OrgApacheCommonsLang3TextStrTokenizer_getTSVInstanceWithNSString_(input);
}

+ (OrgApacheCommonsLang3TextStrTokenizer *)getTSVInstanceWithCharArray:(IOSCharArray *)input {
  return OrgApacheCommonsLang3TextStrTokenizer_getTSVInstanceWithCharArray_(input);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextStrTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)input {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(self, input);
  return self;
}

- (instancetype)initWithNSString:(NSString *)input
                        withChar:(jchar)delim {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_(self, input, delim);
  return self;
}

- (instancetype)initWithNSString:(NSString *)input
                    withNSString:(NSString *)delim {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withNSString_(self, input, delim);
  return self;
}

- (instancetype)initWithNSString:(NSString *)input
withOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)delim {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_(self, input, delim);
  return self;
}

- (instancetype)initWithNSString:(NSString *)input
                        withChar:(jchar)delim
                        withChar:(jchar)quote {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_withChar_(self, input, delim, quote);
  return self;
}

- (instancetype)initWithNSString:(NSString *)input
withOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)delim
withOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)quote {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(self, input, delim, quote);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)input {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(self, input);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)input
                         withChar:(jchar)delim {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_(self, input, delim);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)input
                     withNSString:(NSString *)delim {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withNSString_(self, input, delim);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)input
withOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)delim {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_(self, input, delim);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)input
                         withChar:(jchar)delim
                         withChar:(jchar)quote {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_withChar_(self, input, delim, quote);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)input
withOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)delim
withOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)quote {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(self, input, delim, quote);
  return self;
}

- (jint)size {
  OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(self);
  return ((IOSObjectArray *) nil_chk(tokens_))->size_;
}

- (NSString *)nextToken {
  if ([self hasNext]) {
    return IOSObjectArray_Get(nil_chk(tokens_), tokenPos_++);
  }
  return nil;
}

- (NSString *)previousToken {
  if ([self hasPrevious]) {
    return IOSObjectArray_Get(nil_chk(tokens_), --tokenPos_);
  }
  return nil;
}

- (IOSObjectArray *)getTokenArray {
  OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(self);
  return [((IOSObjectArray *) nil_chk(tokens_)) java_clone];
}

- (id<JavaUtilList>)getTokenList {
  OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(self);
  id<JavaUtilList> list = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(tokens_))->size_);
  {
    IOSObjectArray *a__ = tokens_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      [list addWithId:element];
    }
  }
  return list;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)reset {
  tokenPos_ = 0;
  tokens_ = nil;
  return self;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)resetWithNSString:(NSString *)input {
  (void) [self reset];
  if (input != nil) {
    self->chars_ = [input java_toCharArray];
  }
  else {
    self->chars_ = nil;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)resetWithCharArray:(IOSCharArray *)input {
  (void) [self reset];
  self->chars_ = OrgApacheCommonsLang3ArrayUtils_cloneWithCharArray_(input);
  return self;
}

- (jboolean)hasNext {
  OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(self);
  return tokenPos_ < ((IOSObjectArray *) nil_chk(tokens_))->size_;
}

- (NSString *)next {
  if ([self hasNext]) {
    return IOSObjectArray_Get(nil_chk(tokens_), tokenPos_++);
  }
  @throw new_JavaUtilNoSuchElementException_init();
}

- (jint)nextIndex {
  return tokenPos_;
}

- (jboolean)hasPrevious {
  OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(self);
  return tokenPos_ > 0;
}

- (NSString *)previous {
  if ([self hasPrevious]) {
    return IOSObjectArray_Get(nil_chk(tokens_), --tokenPos_);
  }
  @throw new_JavaUtilNoSuchElementException_init();
}

- (jint)previousIndex {
  return tokenPos_ - 1;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"remove() is unsupported");
}

- (void)setWithId:(NSString *)obj {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"set() is unsupported");
}

- (void)addWithId:(NSString *)obj {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"add() is unsupported");
}

- (void)checkTokenized {
  OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(self);
}

- (id<JavaUtilList>)tokenizeWithCharArray:(IOSCharArray *)srcChars
                                  withInt:(jint)offset
                                  withInt:(jint)count {
  if (srcChars == nil || count == 0) {
    return JavaUtilCollections_emptyList();
  }
  OrgApacheCommonsLang3TextStrBuilder *buf = new_OrgApacheCommonsLang3TextStrBuilder_init();
  id<JavaUtilList> tokenList = new_JavaUtilArrayList_init();
  jint pos = offset;
  while (pos >= 0 && pos < count) {
    pos = OrgApacheCommonsLang3TextStrTokenizer_readNextTokenWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_(self, srcChars, pos, count, buf, tokenList);
    if (pos >= count) {
      OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(self, tokenList, @"");
    }
  }
  return tokenList;
}

- (void)addTokenWithJavaUtilList:(id<JavaUtilList>)list
                    withNSString:(NSString *)tok {
  OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(self, list, tok);
}

- (jint)readNextTokenWithCharArray:(IOSCharArray *)srcChars
                           withInt:(jint)start
                           withInt:(jint)len
withOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)workArea
                  withJavaUtilList:(id<JavaUtilList>)tokenList {
  return OrgApacheCommonsLang3TextStrTokenizer_readNextTokenWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_(self, srcChars, start, len, workArea, tokenList);
}

- (jint)readWithQuotesWithCharArray:(IOSCharArray *)srcChars
                            withInt:(jint)start
                            withInt:(jint)len
withOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)workArea
                   withJavaUtilList:(id<JavaUtilList>)tokenList
                            withInt:(jint)quoteStart
                            withInt:(jint)quoteLen {
  return OrgApacheCommonsLang3TextStrTokenizer_readWithQuotesWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_withInt_withInt_(self, srcChars, start, len, workArea, tokenList, quoteStart, quoteLen);
}

- (jboolean)isQuoteWithCharArray:(IOSCharArray *)srcChars
                         withInt:(jint)pos
                         withInt:(jint)len
                         withInt:(jint)quoteStart
                         withInt:(jint)quoteLen {
  return OrgApacheCommonsLang3TextStrTokenizer_isQuoteWithCharArray_withInt_withInt_withInt_withInt_(self, srcChars, pos, len, quoteStart, quoteLen);
}

- (OrgApacheCommonsLang3TextStrMatcher *)getDelimiterMatcher {
  return self->delimMatcher_;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)delim {
  if (delim == nil) {
    self->delimMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  }
  else {
    self->delimMatcher_ = delim;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setDelimiterCharWithChar:(jchar)delim {
  return [self setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_charMatcherWithChar_(delim)];
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setDelimiterStringWithNSString:(NSString *)delim {
  return [self setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_stringMatcherWithNSString_(delim)];
}

- (OrgApacheCommonsLang3TextStrMatcher *)getQuoteMatcher {
  return quoteMatcher_;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)quote {
  if (quote != nil) {
    self->quoteMatcher_ = quote;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setQuoteCharWithChar:(jchar)quote {
  return [self setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_charMatcherWithChar_(quote)];
}

- (OrgApacheCommonsLang3TextStrMatcher *)getIgnoredMatcher {
  return ignoredMatcher_;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setIgnoredMatcherWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)ignored {
  if (ignored != nil) {
    self->ignoredMatcher_ = ignored;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setIgnoredCharWithChar:(jchar)ignored {
  return [self setIgnoredMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_charMatcherWithChar_(ignored)];
}

- (OrgApacheCommonsLang3TextStrMatcher *)getTrimmerMatcher {
  return trimmerMatcher_;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setTrimmerMatcherWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)trimmer {
  if (trimmer != nil) {
    self->trimmerMatcher_ = trimmer;
  }
  return self;
}

- (jboolean)isEmptyTokenAsNull {
  return self->emptyAsNull_;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setEmptyTokenAsNullWithBoolean:(jboolean)emptyAsNull {
  self->emptyAsNull_ = emptyAsNull;
  return self;
}

- (jboolean)isIgnoreEmptyTokens {
  return ignoreEmptyTokens_;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)setIgnoreEmptyTokensWithBoolean:(jboolean)ignoreEmptyTokens {
  self->ignoreEmptyTokens_ = ignoreEmptyTokens;
  return self;
}

- (NSString *)getContent {
  if (chars_ == nil) {
    return nil;
  }
  return [NSString java_stringWithCharacters:chars_];
}

- (id)java_clone {
  @try {
    return [self cloneReset];
  }
  @catch (JavaLangCloneNotSupportedException *ex) {
    return nil;
  }
}

- (id)cloneReset {
  OrgApacheCommonsLang3TextStrTokenizer *cloned = (OrgApacheCommonsLang3TextStrTokenizer *) cast_chk([super java_clone], [OrgApacheCommonsLang3TextStrTokenizer class]);
  if (((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(cloned))->chars_ != nil) {
    cloned->chars_ = [cloned->chars_ java_clone];
  }
  (void) [cloned reset];
  return cloned;
}

- (NSString *)description {
  if (tokens_ == nil) {
    return @"StrTokenizer[not tokenized yet]";
  }
  return JreStrcat("$@", @"StrTokenizer", [self getTokenList]);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, 23, -1, -1 },
    { NULL, "I", 0x2, 24, 25, -1, 26, -1, -1 },
    { NULL, "I", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "Z", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 37, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 38, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 39, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 40, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 41, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, 44, 43, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 45, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, 46, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 47, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getCSVClone);
  methods[1].selector = @selector(getCSVInstance);
  methods[2].selector = @selector(getCSVInstanceWithNSString:);
  methods[3].selector = @selector(getCSVInstanceWithCharArray:);
  methods[4].selector = @selector(getTSVClone);
  methods[5].selector = @selector(getTSVInstance);
  methods[6].selector = @selector(getTSVInstanceWithNSString:);
  methods[7].selector = @selector(getTSVInstanceWithCharArray:);
  methods[8].selector = @selector(init);
  methods[9].selector = @selector(initWithNSString:);
  methods[10].selector = @selector(initWithNSString:withChar:);
  methods[11].selector = @selector(initWithNSString:withNSString:);
  methods[12].selector = @selector(initWithNSString:withOrgApacheCommonsLang3TextStrMatcher:);
  methods[13].selector = @selector(initWithNSString:withChar:withChar:);
  methods[14].selector = @selector(initWithNSString:withOrgApacheCommonsLang3TextStrMatcher:withOrgApacheCommonsLang3TextStrMatcher:);
  methods[15].selector = @selector(initWithCharArray:);
  methods[16].selector = @selector(initWithCharArray:withChar:);
  methods[17].selector = @selector(initWithCharArray:withNSString:);
  methods[18].selector = @selector(initWithCharArray:withOrgApacheCommonsLang3TextStrMatcher:);
  methods[19].selector = @selector(initWithCharArray:withChar:withChar:);
  methods[20].selector = @selector(initWithCharArray:withOrgApacheCommonsLang3TextStrMatcher:withOrgApacheCommonsLang3TextStrMatcher:);
  methods[21].selector = @selector(size);
  methods[22].selector = @selector(nextToken);
  methods[23].selector = @selector(previousToken);
  methods[24].selector = @selector(getTokenArray);
  methods[25].selector = @selector(getTokenList);
  methods[26].selector = @selector(reset);
  methods[27].selector = @selector(resetWithNSString:);
  methods[28].selector = @selector(resetWithCharArray:);
  methods[29].selector = @selector(hasNext);
  methods[30].selector = @selector(next);
  methods[31].selector = @selector(nextIndex);
  methods[32].selector = @selector(hasPrevious);
  methods[33].selector = @selector(previous);
  methods[34].selector = @selector(previousIndex);
  methods[35].selector = @selector(remove);
  methods[36].selector = @selector(setWithId:);
  methods[37].selector = @selector(addWithId:);
  methods[38].selector = @selector(checkTokenized);
  methods[39].selector = @selector(tokenizeWithCharArray:withInt:withInt:);
  methods[40].selector = @selector(addTokenWithJavaUtilList:withNSString:);
  methods[41].selector = @selector(readNextTokenWithCharArray:withInt:withInt:withOrgApacheCommonsLang3TextStrBuilder:withJavaUtilList:);
  methods[42].selector = @selector(readWithQuotesWithCharArray:withInt:withInt:withOrgApacheCommonsLang3TextStrBuilder:withJavaUtilList:withInt:withInt:);
  methods[43].selector = @selector(isQuoteWithCharArray:withInt:withInt:withInt:withInt:);
  methods[44].selector = @selector(getDelimiterMatcher);
  methods[45].selector = @selector(setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[46].selector = @selector(setDelimiterCharWithChar:);
  methods[47].selector = @selector(setDelimiterStringWithNSString:);
  methods[48].selector = @selector(getQuoteMatcher);
  methods[49].selector = @selector(setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[50].selector = @selector(setQuoteCharWithChar:);
  methods[51].selector = @selector(getIgnoredMatcher);
  methods[52].selector = @selector(setIgnoredMatcherWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[53].selector = @selector(setIgnoredCharWithChar:);
  methods[54].selector = @selector(getTrimmerMatcher);
  methods[55].selector = @selector(setTrimmerMatcherWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[56].selector = @selector(isEmptyTokenAsNull);
  methods[57].selector = @selector(setEmptyTokenAsNullWithBoolean:);
  methods[58].selector = @selector(isIgnoreEmptyTokens);
  methods[59].selector = @selector(setIgnoreEmptyTokensWithBoolean:);
  methods[60].selector = @selector(getContent);
  methods[61].selector = @selector(java_clone);
  methods[62].selector = @selector(cloneReset);
  methods[63].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CSV_TOKENIZER_PROTOTYPE", "LOrgApacheCommonsLang3TextStrTokenizer;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "TSV_TOKENIZER_PROTOTYPE", "LOrgApacheCommonsLang3TextStrTokenizer;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "chars_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokens_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delimMatcher_", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "quoteMatcher_", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoredMatcher_", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trimmerMatcher_", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "emptyAsNull_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoreEmptyTokens_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getCSVInstance", "LNSString;", "[C", "getTSVInstance", "LNSString;C", "LNSString;LNSString;", "LNSString;LOrgApacheCommonsLang3TextStrMatcher;", "LNSString;CC", "LNSString;LOrgApacheCommonsLang3TextStrMatcher;LOrgApacheCommonsLang3TextStrMatcher;", "[CC", "[CLNSString;", "[CLOrgApacheCommonsLang3TextStrMatcher;", "[CCC", "[CLOrgApacheCommonsLang3TextStrMatcher;LOrgApacheCommonsLang3TextStrMatcher;", "()Ljava/util/List<Ljava/lang/String;>;", "reset", "set", "add", "tokenize", "[CII", "([CII)Ljava/util/List<Ljava/lang/String;>;", "addToken", "LJavaUtilList;LNSString;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/lang/String;)V", "readNextToken", "[CIILOrgApacheCommonsLang3TextStrBuilder;LJavaUtilList;", "([CIILorg/apache/commons/lang3/text/StrBuilder;Ljava/util/List<Ljava/lang/String;>;)I", "readWithQuotes", "[CIILOrgApacheCommonsLang3TextStrBuilder;LJavaUtilList;II", "([CIILorg/apache/commons/lang3/text/StrBuilder;Ljava/util/List<Ljava/lang/String;>;II)I", "isQuote", "[CIIII", "setDelimiterMatcher", "LOrgApacheCommonsLang3TextStrMatcher;", "setDelimiterChar", "C", "setDelimiterString", "setQuoteMatcher", "setQuoteChar", "setIgnoredMatcher", "setIgnoredChar", "setTrimmerMatcher", "setEmptyTokenAsNull", "Z", "setIgnoreEmptyTokens", "clone", "LJavaLangCloneNotSupportedException;", "toString", &OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE, &OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE, "Ljava/lang/Object;Ljava/util/ListIterator<Ljava/lang/String;>;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrTokenizer = { "StrTokenizer", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x1, 64, 11, -1, -1, -1, 50, -1 };
  return &_OrgApacheCommonsLang3TextStrTokenizer;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TextStrTokenizer class]) {
    {
      OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE = new_OrgApacheCommonsLang3TextStrTokenizer_init();
      (void) [OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_commaMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_doubleQuoteMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE setIgnoredMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_noneMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE setTrimmerMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_trimMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE setEmptyTokenAsNullWithBoolean:false];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE setIgnoreEmptyTokensWithBoolean:false];
      OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE = new_OrgApacheCommonsLang3TextStrTokenizer_init();
      (void) [OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_tabMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_doubleQuoteMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE setIgnoredMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_noneMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE setTrimmerMatcherWithOrgApacheCommonsLang3TextStrMatcher:OrgApacheCommonsLang3TextStrMatcher_trimMatcher()];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE setEmptyTokenAsNullWithBoolean:false];
      (void) [OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE setIgnoreEmptyTokensWithBoolean:false];
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TextStrTokenizer)
  }
}

@end

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getCSVClone() {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  return (OrgApacheCommonsLang3TextStrTokenizer *) cast_chk([((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(OrgApacheCommonsLang3TextStrTokenizer_CSV_TOKENIZER_PROTOTYPE)) java_clone], [OrgApacheCommonsLang3TextStrTokenizer class]);
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getCSVInstance() {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  return OrgApacheCommonsLang3TextStrTokenizer_getCSVClone();
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getCSVInstanceWithNSString_(NSString *input) {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  OrgApacheCommonsLang3TextStrTokenizer *tok = OrgApacheCommonsLang3TextStrTokenizer_getCSVClone();
  (void) [((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(tok)) resetWithNSString:input];
  return tok;
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getCSVInstanceWithCharArray_(IOSCharArray *input) {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  OrgApacheCommonsLang3TextStrTokenizer *tok = OrgApacheCommonsLang3TextStrTokenizer_getCSVClone();
  (void) [((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(tok)) resetWithCharArray:input];
  return tok;
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getTSVClone() {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  return (OrgApacheCommonsLang3TextStrTokenizer *) cast_chk([((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(OrgApacheCommonsLang3TextStrTokenizer_TSV_TOKENIZER_PROTOTYPE)) java_clone], [OrgApacheCommonsLang3TextStrTokenizer class]);
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getTSVInstance() {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  return OrgApacheCommonsLang3TextStrTokenizer_getTSVClone();
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getTSVInstanceWithNSString_(NSString *input) {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  OrgApacheCommonsLang3TextStrTokenizer *tok = OrgApacheCommonsLang3TextStrTokenizer_getTSVClone();
  (void) [((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(tok)) resetWithNSString:input];
  return tok;
}

OrgApacheCommonsLang3TextStrTokenizer *OrgApacheCommonsLang3TextStrTokenizer_getTSVInstanceWithCharArray_(IOSCharArray *input) {
  OrgApacheCommonsLang3TextStrTokenizer_initialize();
  OrgApacheCommonsLang3TextStrTokenizer *tok = OrgApacheCommonsLang3TextStrTokenizer_getTSVClone();
  (void) [((OrgApacheCommonsLang3TextStrTokenizer *) nil_chk(tok)) resetWithCharArray:input];
  return tok;
}

void OrgApacheCommonsLang3TextStrTokenizer_init(OrgApacheCommonsLang3TextStrTokenizer *self) {
  NSObject_init(self);
  self->delimMatcher_ = OrgApacheCommonsLang3TextStrMatcher_splitMatcher();
  self->quoteMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->ignoredMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->trimmerMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->emptyAsNull_ = false;
  self->ignoreEmptyTokens_ = true;
  self->chars_ = nil;
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, init)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, init)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(OrgApacheCommonsLang3TextStrTokenizer *self, NSString *input) {
  NSObject_init(self);
  self->delimMatcher_ = OrgApacheCommonsLang3TextStrMatcher_splitMatcher();
  self->quoteMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->ignoredMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->trimmerMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->emptyAsNull_ = false;
  self->ignoreEmptyTokens_ = true;
  if (input != nil) {
    self->chars_ = [input java_toCharArray];
  }
  else {
    self->chars_ = nil;
  }
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(NSString *input) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_, input)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(NSString *input) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_, input)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_(OrgApacheCommonsLang3TextStrTokenizer *self, NSString *input, jchar delim) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(self, input);
  (void) [self setDelimiterCharWithChar:delim];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_(NSString *input, jchar delim) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withChar_, input, delim)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_(NSString *input, jchar delim) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withChar_, input, delim)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withNSString_(OrgApacheCommonsLang3TextStrTokenizer *self, NSString *input, NSString *delim) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(self, input);
  (void) [self setDelimiterStringWithNSString:delim];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withNSString_(NSString *input, NSString *delim) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withNSString_, input, delim)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withNSString_(NSString *input, NSString *delim) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withNSString_, input, delim)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_(OrgApacheCommonsLang3TextStrTokenizer *self, NSString *input, OrgApacheCommonsLang3TextStrMatcher *delim) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_(self, input);
  (void) [self setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:delim];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_(NSString *input, OrgApacheCommonsLang3TextStrMatcher *delim) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_, input, delim)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_(NSString *input, OrgApacheCommonsLang3TextStrMatcher *delim) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_, input, delim)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_withChar_(OrgApacheCommonsLang3TextStrTokenizer *self, NSString *input, jchar delim, jchar quote) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_(self, input, delim);
  (void) [self setQuoteCharWithChar:quote];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_withChar_(NSString *input, jchar delim, jchar quote) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withChar_withChar_, input, delim, quote)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withChar_withChar_(NSString *input, jchar delim, jchar quote) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withChar_withChar_, input, delim, quote)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(OrgApacheCommonsLang3TextStrTokenizer *self, NSString *input, OrgApacheCommonsLang3TextStrMatcher *delim, OrgApacheCommonsLang3TextStrMatcher *quote) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_(self, input, delim);
  (void) [self setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:quote];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(NSString *input, OrgApacheCommonsLang3TextStrMatcher *delim, OrgApacheCommonsLang3TextStrMatcher *quote) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_, input, delim, quote)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(NSString *input, OrgApacheCommonsLang3TextStrMatcher *delim, OrgApacheCommonsLang3TextStrMatcher *quote) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithNSString_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_, input, delim, quote)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *input) {
  NSObject_init(self);
  self->delimMatcher_ = OrgApacheCommonsLang3TextStrMatcher_splitMatcher();
  self->quoteMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->ignoredMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->trimmerMatcher_ = OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
  self->emptyAsNull_ = false;
  self->ignoreEmptyTokens_ = true;
  self->chars_ = OrgApacheCommonsLang3ArrayUtils_cloneWithCharArray_(input);
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(IOSCharArray *input) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_, input)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(IOSCharArray *input) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_, input)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *input, jchar delim) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(self, input);
  (void) [self setDelimiterCharWithChar:delim];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_(IOSCharArray *input, jchar delim) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withChar_, input, delim)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_(IOSCharArray *input, jchar delim) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withChar_, input, delim)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withNSString_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *input, NSString *delim) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(self, input);
  (void) [self setDelimiterStringWithNSString:delim];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withNSString_(IOSCharArray *input, NSString *delim) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withNSString_, input, delim)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withNSString_(IOSCharArray *input, NSString *delim) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withNSString_, input, delim)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *input, OrgApacheCommonsLang3TextStrMatcher *delim) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_(self, input);
  (void) [self setDelimiterMatcherWithOrgApacheCommonsLang3TextStrMatcher:delim];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_(IOSCharArray *input, OrgApacheCommonsLang3TextStrMatcher *delim) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_, input, delim)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_(IOSCharArray *input, OrgApacheCommonsLang3TextStrMatcher *delim) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_, input, delim)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_withChar_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *input, jchar delim, jchar quote) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_(self, input, delim);
  (void) [self setQuoteCharWithChar:quote];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_withChar_(IOSCharArray *input, jchar delim, jchar quote) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withChar_withChar_, input, delim, quote)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withChar_withChar_(IOSCharArray *input, jchar delim, jchar quote) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withChar_withChar_, input, delim, quote)
}

void OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *input, OrgApacheCommonsLang3TextStrMatcher *delim, OrgApacheCommonsLang3TextStrMatcher *quote) {
  OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_(self, input, delim);
  (void) [self setQuoteMatcherWithOrgApacheCommonsLang3TextStrMatcher:quote];
}

OrgApacheCommonsLang3TextStrTokenizer *new_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(IOSCharArray *input, OrgApacheCommonsLang3TextStrMatcher *delim, OrgApacheCommonsLang3TextStrMatcher *quote) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_, input, delim, quote)
}

OrgApacheCommonsLang3TextStrTokenizer *create_OrgApacheCommonsLang3TextStrTokenizer_initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_(IOSCharArray *input, OrgApacheCommonsLang3TextStrMatcher *delim, OrgApacheCommonsLang3TextStrMatcher *quote) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrTokenizer, initWithCharArray_withOrgApacheCommonsLang3TextStrMatcher_withOrgApacheCommonsLang3TextStrMatcher_, input, delim, quote)
}

void OrgApacheCommonsLang3TextStrTokenizer_checkTokenized(OrgApacheCommonsLang3TextStrTokenizer *self) {
  if (self->tokens_ == nil) {
    if (self->chars_ == nil) {
      id<JavaUtilList> split = [self tokenizeWithCharArray:nil withInt:0 withInt:0];
      self->tokens_ = [((id<JavaUtilList>) nil_chk(split)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[split size] type:NSString_class_()]];
    }
    else {
      id<JavaUtilList> split = [self tokenizeWithCharArray:self->chars_ withInt:0 withInt:self->chars_->size_];
      self->tokens_ = [((id<JavaUtilList>) nil_chk(split)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[split size] type:NSString_class_()]];
    }
  }
}

void OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(OrgApacheCommonsLang3TextStrTokenizer *self, id<JavaUtilList> list, NSString *tok) {
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(tok)) {
    if ([self isIgnoreEmptyTokens]) {
      return;
    }
    if ([self isEmptyTokenAsNull]) {
      tok = nil;
    }
  }
  [((id<JavaUtilList>) nil_chk(list)) addWithId:tok];
}

jint OrgApacheCommonsLang3TextStrTokenizer_readNextTokenWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *srcChars, jint start, jint len, OrgApacheCommonsLang3TextStrBuilder *workArea, id<JavaUtilList> tokenList) {
  while (start < len) {
    jint removeLen = JavaLangMath_maxWithInt_withInt_([((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getIgnoredMatcher])) isMatchWithCharArray:srcChars withInt:start withInt:start withInt:len], [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getTrimmerMatcher])) isMatchWithCharArray:srcChars withInt:start withInt:start withInt:len]);
    if (removeLen == 0 || [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getDelimiterMatcher])) isMatchWithCharArray:srcChars withInt:start withInt:start withInt:len] > 0 || [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getQuoteMatcher])) isMatchWithCharArray:srcChars withInt:start withInt:start withInt:len] > 0) {
      break;
    }
    start += removeLen;
  }
  if (start >= len) {
    OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(self, tokenList, @"");
    return -1;
  }
  jint delimLen = [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getDelimiterMatcher])) isMatchWithCharArray:srcChars withInt:start withInt:start withInt:len];
  if (delimLen > 0) {
    OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(self, tokenList, @"");
    return start + delimLen;
  }
  jint quoteLen = [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getQuoteMatcher])) isMatchWithCharArray:srcChars withInt:start withInt:start withInt:len];
  if (quoteLen > 0) {
    return OrgApacheCommonsLang3TextStrTokenizer_readWithQuotesWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_withInt_withInt_(self, srcChars, start + quoteLen, len, workArea, tokenList, start, quoteLen);
  }
  return OrgApacheCommonsLang3TextStrTokenizer_readWithQuotesWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_withInt_withInt_(self, srcChars, start, len, workArea, tokenList, 0, 0);
}

jint OrgApacheCommonsLang3TextStrTokenizer_readWithQuotesWithCharArray_withInt_withInt_withOrgApacheCommonsLang3TextStrBuilder_withJavaUtilList_withInt_withInt_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *srcChars, jint start, jint len, OrgApacheCommonsLang3TextStrBuilder *workArea, id<JavaUtilList> tokenList, jint quoteStart, jint quoteLen) {
  (void) [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk(workArea)) clear];
  jint pos = start;
  jboolean quoting = quoteLen > 0;
  jint trimStart = 0;
  while (pos < len) {
    if (quoting) {
      if (OrgApacheCommonsLang3TextStrTokenizer_isQuoteWithCharArray_withInt_withInt_withInt_withInt_(self, srcChars, pos, len, quoteStart, quoteLen)) {
        if (OrgApacheCommonsLang3TextStrTokenizer_isQuoteWithCharArray_withInt_withInt_withInt_withInt_(self, srcChars, pos + quoteLen, len, quoteStart, quoteLen)) {
          (void) [workArea appendWithCharArray:srcChars withInt:pos withInt:quoteLen];
          pos += quoteLen * 2;
          trimStart = [workArea size];
          continue;
        }
        quoting = false;
        pos += quoteLen;
        continue;
      }
      (void) [workArea appendWithChar:IOSCharArray_Get(nil_chk(srcChars), pos++)];
      trimStart = [workArea size];
    }
    else {
      jint delimLen = [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getDelimiterMatcher])) isMatchWithCharArray:srcChars withInt:pos withInt:start withInt:len];
      if (delimLen > 0) {
        OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(self, tokenList, [workArea substringWithInt:0 withInt:trimStart]);
        return pos + delimLen;
      }
      if (quoteLen > 0 && OrgApacheCommonsLang3TextStrTokenizer_isQuoteWithCharArray_withInt_withInt_withInt_withInt_(self, srcChars, pos, len, quoteStart, quoteLen)) {
        quoting = true;
        pos += quoteLen;
        continue;
      }
      jint ignoredLen = [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getIgnoredMatcher])) isMatchWithCharArray:srcChars withInt:pos withInt:start withInt:len];
      if (ignoredLen > 0) {
        pos += ignoredLen;
        continue;
      }
      jint trimmedLen = [((OrgApacheCommonsLang3TextStrMatcher *) nil_chk([self getTrimmerMatcher])) isMatchWithCharArray:srcChars withInt:pos withInt:start withInt:len];
      if (trimmedLen > 0) {
        (void) [workArea appendWithCharArray:srcChars withInt:pos withInt:trimmedLen];
        pos += trimmedLen;
        continue;
      }
      (void) [workArea appendWithChar:IOSCharArray_Get(nil_chk(srcChars), pos++)];
      trimStart = [workArea size];
    }
  }
  OrgApacheCommonsLang3TextStrTokenizer_addTokenWithJavaUtilList_withNSString_(self, tokenList, [workArea substringWithInt:0 withInt:trimStart]);
  return -1;
}

jboolean OrgApacheCommonsLang3TextStrTokenizer_isQuoteWithCharArray_withInt_withInt_withInt_withInt_(OrgApacheCommonsLang3TextStrTokenizer *self, IOSCharArray *srcChars, jint pos, jint len, jint quoteStart, jint quoteLen) {
  for (jint i = 0; i < quoteLen; i++) {
    if (pos + i >= len || IOSCharArray_Get(nil_chk(srcChars), pos + i) != IOSCharArray_Get(srcChars, quoteStart + i)) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrTokenizer)
