//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/Conversion.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/UUID.h"
#include "org/apache/commons/lang3/Conversion.h"

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TTTT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TTTT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TTTT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FTTT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FTTT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FTTT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TFTT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TFTT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TFTT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FFTT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FFTT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FFTT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TTFT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TTFT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TTFT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FTFT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FTFT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FTFT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TFFT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TFFT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TFFT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FFFT();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FFFT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FFFT, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TTTF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TTTF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TTTF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FTTF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FTTF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FTTF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TFTF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TFTF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TFTF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FFTF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FFTF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FFTF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TTFF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TTFF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TTFF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FTFF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FTFF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FTFF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_TFFF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_TFFF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, TFFF, IOSBooleanArray *)

inline IOSBooleanArray *OrgApacheCommonsLang3Conversion_get_FFFF();
static IOSBooleanArray *OrgApacheCommonsLang3Conversion_FFFF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3Conversion, FFFF, IOSBooleanArray *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3Conversion)

@implementation OrgApacheCommonsLang3Conversion

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3Conversion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)hexDigitToIntWithChar:(jchar)hexDigit {
  return OrgApacheCommonsLang3Conversion_hexDigitToIntWithChar_(hexDigit);
}

+ (jint)hexDigitMsb0ToIntWithChar:(jchar)hexDigit {
  return OrgApacheCommonsLang3Conversion_hexDigitMsb0ToIntWithChar_(hexDigit);
}

+ (IOSBooleanArray *)hexDigitToBinaryWithChar:(jchar)hexDigit {
  return OrgApacheCommonsLang3Conversion_hexDigitToBinaryWithChar_(hexDigit);
}

+ (IOSBooleanArray *)hexDigitMsb0ToBinaryWithChar:(jchar)hexDigit {
  return OrgApacheCommonsLang3Conversion_hexDigitMsb0ToBinaryWithChar_(hexDigit);
}

+ (jchar)binaryToHexDigitWithBooleanArray:(IOSBooleanArray *)src {
  return OrgApacheCommonsLang3Conversion_binaryToHexDigitWithBooleanArray_(src);
}

+ (jchar)binaryToHexDigitWithBooleanArray:(IOSBooleanArray *)src
                                  withInt:(jint)srcPos {
  return OrgApacheCommonsLang3Conversion_binaryToHexDigitWithBooleanArray_withInt_(src, srcPos);
}

+ (jchar)binaryToHexDigitMsb0_4bitsWithBooleanArray:(IOSBooleanArray *)src {
  return OrgApacheCommonsLang3Conversion_binaryToHexDigitMsb0_4bitsWithBooleanArray_(src);
}

+ (jchar)binaryToHexDigitMsb0_4bitsWithBooleanArray:(IOSBooleanArray *)src
                                            withInt:(jint)srcPos {
  return OrgApacheCommonsLang3Conversion_binaryToHexDigitMsb0_4bitsWithBooleanArray_withInt_(src, srcPos);
}

+ (jchar)binaryBeMsb0ToHexDigitWithBooleanArray:(IOSBooleanArray *)src {
  return OrgApacheCommonsLang3Conversion_binaryBeMsb0ToHexDigitWithBooleanArray_(src);
}

+ (jchar)binaryBeMsb0ToHexDigitWithBooleanArray:(IOSBooleanArray *)src
                                        withInt:(jint)srcPos {
  return OrgApacheCommonsLang3Conversion_binaryBeMsb0ToHexDigitWithBooleanArray_withInt_(src, srcPos);
}

+ (jchar)intToHexDigitWithInt:(jint)nibble {
  return OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(nibble);
}

+ (jchar)intToHexDigitMsb0WithInt:(jint)nibble {
  return OrgApacheCommonsLang3Conversion_intToHexDigitMsb0WithInt_(nibble);
}

+ (jlong)intArrayToLongWithIntArray:(IOSIntArray *)src
                            withInt:(jint)srcPos
                           withLong:(jlong)dstInit
                            withInt:(jint)dstPos
                            withInt:(jint)nInts {
  return OrgApacheCommonsLang3Conversion_intArrayToLongWithIntArray_withInt_withLong_withInt_withInt_(src, srcPos, dstInit, dstPos, nInts);
}

+ (jlong)shortArrayToLongWithShortArray:(IOSShortArray *)src
                                withInt:(jint)srcPos
                               withLong:(jlong)dstInit
                                withInt:(jint)dstPos
                                withInt:(jint)nShorts {
  return OrgApacheCommonsLang3Conversion_shortArrayToLongWithShortArray_withInt_withLong_withInt_withInt_(src, srcPos, dstInit, dstPos, nShorts);
}

+ (jint)shortArrayToIntWithShortArray:(IOSShortArray *)src
                              withInt:(jint)srcPos
                              withInt:(jint)dstInit
                              withInt:(jint)dstPos
                              withInt:(jint)nShorts {
  return OrgApacheCommonsLang3Conversion_shortArrayToIntWithShortArray_withInt_withInt_withInt_withInt_(src, srcPos, dstInit, dstPos, nShorts);
}

+ (jlong)byteArrayToLongWithByteArray:(IOSByteArray *)src
                              withInt:(jint)srcPos
                             withLong:(jlong)dstInit
                              withInt:(jint)dstPos
                              withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_byteArrayToLongWithByteArray_withInt_withLong_withInt_withInt_(src, srcPos, dstInit, dstPos, nBytes);
}

+ (jint)byteArrayToIntWithByteArray:(IOSByteArray *)src
                            withInt:(jint)srcPos
                            withInt:(jint)dstInit
                            withInt:(jint)dstPos
                            withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_byteArrayToIntWithByteArray_withInt_withInt_withInt_withInt_(src, srcPos, dstInit, dstPos, nBytes);
}

+ (jshort)byteArrayToShortWithByteArray:(IOSByteArray *)src
                                withInt:(jint)srcPos
                              withShort:(jshort)dstInit
                                withInt:(jint)dstPos
                                withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_byteArrayToShortWithByteArray_withInt_withShort_withInt_withInt_(src, srcPos, dstInit, dstPos, nBytes);
}

+ (jlong)hexToLongWithNSString:(NSString *)src
                       withInt:(jint)srcPos
                      withLong:(jlong)dstInit
                       withInt:(jint)dstPos
                       withInt:(jint)nHex {
  return OrgApacheCommonsLang3Conversion_hexToLongWithNSString_withInt_withLong_withInt_withInt_(src, srcPos, dstInit, dstPos, nHex);
}

+ (jint)hexToIntWithNSString:(NSString *)src
                     withInt:(jint)srcPos
                     withInt:(jint)dstInit
                     withInt:(jint)dstPos
                     withInt:(jint)nHex {
  return OrgApacheCommonsLang3Conversion_hexToIntWithNSString_withInt_withInt_withInt_withInt_(src, srcPos, dstInit, dstPos, nHex);
}

+ (jshort)hexToShortWithNSString:(NSString *)src
                         withInt:(jint)srcPos
                       withShort:(jshort)dstInit
                         withInt:(jint)dstPos
                         withInt:(jint)nHex {
  return OrgApacheCommonsLang3Conversion_hexToShortWithNSString_withInt_withShort_withInt_withInt_(src, srcPos, dstInit, dstPos, nHex);
}

+ (jbyte)hexToByteWithNSString:(NSString *)src
                       withInt:(jint)srcPos
                      withByte:(jbyte)dstInit
                       withInt:(jint)dstPos
                       withInt:(jint)nHex {
  return OrgApacheCommonsLang3Conversion_hexToByteWithNSString_withInt_withByte_withInt_withInt_(src, srcPos, dstInit, dstPos, nHex);
}

+ (jlong)binaryToLongWithBooleanArray:(IOSBooleanArray *)src
                              withInt:(jint)srcPos
                             withLong:(jlong)dstInit
                              withInt:(jint)dstPos
                              withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_binaryToLongWithBooleanArray_withInt_withLong_withInt_withInt_(src, srcPos, dstInit, dstPos, nBools);
}

+ (jint)binaryToIntWithBooleanArray:(IOSBooleanArray *)src
                            withInt:(jint)srcPos
                            withInt:(jint)dstInit
                            withInt:(jint)dstPos
                            withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_binaryToIntWithBooleanArray_withInt_withInt_withInt_withInt_(src, srcPos, dstInit, dstPos, nBools);
}

+ (jshort)binaryToShortWithBooleanArray:(IOSBooleanArray *)src
                                withInt:(jint)srcPos
                              withShort:(jshort)dstInit
                                withInt:(jint)dstPos
                                withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_binaryToShortWithBooleanArray_withInt_withShort_withInt_withInt_(src, srcPos, dstInit, dstPos, nBools);
}

+ (jbyte)binaryToByteWithBooleanArray:(IOSBooleanArray *)src
                              withInt:(jint)srcPos
                             withByte:(jbyte)dstInit
                              withInt:(jint)dstPos
                              withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_binaryToByteWithBooleanArray_withInt_withByte_withInt_withInt_(src, srcPos, dstInit, dstPos, nBools);
}

+ (IOSIntArray *)longToIntArrayWithLong:(jlong)src
                                withInt:(jint)srcPos
                           withIntArray:(IOSIntArray *)dst
                                withInt:(jint)dstPos
                                withInt:(jint)nInts {
  return OrgApacheCommonsLang3Conversion_longToIntArrayWithLong_withInt_withIntArray_withInt_withInt_(src, srcPos, dst, dstPos, nInts);
}

+ (IOSShortArray *)longToShortArrayWithLong:(jlong)src
                                    withInt:(jint)srcPos
                             withShortArray:(IOSShortArray *)dst
                                    withInt:(jint)dstPos
                                    withInt:(jint)nShorts {
  return OrgApacheCommonsLang3Conversion_longToShortArrayWithLong_withInt_withShortArray_withInt_withInt_(src, srcPos, dst, dstPos, nShorts);
}

+ (IOSShortArray *)intToShortArrayWithInt:(jint)src
                                  withInt:(jint)srcPos
                           withShortArray:(IOSShortArray *)dst
                                  withInt:(jint)dstPos
                                  withInt:(jint)nShorts {
  return OrgApacheCommonsLang3Conversion_intToShortArrayWithInt_withInt_withShortArray_withInt_withInt_(src, srcPos, dst, dstPos, nShorts);
}

+ (IOSByteArray *)longToByteArrayWithLong:(jlong)src
                                  withInt:(jint)srcPos
                            withByteArray:(IOSByteArray *)dst
                                  withInt:(jint)dstPos
                                  withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_longToByteArrayWithLong_withInt_withByteArray_withInt_withInt_(src, srcPos, dst, dstPos, nBytes);
}

+ (IOSByteArray *)intToByteArrayWithInt:(jint)src
                                withInt:(jint)srcPos
                          withByteArray:(IOSByteArray *)dst
                                withInt:(jint)dstPos
                                withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_intToByteArrayWithInt_withInt_withByteArray_withInt_withInt_(src, srcPos, dst, dstPos, nBytes);
}

+ (IOSByteArray *)shortToByteArrayWithShort:(jshort)src
                                    withInt:(jint)srcPos
                              withByteArray:(IOSByteArray *)dst
                                    withInt:(jint)dstPos
                                    withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_shortToByteArrayWithShort_withInt_withByteArray_withInt_withInt_(src, srcPos, dst, dstPos, nBytes);
}

+ (NSString *)longToHexWithLong:(jlong)src
                        withInt:(jint)srcPos
                   withNSString:(NSString *)dstInit
                        withInt:(jint)dstPos
                        withInt:(jint)nHexs {
  return OrgApacheCommonsLang3Conversion_longToHexWithLong_withInt_withNSString_withInt_withInt_(src, srcPos, dstInit, dstPos, nHexs);
}

+ (NSString *)intToHexWithInt:(jint)src
                      withInt:(jint)srcPos
                 withNSString:(NSString *)dstInit
                      withInt:(jint)dstPos
                      withInt:(jint)nHexs {
  return OrgApacheCommonsLang3Conversion_intToHexWithInt_withInt_withNSString_withInt_withInt_(src, srcPos, dstInit, dstPos, nHexs);
}

+ (NSString *)shortToHexWithShort:(jshort)src
                          withInt:(jint)srcPos
                     withNSString:(NSString *)dstInit
                          withInt:(jint)dstPos
                          withInt:(jint)nHexs {
  return OrgApacheCommonsLang3Conversion_shortToHexWithShort_withInt_withNSString_withInt_withInt_(src, srcPos, dstInit, dstPos, nHexs);
}

+ (NSString *)byteToHexWithByte:(jbyte)src
                        withInt:(jint)srcPos
                   withNSString:(NSString *)dstInit
                        withInt:(jint)dstPos
                        withInt:(jint)nHexs {
  return OrgApacheCommonsLang3Conversion_byteToHexWithByte_withInt_withNSString_withInt_withInt_(src, srcPos, dstInit, dstPos, nHexs);
}

+ (IOSBooleanArray *)longToBinaryWithLong:(jlong)src
                                  withInt:(jint)srcPos
                         withBooleanArray:(IOSBooleanArray *)dst
                                  withInt:(jint)dstPos
                                  withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_longToBinaryWithLong_withInt_withBooleanArray_withInt_withInt_(src, srcPos, dst, dstPos, nBools);
}

+ (IOSBooleanArray *)intToBinaryWithInt:(jint)src
                                withInt:(jint)srcPos
                       withBooleanArray:(IOSBooleanArray *)dst
                                withInt:(jint)dstPos
                                withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_intToBinaryWithInt_withInt_withBooleanArray_withInt_withInt_(src, srcPos, dst, dstPos, nBools);
}

+ (IOSBooleanArray *)shortToBinaryWithShort:(jshort)src
                                    withInt:(jint)srcPos
                           withBooleanArray:(IOSBooleanArray *)dst
                                    withInt:(jint)dstPos
                                    withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_shortToBinaryWithShort_withInt_withBooleanArray_withInt_withInt_(src, srcPos, dst, dstPos, nBools);
}

+ (IOSBooleanArray *)byteToBinaryWithByte:(jbyte)src
                                  withInt:(jint)srcPos
                         withBooleanArray:(IOSBooleanArray *)dst
                                  withInt:(jint)dstPos
                                  withInt:(jint)nBools {
  return OrgApacheCommonsLang3Conversion_byteToBinaryWithByte_withInt_withBooleanArray_withInt_withInt_(src, srcPos, dst, dstPos, nBools);
}

+ (IOSByteArray *)uuidToByteArrayWithJavaUtilUUID:(JavaUtilUUID *)src
                                    withByteArray:(IOSByteArray *)dst
                                          withInt:(jint)dstPos
                                          withInt:(jint)nBytes {
  return OrgApacheCommonsLang3Conversion_uuidToByteArrayWithJavaUtilUUID_withByteArray_withInt_withInt_(src, dst, dstPos, nBytes);
}

+ (JavaUtilUUID *)byteArrayToUuidWithByteArray:(IOSByteArray *)src
                                       withInt:(jint)srcPos {
  return OrgApacheCommonsLang3Conversion_byteArrayToUuidWithByteArray_withInt_(src, srcPos);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 8, 6, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 8, 7, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 9, 6, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 9, 7, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "C", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 29, 30, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 37, 38, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 45, 46, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 47, 48, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 49, 50, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 51, 52, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 53, 54, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 55, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 60, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 61, 62, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 63, 64, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 65, 66, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 67, 68, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 69, 70, -1, -1, -1, -1 },
    { NULL, "LJavaUtilUUID;", 0x9, 71, 72, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hexDigitToIntWithChar:);
  methods[2].selector = @selector(hexDigitMsb0ToIntWithChar:);
  methods[3].selector = @selector(hexDigitToBinaryWithChar:);
  methods[4].selector = @selector(hexDigitMsb0ToBinaryWithChar:);
  methods[5].selector = @selector(binaryToHexDigitWithBooleanArray:);
  methods[6].selector = @selector(binaryToHexDigitWithBooleanArray:withInt:);
  methods[7].selector = @selector(binaryToHexDigitMsb0_4bitsWithBooleanArray:);
  methods[8].selector = @selector(binaryToHexDigitMsb0_4bitsWithBooleanArray:withInt:);
  methods[9].selector = @selector(binaryBeMsb0ToHexDigitWithBooleanArray:);
  methods[10].selector = @selector(binaryBeMsb0ToHexDigitWithBooleanArray:withInt:);
  methods[11].selector = @selector(intToHexDigitWithInt:);
  methods[12].selector = @selector(intToHexDigitMsb0WithInt:);
  methods[13].selector = @selector(intArrayToLongWithIntArray:withInt:withLong:withInt:withInt:);
  methods[14].selector = @selector(shortArrayToLongWithShortArray:withInt:withLong:withInt:withInt:);
  methods[15].selector = @selector(shortArrayToIntWithShortArray:withInt:withInt:withInt:withInt:);
  methods[16].selector = @selector(byteArrayToLongWithByteArray:withInt:withLong:withInt:withInt:);
  methods[17].selector = @selector(byteArrayToIntWithByteArray:withInt:withInt:withInt:withInt:);
  methods[18].selector = @selector(byteArrayToShortWithByteArray:withInt:withShort:withInt:withInt:);
  methods[19].selector = @selector(hexToLongWithNSString:withInt:withLong:withInt:withInt:);
  methods[20].selector = @selector(hexToIntWithNSString:withInt:withInt:withInt:withInt:);
  methods[21].selector = @selector(hexToShortWithNSString:withInt:withShort:withInt:withInt:);
  methods[22].selector = @selector(hexToByteWithNSString:withInt:withByte:withInt:withInt:);
  methods[23].selector = @selector(binaryToLongWithBooleanArray:withInt:withLong:withInt:withInt:);
  methods[24].selector = @selector(binaryToIntWithBooleanArray:withInt:withInt:withInt:withInt:);
  methods[25].selector = @selector(binaryToShortWithBooleanArray:withInt:withShort:withInt:withInt:);
  methods[26].selector = @selector(binaryToByteWithBooleanArray:withInt:withByte:withInt:withInt:);
  methods[27].selector = @selector(longToIntArrayWithLong:withInt:withIntArray:withInt:withInt:);
  methods[28].selector = @selector(longToShortArrayWithLong:withInt:withShortArray:withInt:withInt:);
  methods[29].selector = @selector(intToShortArrayWithInt:withInt:withShortArray:withInt:withInt:);
  methods[30].selector = @selector(longToByteArrayWithLong:withInt:withByteArray:withInt:withInt:);
  methods[31].selector = @selector(intToByteArrayWithInt:withInt:withByteArray:withInt:withInt:);
  methods[32].selector = @selector(shortToByteArrayWithShort:withInt:withByteArray:withInt:withInt:);
  methods[33].selector = @selector(longToHexWithLong:withInt:withNSString:withInt:withInt:);
  methods[34].selector = @selector(intToHexWithInt:withInt:withNSString:withInt:withInt:);
  methods[35].selector = @selector(shortToHexWithShort:withInt:withNSString:withInt:withInt:);
  methods[36].selector = @selector(byteToHexWithByte:withInt:withNSString:withInt:withInt:);
  methods[37].selector = @selector(longToBinaryWithLong:withInt:withBooleanArray:withInt:withInt:);
  methods[38].selector = @selector(intToBinaryWithInt:withInt:withBooleanArray:withInt:withInt:);
  methods[39].selector = @selector(shortToBinaryWithShort:withInt:withBooleanArray:withInt:withInt:);
  methods[40].selector = @selector(byteToBinaryWithByte:withInt:withBooleanArray:withInt:withInt:);
  methods[41].selector = @selector(uuidToByteArrayWithJavaUtilUUID:withByteArray:withInt:withInt:);
  methods[42].selector = @selector(byteArrayToUuidWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TTTT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "FTTT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "TFTT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "FFTT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "TTFT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 77, -1, -1 },
    { "FTFT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 78, -1, -1 },
    { "TFFT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 79, -1, -1 },
    { "FFFT", "[Z", .constantValue.asLong = 0, 0x1a, -1, 80, -1, -1 },
    { "TTTF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 81, -1, -1 },
    { "FTTF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 82, -1, -1 },
    { "TFTF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 83, -1, -1 },
    { "FFTF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 84, -1, -1 },
    { "TTFF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 85, -1, -1 },
    { "FTFF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 86, -1, -1 },
    { "TFFF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 87, -1, -1 },
    { "FFFF", "[Z", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
  };
  static const void *ptrTable[] = { "hexDigitToInt", "C", "hexDigitMsb0ToInt", "hexDigitToBinary", "hexDigitMsb0ToBinary", "binaryToHexDigit", "[Z", "[ZI", "binaryToHexDigitMsb0_4bits", "binaryBeMsb0ToHexDigit", "intToHexDigit", "I", "intToHexDigitMsb0", "intArrayToLong", "[IIJII", "shortArrayToLong", "[SIJII", "shortArrayToInt", "[SIIII", "byteArrayToLong", "[BIJII", "byteArrayToInt", "[BIIII", "byteArrayToShort", "[BISII", "hexToLong", "LNSString;IJII", "hexToInt", "LNSString;IIII", "hexToShort", "LNSString;ISII", "hexToByte", "LNSString;IBII", "binaryToLong", "[ZIJII", "binaryToInt", "[ZIIII", "binaryToShort", "[ZISII", "binaryToByte", "[ZIBII", "longToIntArray", "JI[III", "longToShortArray", "JI[SII", "intToShortArray", "II[SII", "longToByteArray", "JI[BII", "intToByteArray", "II[BII", "shortToByteArray", "SI[BII", "longToHex", "JILNSString;II", "intToHex", "IILNSString;II", "shortToHex", "SILNSString;II", "byteToHex", "BILNSString;II", "longToBinary", "JI[ZII", "intToBinary", "II[ZII", "shortToBinary", "SI[ZII", "byteToBinary", "BI[ZII", "uuidToByteArray", "LJavaUtilUUID;[BII", "byteArrayToUuid", "[BI", &OrgApacheCommonsLang3Conversion_TTTT, &OrgApacheCommonsLang3Conversion_FTTT, &OrgApacheCommonsLang3Conversion_TFTT, &OrgApacheCommonsLang3Conversion_FFTT, &OrgApacheCommonsLang3Conversion_TTFT, &OrgApacheCommonsLang3Conversion_FTFT, &OrgApacheCommonsLang3Conversion_TFFT, &OrgApacheCommonsLang3Conversion_FFFT, &OrgApacheCommonsLang3Conversion_TTTF, &OrgApacheCommonsLang3Conversion_FTTF, &OrgApacheCommonsLang3Conversion_TFTF, &OrgApacheCommonsLang3Conversion_FFTF, &OrgApacheCommonsLang3Conversion_TTFF, &OrgApacheCommonsLang3Conversion_FTFF, &OrgApacheCommonsLang3Conversion_TFFF, &OrgApacheCommonsLang3Conversion_FFFF };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3Conversion = { "Conversion", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x1, 43, 16, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3Conversion;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3Conversion class]) {
    OrgApacheCommonsLang3Conversion_TTTT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true, true, true } count:4];
    OrgApacheCommonsLang3Conversion_FTTT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, true, true, true } count:4];
    OrgApacheCommonsLang3Conversion_TFTT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, false, true, true } count:4];
    OrgApacheCommonsLang3Conversion_FFTT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, false, true, true } count:4];
    OrgApacheCommonsLang3Conversion_TTFT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true, false, true } count:4];
    OrgApacheCommonsLang3Conversion_FTFT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, true, false, true } count:4];
    OrgApacheCommonsLang3Conversion_TFFT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, false, false, true } count:4];
    OrgApacheCommonsLang3Conversion_FFFT = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, false, false, true } count:4];
    OrgApacheCommonsLang3Conversion_TTTF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true, true, false } count:4];
    OrgApacheCommonsLang3Conversion_FTTF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, true, true, false } count:4];
    OrgApacheCommonsLang3Conversion_TFTF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, false, true, false } count:4];
    OrgApacheCommonsLang3Conversion_FFTF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, false, true, false } count:4];
    OrgApacheCommonsLang3Conversion_TTFF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true, false, false } count:4];
    OrgApacheCommonsLang3Conversion_FTFF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, true, false, false } count:4];
    OrgApacheCommonsLang3Conversion_TFFF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, false, false, false } count:4];
    OrgApacheCommonsLang3Conversion_FFFF = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, false, false, false } count:4];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3Conversion)
  }
}

@end

void OrgApacheCommonsLang3Conversion_init(OrgApacheCommonsLang3Conversion *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3Conversion *new_OrgApacheCommonsLang3Conversion_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3Conversion, init)
}

OrgApacheCommonsLang3Conversion *create_OrgApacheCommonsLang3Conversion_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3Conversion, init)
}

jint OrgApacheCommonsLang3Conversion_hexDigitToIntWithChar_(jchar hexDigit) {
  OrgApacheCommonsLang3Conversion_initialize();
  jint digit = JavaLangCharacter_digitWithChar_withInt_(hexDigit, 16);
  if (digit < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @"Cannot interpret '", hexDigit, @"' as a hexadecimal digit"));
  }
  return digit;
}

jint OrgApacheCommonsLang3Conversion_hexDigitMsb0ToIntWithChar_(jchar hexDigit) {
  OrgApacheCommonsLang3Conversion_initialize();
  switch (hexDigit) {
    case '0':
    return (jint) 0x0;
    case '1':
    return (jint) 0x8;
    case '2':
    return (jint) 0x4;
    case '3':
    return (jint) 0xC;
    case '4':
    return (jint) 0x2;
    case '5':
    return (jint) 0xA;
    case '6':
    return (jint) 0x6;
    case '7':
    return (jint) 0xE;
    case '8':
    return (jint) 0x1;
    case '9':
    return (jint) 0x9;
    case 'a':
    case 'A':
    return (jint) 0x5;
    case 'b':
    case 'B':
    return (jint) 0xD;
    case 'c':
    case 'C':
    return (jint) 0x3;
    case 'd':
    case 'D':
    return (jint) 0xB;
    case 'e':
    case 'E':
    return (jint) 0x7;
    case 'f':
    case 'F':
    return (jint) 0xF;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @"Cannot interpret '", hexDigit, @"' as a hexadecimal digit"));
  }
}

IOSBooleanArray *OrgApacheCommonsLang3Conversion_hexDigitToBinaryWithChar_(jchar hexDigit) {
  OrgApacheCommonsLang3Conversion_initialize();
  switch (hexDigit) {
    case '0':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFFF)) java_clone];
    case '1':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFFF)) java_clone];
    case '2':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTFF)) java_clone];
    case '3':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTFF)) java_clone];
    case '4':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFTF)) java_clone];
    case '5':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFTF)) java_clone];
    case '6':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTTF)) java_clone];
    case '7':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTTF)) java_clone];
    case '8':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFFT)) java_clone];
    case '9':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFFT)) java_clone];
    case 'a':
    case 'A':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTFT)) java_clone];
    case 'b':
    case 'B':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTFT)) java_clone];
    case 'c':
    case 'C':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFTT)) java_clone];
    case 'd':
    case 'D':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFTT)) java_clone];
    case 'e':
    case 'E':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTTT)) java_clone];
    case 'f':
    case 'F':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTTT)) java_clone];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @"Cannot interpret '", hexDigit, @"' as a hexadecimal digit"));
  }
}

IOSBooleanArray *OrgApacheCommonsLang3Conversion_hexDigitMsb0ToBinaryWithChar_(jchar hexDigit) {
  OrgApacheCommonsLang3Conversion_initialize();
  switch (hexDigit) {
    case '0':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFFF)) java_clone];
    case '1':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFFT)) java_clone];
    case '2':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFTF)) java_clone];
    case '3':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FFTT)) java_clone];
    case '4':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTFF)) java_clone];
    case '5':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTFT)) java_clone];
    case '6':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTTF)) java_clone];
    case '7':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_FTTT)) java_clone];
    case '8':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFFF)) java_clone];
    case '9':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFFT)) java_clone];
    case 'a':
    case 'A':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFTF)) java_clone];
    case 'b':
    case 'B':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TFTT)) java_clone];
    case 'c':
    case 'C':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTFF)) java_clone];
    case 'd':
    case 'D':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTFT)) java_clone];
    case 'e':
    case 'E':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTTF)) java_clone];
    case 'f':
    case 'F':
    return [((IOSBooleanArray *) nil_chk(OrgApacheCommonsLang3Conversion_TTTT)) java_clone];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @"Cannot interpret '", hexDigit, @"' as a hexadecimal digit"));
  }
}

jchar OrgApacheCommonsLang3Conversion_binaryToHexDigitWithBooleanArray_(IOSBooleanArray *src) {
  OrgApacheCommonsLang3Conversion_initialize();
  return OrgApacheCommonsLang3Conversion_binaryToHexDigitWithBooleanArray_withInt_(src, 0);
}

jchar OrgApacheCommonsLang3Conversion_binaryToHexDigitWithBooleanArray_withInt_(IOSBooleanArray *src, jint srcPos) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (((IOSBooleanArray *) nil_chk(src))->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot convert an empty array.");
  }
  if (src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3)) {
    if (src->size_ > srcPos + 2 && IOSBooleanArray_Get(src, srcPos + 2)) {
      if (src->size_ > srcPos + 1 && IOSBooleanArray_Get(src, srcPos + 1)) {
        return IOSBooleanArray_Get(src, srcPos) ? 'f' : 'e';
      }
      return IOSBooleanArray_Get(src, srcPos) ? 'd' : 'c';
    }
    if (src->size_ > srcPos + 1 && IOSBooleanArray_Get(src, srcPos + 1)) {
      return IOSBooleanArray_Get(src, srcPos) ? 'b' : 'a';
    }
    return IOSBooleanArray_Get(src, srcPos) ? '9' : '8';
  }
  if (src->size_ > srcPos + 2 && IOSBooleanArray_Get(src, srcPos + 2)) {
    if (src->size_ > srcPos + 1 && IOSBooleanArray_Get(src, srcPos + 1)) {
      return IOSBooleanArray_Get(src, srcPos) ? '7' : '6';
    }
    return IOSBooleanArray_Get(src, srcPos) ? '5' : '4';
  }
  if (src->size_ > srcPos + 1 && IOSBooleanArray_Get(src, srcPos + 1)) {
    return IOSBooleanArray_Get(src, srcPos) ? '3' : '2';
  }
  return IOSBooleanArray_Get(src, srcPos) ? '1' : '0';
}

jchar OrgApacheCommonsLang3Conversion_binaryToHexDigitMsb0_4bitsWithBooleanArray_(IOSBooleanArray *src) {
  OrgApacheCommonsLang3Conversion_initialize();
  return OrgApacheCommonsLang3Conversion_binaryToHexDigitMsb0_4bitsWithBooleanArray_withInt_(src, 0);
}

jchar OrgApacheCommonsLang3Conversion_binaryToHexDigitMsb0_4bitsWithBooleanArray_withInt_(IOSBooleanArray *src, jint srcPos) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (((IOSBooleanArray *) nil_chk(src))->size_ > 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"src.length>8: src.length=", src->size_));
  }
  if (src->size_ - srcPos < 4) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"src.length-srcPos<4: src.length=", src->size_, @", srcPos=", srcPos));
  }
  if (IOSBooleanArray_Get(src, srcPos + 3)) {
    if (IOSBooleanArray_Get(src, srcPos + 2)) {
      if (IOSBooleanArray_Get(src, srcPos + 1)) {
        return IOSBooleanArray_Get(src, srcPos) ? 'f' : '7';
      }
      return IOSBooleanArray_Get(src, srcPos) ? 'b' : '3';
    }
    if (IOSBooleanArray_Get(src, srcPos + 1)) {
      return IOSBooleanArray_Get(src, srcPos) ? 'd' : '5';
    }
    return IOSBooleanArray_Get(src, srcPos) ? '9' : '1';
  }
  if (IOSBooleanArray_Get(src, srcPos + 2)) {
    if (IOSBooleanArray_Get(src, srcPos + 1)) {
      return IOSBooleanArray_Get(src, srcPos) ? 'e' : '6';
    }
    return IOSBooleanArray_Get(src, srcPos) ? 'a' : '2';
  }
  if (IOSBooleanArray_Get(src, srcPos + 1)) {
    return IOSBooleanArray_Get(src, srcPos) ? 'c' : '4';
  }
  return IOSBooleanArray_Get(src, srcPos) ? '8' : '0';
}

jchar OrgApacheCommonsLang3Conversion_binaryBeMsb0ToHexDigitWithBooleanArray_(IOSBooleanArray *src) {
  OrgApacheCommonsLang3Conversion_initialize();
  return OrgApacheCommonsLang3Conversion_binaryBeMsb0ToHexDigitWithBooleanArray_withInt_(src, 0);
}

jchar OrgApacheCommonsLang3Conversion_binaryBeMsb0ToHexDigitWithBooleanArray_withInt_(IOSBooleanArray *src, jint srcPos) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (((IOSBooleanArray *) nil_chk(src))->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot convert an empty array.");
  }
  jint beSrcPos = src->size_ - 1 - srcPos;
  jint srcLen = JavaLangMath_minWithInt_withInt_(4, beSrcPos + 1);
  IOSBooleanArray *paddedSrc = [IOSBooleanArray newArrayWithLength:4];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, beSrcPos + 1 - srcLen, paddedSrc, 4 - srcLen, srcLen);
  src = paddedSrc;
  srcPos = 0;
  if (IOSBooleanArray_Get(src, srcPos)) {
    if (src->size_ > srcPos + 1 && IOSBooleanArray_Get(src, srcPos + 1)) {
      if (src->size_ > srcPos + 2 && IOSBooleanArray_Get(src, srcPos + 2)) {
        return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? 'f' : 'e';
      }
      return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? 'd' : 'c';
    }
    if (src->size_ > srcPos + 2 && IOSBooleanArray_Get(src, srcPos + 2)) {
      return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? 'b' : 'a';
    }
    return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? '9' : '8';
  }
  if (src->size_ > srcPos + 1 && IOSBooleanArray_Get(src, srcPos + 1)) {
    if (src->size_ > srcPos + 2 && IOSBooleanArray_Get(src, srcPos + 2)) {
      return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? '7' : '6';
    }
    return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? '5' : '4';
  }
  if (src->size_ > srcPos + 2 && IOSBooleanArray_Get(src, srcPos + 2)) {
    return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? '3' : '2';
  }
  return src->size_ > srcPos + 3 && IOSBooleanArray_Get(src, srcPos + 3) ? '1' : '0';
}

jchar OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(jint nibble) {
  OrgApacheCommonsLang3Conversion_initialize();
  jchar c = JavaLangCharacter_forDigitWithInt_withInt_(nibble, 16);
  if (c == JavaLangCharacter_MIN_VALUE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"nibble value not between 0 and 15: ", nibble));
  }
  return c;
}

jchar OrgApacheCommonsLang3Conversion_intToHexDigitMsb0WithInt_(jint nibble) {
  OrgApacheCommonsLang3Conversion_initialize();
  switch (nibble) {
    case (jint) 0x0:
    return '0';
    case (jint) 0x1:
    return '8';
    case (jint) 0x2:
    return '4';
    case (jint) 0x3:
    return 'c';
    case (jint) 0x4:
    return '2';
    case (jint) 0x5:
    return 'a';
    case (jint) 0x6:
    return '6';
    case (jint) 0x7:
    return 'e';
    case (jint) 0x8:
    return '1';
    case (jint) 0x9:
    return '9';
    case (jint) 0xA:
    return '5';
    case (jint) 0xB:
    return 'd';
    case (jint) 0xC:
    return '3';
    case (jint) 0xD:
    return 'b';
    case (jint) 0xE:
    return '7';
    case (jint) 0xF:
    return 'f';
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"nibble value not between 0 and 15: ", nibble));
  }
}

jlong OrgApacheCommonsLang3Conversion_intArrayToLongWithIntArray_withInt_withLong_withInt_withInt_(IOSIntArray *src, jint srcPos, jlong dstInit, jint dstPos, jint nInts) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSIntArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nInts) {
    return dstInit;
  }
  if ((nInts - 1) * 32 + dstPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nInts-1)*32+dstPos is greather or equal to than 64");
  }
  jlong out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nInts; i++) {
    shift = i * 32 + dstPos;
    jlong bits = (JreLShift64(((jlong) 0xffffffffLL & IOSIntArray_Get(src, i + srcPos)), shift));
    jlong mask = JreLShift64((jlong) 0xffffffffLL, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jlong OrgApacheCommonsLang3Conversion_shortArrayToLongWithShortArray_withInt_withLong_withInt_withInt_(IOSShortArray *src, jint srcPos, jlong dstInit, jint dstPos, jint nShorts) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSShortArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nShorts) {
    return dstInit;
  }
  if ((nShorts - 1) * 16 + dstPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nShorts-1)*16+dstPos is greather or equal to than 64");
  }
  jlong out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nShorts; i++) {
    shift = i * 16 + dstPos;
    jlong bits = JreLShift64(((jlong) 0xffffLL & IOSShortArray_Get(src, i + srcPos)), shift);
    jlong mask = JreLShift64((jlong) 0xffffLL, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jint OrgApacheCommonsLang3Conversion_shortArrayToIntWithShortArray_withInt_withInt_withInt_withInt_(IOSShortArray *src, jint srcPos, jint dstInit, jint dstPos, jint nShorts) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSShortArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nShorts) {
    return dstInit;
  }
  if ((nShorts - 1) * 16 + dstPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nShorts-1)*16+dstPos is greather or equal to than 32");
  }
  jint out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nShorts; i++) {
    shift = i * 16 + dstPos;
    jint bits = JreLShift32(((jint) 0xffff & IOSShortArray_Get(src, i + srcPos)), shift);
    jint mask = JreLShift32((jint) 0xffff, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jlong OrgApacheCommonsLang3Conversion_byteArrayToLongWithByteArray_withInt_withLong_withInt_withInt_(IOSByteArray *src, jint srcPos, jlong dstInit, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSByteArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBytes) {
    return dstInit;
  }
  if ((nBytes - 1) * 8 + dstPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nBytes-1)*8+dstPos is greather or equal to than 64");
  }
  jlong out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBytes; i++) {
    shift = i * 8 + dstPos;
    jlong bits = JreLShift64(((jlong) 0xffLL & IOSByteArray_Get(src, i + srcPos)), shift);
    jlong mask = JreLShift64((jlong) 0xffLL, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jint OrgApacheCommonsLang3Conversion_byteArrayToIntWithByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *src, jint srcPos, jint dstInit, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSByteArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBytes) {
    return dstInit;
  }
  if ((nBytes - 1) * 8 + dstPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nBytes-1)*8+dstPos is greather or equal to than 32");
  }
  jint out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBytes; i++) {
    shift = i * 8 + dstPos;
    jint bits = JreLShift32(((jint) 0xff & IOSByteArray_Get(src, i + srcPos)), shift);
    jint mask = JreLShift32((jint) 0xff, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jshort OrgApacheCommonsLang3Conversion_byteArrayToShortWithByteArray_withInt_withShort_withInt_withInt_(IOSByteArray *src, jint srcPos, jshort dstInit, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSByteArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBytes) {
    return dstInit;
  }
  if ((nBytes - 1) * 8 + dstPos >= 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nBytes-1)*8+dstPos is greather or equal to than 16");
  }
  jshort out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBytes; i++) {
    shift = i * 8 + dstPos;
    jint bits = JreLShift32(((jint) 0xff & IOSByteArray_Get(src, i + srcPos)), shift);
    jint mask = JreLShift32((jint) 0xff, shift);
    out = (jshort) ((out & ~mask) | bits);
  }
  return out;
}

jlong OrgApacheCommonsLang3Conversion_hexToLongWithNSString_withInt_withLong_withInt_withInt_(NSString *src, jint srcPos, jlong dstInit, jint dstPos, jint nHex) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHex) {
    return dstInit;
  }
  if ((nHex - 1) * 4 + dstPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+dstPos is greather or equal to than 64");
  }
  jlong out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nHex; i++) {
    shift = i * 4 + dstPos;
    jlong bits = JreLShift64(((jlong) 0xfLL & OrgApacheCommonsLang3Conversion_hexDigitToIntWithChar_([((NSString *) nil_chk(src)) charAtWithInt:i + srcPos])), shift);
    jlong mask = JreLShift64((jlong) 0xfLL, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jint OrgApacheCommonsLang3Conversion_hexToIntWithNSString_withInt_withInt_withInt_withInt_(NSString *src, jint srcPos, jint dstInit, jint dstPos, jint nHex) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHex) {
    return dstInit;
  }
  if ((nHex - 1) * 4 + dstPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+dstPos is greather or equal to than 32");
  }
  jint out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nHex; i++) {
    shift = i * 4 + dstPos;
    jint bits = JreLShift32(((jint) 0xf & OrgApacheCommonsLang3Conversion_hexDigitToIntWithChar_([((NSString *) nil_chk(src)) charAtWithInt:i + srcPos])), shift);
    jint mask = JreLShift32((jint) 0xf, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jshort OrgApacheCommonsLang3Conversion_hexToShortWithNSString_withInt_withShort_withInt_withInt_(NSString *src, jint srcPos, jshort dstInit, jint dstPos, jint nHex) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHex) {
    return dstInit;
  }
  if ((nHex - 1) * 4 + dstPos >= 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+dstPos is greather or equal to than 16");
  }
  jshort out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nHex; i++) {
    shift = i * 4 + dstPos;
    jint bits = JreLShift32(((jint) 0xf & OrgApacheCommonsLang3Conversion_hexDigitToIntWithChar_([((NSString *) nil_chk(src)) charAtWithInt:i + srcPos])), shift);
    jint mask = JreLShift32((jint) 0xf, shift);
    out = (jshort) ((out & ~mask) | bits);
  }
  return out;
}

jbyte OrgApacheCommonsLang3Conversion_hexToByteWithNSString_withInt_withByte_withInt_withInt_(NSString *src, jint srcPos, jbyte dstInit, jint dstPos, jint nHex) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHex) {
    return dstInit;
  }
  if ((nHex - 1) * 4 + dstPos >= 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+dstPos is greather or equal to than 8");
  }
  jbyte out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nHex; i++) {
    shift = i * 4 + dstPos;
    jint bits = JreLShift32(((jint) 0xf & OrgApacheCommonsLang3Conversion_hexDigitToIntWithChar_([((NSString *) nil_chk(src)) charAtWithInt:i + srcPos])), shift);
    jint mask = JreLShift32((jint) 0xf, shift);
    out = (jbyte) ((out & ~mask) | bits);
  }
  return out;
}

jlong OrgApacheCommonsLang3Conversion_binaryToLongWithBooleanArray_withInt_withLong_withInt_withInt_(IOSBooleanArray *src, jint srcPos, jlong dstInit, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSBooleanArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBools) {
    return dstInit;
  }
  if (nBools - 1 + dstPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+dstPos is greather or equal to than 64");
  }
  jlong out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + dstPos;
    jlong bits = JreLShift64((IOSBooleanArray_Get(src, i + srcPos) ? 1LL : 0), shift);
    jlong mask = JreLShift64((jlong) 0x1LL, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jint OrgApacheCommonsLang3Conversion_binaryToIntWithBooleanArray_withInt_withInt_withInt_withInt_(IOSBooleanArray *src, jint srcPos, jint dstInit, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSBooleanArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBools) {
    return dstInit;
  }
  if (nBools - 1 + dstPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+dstPos is greather or equal to than 32");
  }
  jint out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + dstPos;
    jint bits = JreLShift32((IOSBooleanArray_Get(src, i + srcPos) ? 1 : 0), shift);
    jint mask = JreLShift32((jint) 0x1, shift);
    out = (out & ~mask) | bits;
  }
  return out;
}

jshort OrgApacheCommonsLang3Conversion_binaryToShortWithBooleanArray_withInt_withShort_withInt_withInt_(IOSBooleanArray *src, jint srcPos, jshort dstInit, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSBooleanArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBools) {
    return dstInit;
  }
  if (nBools - 1 + dstPos >= 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+dstPos is greather or equal to than 16");
  }
  jshort out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + dstPos;
    jint bits = JreLShift32((IOSBooleanArray_Get(src, i + srcPos) ? 1 : 0), shift);
    jint mask = JreLShift32((jint) 0x1, shift);
    out = (jshort) ((out & ~mask) | bits);
  }
  return out;
}

jbyte OrgApacheCommonsLang3Conversion_binaryToByteWithBooleanArray_withInt_withByte_withInt_withInt_(IOSBooleanArray *src, jint srcPos, jbyte dstInit, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if ((((IOSBooleanArray *) nil_chk(src))->size_ == 0 && srcPos == 0) || 0 == nBools) {
    return dstInit;
  }
  if (nBools - 1 + dstPos >= 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+dstPos is greather or equal to than 8");
  }
  jbyte out = dstInit;
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + dstPos;
    jint bits = JreLShift32((IOSBooleanArray_Get(src, i + srcPos) ? 1 : 0), shift);
    jint mask = JreLShift32((jint) 0x1, shift);
    out = (jbyte) ((out & ~mask) | bits);
  }
  return out;
}

IOSIntArray *OrgApacheCommonsLang3Conversion_longToIntArrayWithLong_withInt_withIntArray_withInt_withInt_(jlong src, jint srcPos, IOSIntArray *dst, jint dstPos, jint nInts) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nInts) {
    return dst;
  }
  if ((nInts - 1) * 32 + srcPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nInts-1)*32+srcPos is greather or equal to than 64");
  }
  jint shift = 0;
  for (jint i = 0; i < nInts; i++) {
    shift = i * 32 + srcPos;
    *IOSIntArray_GetRef(nil_chk(dst), dstPos + i) = (jint) ((jint) 0xffffffff & (JreRShift64(src, shift)));
  }
  return dst;
}

IOSShortArray *OrgApacheCommonsLang3Conversion_longToShortArrayWithLong_withInt_withShortArray_withInt_withInt_(jlong src, jint srcPos, IOSShortArray *dst, jint dstPos, jint nShorts) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nShorts) {
    return dst;
  }
  if ((nShorts - 1) * 16 + srcPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nShorts-1)*16+srcPos is greather or equal to than 64");
  }
  jint shift = 0;
  for (jint i = 0; i < nShorts; i++) {
    shift = i * 16 + srcPos;
    *IOSShortArray_GetRef(nil_chk(dst), dstPos + i) = (jshort) ((jint) 0xffff & (JreRShift64(src, shift)));
  }
  return dst;
}

IOSShortArray *OrgApacheCommonsLang3Conversion_intToShortArrayWithInt_withInt_withShortArray_withInt_withInt_(jint src, jint srcPos, IOSShortArray *dst, jint dstPos, jint nShorts) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nShorts) {
    return dst;
  }
  if ((nShorts - 1) * 16 + srcPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nShorts-1)*16+srcPos is greather or equal to than 32");
  }
  jint shift = 0;
  for (jint i = 0; i < nShorts; i++) {
    shift = i * 16 + srcPos;
    *IOSShortArray_GetRef(nil_chk(dst), dstPos + i) = (jshort) ((jint) 0xffff & (JreRShift32(src, shift)));
  }
  return dst;
}

IOSByteArray *OrgApacheCommonsLang3Conversion_longToByteArrayWithLong_withInt_withByteArray_withInt_withInt_(jlong src, jint srcPos, IOSByteArray *dst, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBytes) {
    return dst;
  }
  if ((nBytes - 1) * 8 + srcPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nBytes-1)*8+srcPos is greather or equal to than 64");
  }
  jint shift = 0;
  for (jint i = 0; i < nBytes; i++) {
    shift = i * 8 + srcPos;
    *IOSByteArray_GetRef(nil_chk(dst), dstPos + i) = (jbyte) ((jint) 0xff & (JreRShift64(src, shift)));
  }
  return dst;
}

IOSByteArray *OrgApacheCommonsLang3Conversion_intToByteArrayWithInt_withInt_withByteArray_withInt_withInt_(jint src, jint srcPos, IOSByteArray *dst, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBytes) {
    return dst;
  }
  if ((nBytes - 1) * 8 + srcPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nBytes-1)*8+srcPos is greather or equal to than 32");
  }
  jint shift = 0;
  for (jint i = 0; i < nBytes; i++) {
    shift = i * 8 + srcPos;
    *IOSByteArray_GetRef(nil_chk(dst), dstPos + i) = (jbyte) ((jint) 0xff & (JreRShift32(src, shift)));
  }
  return dst;
}

IOSByteArray *OrgApacheCommonsLang3Conversion_shortToByteArrayWithShort_withInt_withByteArray_withInt_withInt_(jshort src, jint srcPos, IOSByteArray *dst, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBytes) {
    return dst;
  }
  if ((nBytes - 1) * 8 + srcPos >= 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nBytes-1)*8+srcPos is greather or equal to than 16");
  }
  jint shift = 0;
  for (jint i = 0; i < nBytes; i++) {
    shift = i * 8 + srcPos;
    *IOSByteArray_GetRef(nil_chk(dst), dstPos + i) = (jbyte) ((jint) 0xff & (JreRShift32(src, shift)));
  }
  return dst;
}

NSString *OrgApacheCommonsLang3Conversion_longToHexWithLong_withInt_withNSString_withInt_withInt_(jlong src, jint srcPos, NSString *dstInit, jint dstPos, jint nHexs) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHexs) {
    return dstInit;
  }
  if ((nHexs - 1) * 4 + srcPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+srcPos is greather or equal to than 64");
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(dstInit);
  jint shift = 0;
  jint append = [sb java_length];
  for (jint i = 0; i < nHexs; i++) {
    shift = i * 4 + srcPos;
    jint bits = (jint) ((jint) 0xF & (JreRShift64(src, shift)));
    if (dstPos + i == append) {
      ++append;
      (void) [sb appendWithChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
    else {
      [sb setCharAtWithInt:dstPos + i withChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
  }
  return [sb description];
}

NSString *OrgApacheCommonsLang3Conversion_intToHexWithInt_withInt_withNSString_withInt_withInt_(jint src, jint srcPos, NSString *dstInit, jint dstPos, jint nHexs) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHexs) {
    return dstInit;
  }
  if ((nHexs - 1) * 4 + srcPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+srcPos is greather or equal to than 32");
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(dstInit);
  jint shift = 0;
  jint append = [sb java_length];
  for (jint i = 0; i < nHexs; i++) {
    shift = i * 4 + srcPos;
    jint bits = (jint) 0xF & (JreRShift32(src, shift));
    if (dstPos + i == append) {
      ++append;
      (void) [sb appendWithChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
    else {
      [sb setCharAtWithInt:dstPos + i withChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
  }
  return [sb description];
}

NSString *OrgApacheCommonsLang3Conversion_shortToHexWithShort_withInt_withNSString_withInt_withInt_(jshort src, jint srcPos, NSString *dstInit, jint dstPos, jint nHexs) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHexs) {
    return dstInit;
  }
  if ((nHexs - 1) * 4 + srcPos >= 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+srcPos is greather or equal to than 16");
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(dstInit);
  jint shift = 0;
  jint append = [sb java_length];
  for (jint i = 0; i < nHexs; i++) {
    shift = i * 4 + srcPos;
    jint bits = (jint) 0xF & (JreRShift32(src, shift));
    if (dstPos + i == append) {
      ++append;
      (void) [sb appendWithChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
    else {
      [sb setCharAtWithInt:dstPos + i withChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
  }
  return [sb description];
}

NSString *OrgApacheCommonsLang3Conversion_byteToHexWithByte_withInt_withNSString_withInt_withInt_(jbyte src, jint srcPos, NSString *dstInit, jint dstPos, jint nHexs) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nHexs) {
    return dstInit;
  }
  if ((nHexs - 1) * 4 + srcPos >= 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"(nHexs-1)*4+srcPos is greather or equal to than 8");
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(dstInit);
  jint shift = 0;
  jint append = [sb java_length];
  for (jint i = 0; i < nHexs; i++) {
    shift = i * 4 + srcPos;
    jint bits = (jint) 0xF & (JreRShift32(src, shift));
    if (dstPos + i == append) {
      ++append;
      (void) [sb appendWithChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
    else {
      [sb setCharAtWithInt:dstPos + i withChar:OrgApacheCommonsLang3Conversion_intToHexDigitWithInt_(bits)];
    }
  }
  return [sb description];
}

IOSBooleanArray *OrgApacheCommonsLang3Conversion_longToBinaryWithLong_withInt_withBooleanArray_withInt_withInt_(jlong src, jint srcPos, IOSBooleanArray *dst, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBools) {
    return dst;
  }
  if (nBools - 1 + srcPos >= 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+srcPos is greather or equal to than 64");
  }
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + srcPos;
    *IOSBooleanArray_GetRef(nil_chk(dst), dstPos + i) = (((jint) 0x1 & (JreRShift64(src, shift))) != 0);
  }
  return dst;
}

IOSBooleanArray *OrgApacheCommonsLang3Conversion_intToBinaryWithInt_withInt_withBooleanArray_withInt_withInt_(jint src, jint srcPos, IOSBooleanArray *dst, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBools) {
    return dst;
  }
  if (nBools - 1 + srcPos >= 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+srcPos is greather or equal to than 32");
  }
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + srcPos;
    *IOSBooleanArray_GetRef(nil_chk(dst), dstPos + i) = (((jint) 0x1 & (JreRShift32(src, shift))) != 0);
  }
  return dst;
}

IOSBooleanArray *OrgApacheCommonsLang3Conversion_shortToBinaryWithShort_withInt_withBooleanArray_withInt_withInt_(jshort src, jint srcPos, IOSBooleanArray *dst, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBools) {
    return dst;
  }
  if (nBools - 1 + srcPos >= 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+srcPos is greather or equal to than 16");
  }
  jint shift = 0;
  JreAssert((((nBools - 1) < 16 - srcPos)), (@"org/apache/commons/lang3/Conversion.java:1504 condition failed: assert ((nBools - 1) < 16 - srcPos);"));
  for (jint i = 0; i < nBools; i++) {
    shift = i + srcPos;
    *IOSBooleanArray_GetRef(nil_chk(dst), dstPos + i) = (((jint) 0x1 & (JreRShift32(src, shift))) != 0);
  }
  return dst;
}

IOSBooleanArray *OrgApacheCommonsLang3Conversion_byteToBinaryWithByte_withInt_withBooleanArray_withInt_withInt_(jbyte src, jint srcPos, IOSBooleanArray *dst, jint dstPos, jint nBools) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBools) {
    return dst;
  }
  if (nBools - 1 + srcPos >= 8) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBools-1+srcPos is greather or equal to than 8");
  }
  jint shift = 0;
  for (jint i = 0; i < nBools; i++) {
    shift = i + srcPos;
    *IOSBooleanArray_GetRef(nil_chk(dst), dstPos + i) = (((jint) 0x1 & (JreRShift32(src, shift))) != 0);
  }
  return dst;
}

IOSByteArray *OrgApacheCommonsLang3Conversion_uuidToByteArrayWithJavaUtilUUID_withByteArray_withInt_withInt_(JavaUtilUUID *src, IOSByteArray *dst, jint dstPos, jint nBytes) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (0 == nBytes) {
    return dst;
  }
  if (nBytes > 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"nBytes is greather than 16");
  }
  (void) OrgApacheCommonsLang3Conversion_longToByteArrayWithLong_withInt_withByteArray_withInt_withInt_([((JavaUtilUUID *) nil_chk(src)) getMostSignificantBits], 0, dst, dstPos, nBytes > 8 ? 8 : nBytes);
  if (nBytes >= 8) {
    (void) OrgApacheCommonsLang3Conversion_longToByteArrayWithLong_withInt_withByteArray_withInt_withInt_([src getLeastSignificantBits], 0, dst, dstPos + 8, nBytes - 8);
  }
  return dst;
}

JavaUtilUUID *OrgApacheCommonsLang3Conversion_byteArrayToUuidWithByteArray_withInt_(IOSByteArray *src, jint srcPos) {
  OrgApacheCommonsLang3Conversion_initialize();
  if (((IOSByteArray *) nil_chk(src))->size_ - srcPos < 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Need at least 16 bytes for UUID");
  }
  return new_JavaUtilUUID_initWithLong_withLong_(OrgApacheCommonsLang3Conversion_byteArrayToLongWithByteArray_withInt_withLong_withInt_withInt_(src, srcPos, 0, 0, 8), OrgApacheCommonsLang3Conversion_byteArrayToLongWithByteArray_withInt_withLong_withInt_withInt_(src, srcPos + 8, 0, 0, 8));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3Conversion)
