//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/CharRange.java
//

#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "org/apache/commons/lang3/CharRange.h"

@interface OrgApacheCommonsLang3CharRange () {
 @public
  jchar start_;
  jchar end_;
  jboolean negated_;
  NSString *iToString_;
}

- (instancetype)initWithChar:(jchar)start
                    withChar:(jchar)end
                 withBoolean:(jboolean)negated;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3CharRange, iToString_, NSString *)

inline jlong OrgApacheCommonsLang3CharRange_get_serialVersionUID(void);
#define OrgApacheCommonsLang3CharRange_serialVersionUID 8270183163158333422LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3CharRange, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(OrgApacheCommonsLang3CharRange *self, jchar start, jchar end, jboolean negated);

__attribute__((unused)) static OrgApacheCommonsLang3CharRange *new_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(jchar start, jchar end, jboolean negated) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3CharRange *create_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(jchar start, jchar end, jboolean negated);

@interface OrgApacheCommonsLang3CharRange_CharacterIterator : NSObject < JavaUtilIterator > {
 @public
  jchar current_;
  OrgApacheCommonsLang3CharRange *range_;
  jboolean hasNext_;
}

- (instancetype)initWithOrgApacheCommonsLang3CharRange:(OrgApacheCommonsLang3CharRange *)r;

- (void)prepareNext;

- (jboolean)hasNext;

- (JavaLangCharacter *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3CharRange_CharacterIterator)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3CharRange_CharacterIterator, range_, OrgApacheCommonsLang3CharRange *)

__attribute__((unused)) static void OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(OrgApacheCommonsLang3CharRange_CharacterIterator *self, OrgApacheCommonsLang3CharRange *r);

__attribute__((unused)) static OrgApacheCommonsLang3CharRange_CharacterIterator *new_OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(OrgApacheCommonsLang3CharRange *r) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3CharRange_CharacterIterator *create_OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(OrgApacheCommonsLang3CharRange *r);

__attribute__((unused)) static void OrgApacheCommonsLang3CharRange_CharacterIterator_prepareNext(OrgApacheCommonsLang3CharRange_CharacterIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3CharRange_CharacterIterator)

@implementation OrgApacheCommonsLang3CharRange

- (instancetype)initWithChar:(jchar)start
                    withChar:(jchar)end
                 withBoolean:(jboolean)negated {
  OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(self, start, end, negated);
  return self;
}

+ (OrgApacheCommonsLang3CharRange *)isWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharRange_isWithChar_(ch);
}

+ (OrgApacheCommonsLang3CharRange *)isNotWithChar:(jchar)ch {
  return OrgApacheCommonsLang3CharRange_isNotWithChar_(ch);
}

+ (OrgApacheCommonsLang3CharRange *)isInWithChar:(jchar)start
                                        withChar:(jchar)end {
  return OrgApacheCommonsLang3CharRange_isInWithChar_withChar_(start, end);
}

+ (OrgApacheCommonsLang3CharRange *)isNotInWithChar:(jchar)start
                                           withChar:(jchar)end {
  return OrgApacheCommonsLang3CharRange_isNotInWithChar_withChar_(start, end);
}

- (jchar)getStart {
  return self->start_;
}

- (jchar)getEnd {
  return self->end_;
}

- (jboolean)isNegated {
  return negated_;
}

- (jboolean)containsWithChar:(jchar)ch {
  return (ch >= start_ && ch <= end_) != negated_;
}

- (jboolean)containsWithOrgApacheCommonsLang3CharRange:(OrgApacheCommonsLang3CharRange *)range {
  if (range == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The Range must not be null");
  }
  if (negated_) {
    if (range->negated_) {
      return start_ >= range->start_ && end_ <= range->end_;
    }
    return range->end_ < start_ || range->start_ > end_;
  }
  if (range->negated_) {
    return start_ == 0 && end_ == JavaLangCharacter_MAX_VALUE;
  }
  return start_ <= range->start_ && end_ >= range->end_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return true;
  }
  if ([obj isKindOfClass:[OrgApacheCommonsLang3CharRange class]] == false) {
    return false;
  }
  OrgApacheCommonsLang3CharRange *other = (OrgApacheCommonsLang3CharRange *) cast_chk(obj, [OrgApacheCommonsLang3CharRange class]);
  return start_ == ((OrgApacheCommonsLang3CharRange *) nil_chk(other))->start_ && end_ == other->end_ && negated_ == other->negated_;
}

- (NSUInteger)hash {
  return 83 + start_ + 7 * end_ + (negated_ ? 1 : 0);
}

- (NSString *)description {
  if (iToString_ == nil) {
    JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_(4);
    if ([self isNegated]) {
      (void) [buf appendWithChar:'^'];
    }
    (void) [buf appendWithChar:start_];
    if (start_ != end_) {
      (void) [buf appendWithChar:'-'];
      (void) [buf appendWithChar:end_];
    }
    iToString_ = [buf description];
  }
  return iToString_;
}

- (id<JavaUtilIterator>)iterator {
  return new_OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3CharRange;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3CharRange;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3CharRange;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3CharRange;", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:withChar:withBoolean:);
  methods[1].selector = @selector(isWithChar:);
  methods[2].selector = @selector(isNotWithChar:);
  methods[3].selector = @selector(isInWithChar:withChar:);
  methods[4].selector = @selector(isNotInWithChar:withChar:);
  methods[5].selector = @selector(getStart);
  methods[6].selector = @selector(getEnd);
  methods[7].selector = @selector(isNegated);
  methods[8].selector = @selector(containsWithChar:);
  methods[9].selector = @selector(containsWithOrgApacheCommonsLang3CharRange:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3CharRange_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "start_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "end_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "negated_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iToString_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "CCZ", "is", "C", "isNot", "isIn", "CC", "isNotIn", "contains", "LOrgApacheCommonsLang3CharRange;", "equals", "LNSObject;", "hashCode", "toString", "()Ljava/util/Iterator<Ljava/lang/Character;>;", "LOrgApacheCommonsLang3CharRange_CharacterIterator;", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Character;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3CharRange = { "CharRange", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x10, 14, 5, -1, 14, -1, 15, -1 };
  return &_OrgApacheCommonsLang3CharRange;
}

@end

void OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(OrgApacheCommonsLang3CharRange *self, jchar start, jchar end, jboolean negated) {
  NSObject_init(self);
  if (start > end) {
    jchar temp = start;
    start = end;
    end = temp;
  }
  self->start_ = start;
  self->end_ = end;
  self->negated_ = negated;
}

OrgApacheCommonsLang3CharRange *new_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(jchar start, jchar end, jboolean negated) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3CharRange, initWithChar_withChar_withBoolean_, start, end, negated)
}

OrgApacheCommonsLang3CharRange *create_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(jchar start, jchar end, jboolean negated) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3CharRange, initWithChar_withChar_withBoolean_, start, end, negated)
}

OrgApacheCommonsLang3CharRange *OrgApacheCommonsLang3CharRange_isWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharRange_initialize();
  return new_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(ch, ch, false);
}

OrgApacheCommonsLang3CharRange *OrgApacheCommonsLang3CharRange_isNotWithChar_(jchar ch) {
  OrgApacheCommonsLang3CharRange_initialize();
  return new_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(ch, ch, true);
}

OrgApacheCommonsLang3CharRange *OrgApacheCommonsLang3CharRange_isInWithChar_withChar_(jchar start, jchar end) {
  OrgApacheCommonsLang3CharRange_initialize();
  return new_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(start, end, false);
}

OrgApacheCommonsLang3CharRange *OrgApacheCommonsLang3CharRange_isNotInWithChar_withChar_(jchar start, jchar end) {
  OrgApacheCommonsLang3CharRange_initialize();
  return new_OrgApacheCommonsLang3CharRange_initWithChar_withChar_withBoolean_(start, end, true);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3CharRange)

@implementation OrgApacheCommonsLang3CharRange_CharacterIterator

- (instancetype)initWithOrgApacheCommonsLang3CharRange:(OrgApacheCommonsLang3CharRange *)r {
  OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(self, r);
  return self;
}

- (void)prepareNext {
  OrgApacheCommonsLang3CharRange_CharacterIterator_prepareNext(self);
}

- (jboolean)hasNext {
  return hasNext_;
}

- (JavaLangCharacter *)next {
  if (hasNext_ == false) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  jchar cur = current_;
  OrgApacheCommonsLang3CharRange_CharacterIterator_prepareNext(self);
  return JavaLangCharacter_valueOfWithChar_(cur);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharacter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3CharRange:);
  methods[1].selector = @selector(prepareNext);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "current_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "range_", "LOrgApacheCommonsLang3CharRange;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasNext_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3CharRange;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Character;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3CharRange_CharacterIterator = { "CharacterIterator", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0xa, 5, 3, 0, -1, -1, 1, -1 };
  return &_OrgApacheCommonsLang3CharRange_CharacterIterator;
}

@end

void OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(OrgApacheCommonsLang3CharRange_CharacterIterator *self, OrgApacheCommonsLang3CharRange *r) {
  NSObject_init(self);
  self->range_ = r;
  self->hasNext_ = true;
  if (((OrgApacheCommonsLang3CharRange *) nil_chk(self->range_))->negated_) {
    if (self->range_->start_ == 0) {
      if (self->range_->end_ == JavaLangCharacter_MAX_VALUE) {
        self->hasNext_ = false;
      }
      else {
        self->current_ = (jchar) (self->range_->end_ + 1);
      }
    }
    else {
      self->current_ = 0;
    }
  }
  else {
    self->current_ = self->range_->start_;
  }
}

OrgApacheCommonsLang3CharRange_CharacterIterator *new_OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(OrgApacheCommonsLang3CharRange *r) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3CharRange_CharacterIterator, initWithOrgApacheCommonsLang3CharRange_, r)
}

OrgApacheCommonsLang3CharRange_CharacterIterator *create_OrgApacheCommonsLang3CharRange_CharacterIterator_initWithOrgApacheCommonsLang3CharRange_(OrgApacheCommonsLang3CharRange *r) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3CharRange_CharacterIterator, initWithOrgApacheCommonsLang3CharRange_, r)
}

void OrgApacheCommonsLang3CharRange_CharacterIterator_prepareNext(OrgApacheCommonsLang3CharRange_CharacterIterator *self) {
  if (((OrgApacheCommonsLang3CharRange *) nil_chk(self->range_))->negated_) {
    if (self->current_ == JavaLangCharacter_MAX_VALUE) {
      self->hasNext_ = false;
    }
    else if (self->current_ + 1 == self->range_->start_) {
      if (self->range_->end_ == JavaLangCharacter_MAX_VALUE) {
        self->hasNext_ = false;
      }
      else {
        self->current_ = (jchar) (self->range_->end_ + 1);
      }
    }
    else {
      self->current_ = (jchar) (self->current_ + 1);
    }
  }
  else if (self->current_ < self->range_->end_) {
    self->current_ = (jchar) (self->current_ + 1);
  }
  else {
    self->hasNext_ = false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3CharRange_CharacterIterator)
