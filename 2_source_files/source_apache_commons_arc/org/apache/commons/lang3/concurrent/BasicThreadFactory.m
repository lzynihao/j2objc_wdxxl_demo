//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/concurrent/BasicThreadFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/commons/lang3/concurrent/BasicThreadFactory.h"

@interface OrgApacheCommonsLang3ConcurrentBasicThreadFactory () {
 @public
  JavaUtilConcurrentAtomicAtomicLong *threadCounter_;
  id<JavaUtilConcurrentThreadFactory> wrappedFactory_;
  id<JavaLangThread_UncaughtExceptionHandler> uncaughtExceptionHandler_;
  NSString *namingPattern_;
  JavaLangInteger *priority_;
  JavaLangBoolean *daemonFlag_;
}

- (instancetype)initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder:(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)builder;

- (void)initializeThreadWithJavaLangThread:(JavaLangThread *)t OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, threadCounter_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, wrappedFactory_, id<JavaUtilConcurrentThreadFactory>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, uncaughtExceptionHandler_, id<JavaLangThread_UncaughtExceptionHandler>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, namingPattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, priority_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, daemonFlag_, JavaLangBoolean *)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self, OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *builder);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentBasicThreadFactory *new_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentBasicThreadFactory *create_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *builder);

__attribute__((unused)) static id<JavaUtilConcurrentThreadFactory> OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getWrappedFactory(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getNamingPattern(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self);

__attribute__((unused)) static JavaLangBoolean *OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getDaemonFlag(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self);

__attribute__((unused)) static JavaLangInteger *OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getPriority(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self);

__attribute__((unused)) static id<JavaLangThread_UncaughtExceptionHandler> OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getUncaughtExceptionHandler(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self);

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initializeThreadWithJavaLangThread_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self, JavaLangThread *t);

@interface OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder () {
 @public
  id<JavaUtilConcurrentThreadFactory> wrappedFactory_;
  id<JavaLangThread_UncaughtExceptionHandler> exceptionHandler_;
  NSString *namingPattern_;
  JavaLangInteger *priority_;
  JavaLangBoolean *daemonFlag_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, wrappedFactory_, id<JavaUtilConcurrentThreadFactory>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, exceptionHandler_, id<JavaLangThread_UncaughtExceptionHandler>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, namingPattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, priority_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, daemonFlag_, JavaLangBoolean *)

@implementation OrgApacheCommonsLang3ConcurrentBasicThreadFactory

- (instancetype)initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder:(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)builder {
  OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(self, builder);
  return self;
}

- (id<JavaUtilConcurrentThreadFactory>)getWrappedFactory {
  return OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getWrappedFactory(self);
}

- (NSString *)getNamingPattern {
  return OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getNamingPattern(self);
}

- (JavaLangBoolean *)getDaemonFlag {
  return OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getDaemonFlag(self);
}

- (JavaLangInteger *)getPriority {
  return OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getPriority(self);
}

- (id<JavaLangThread_UncaughtExceptionHandler>)getUncaughtExceptionHandler {
  return OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getUncaughtExceptionHandler(self);
}

- (jlong)getThreadCount {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(threadCounter_)) get];
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *t = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getWrappedFactory(self))) newThreadWithJavaLangRunnable:r];
  OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initializeThreadWithJavaLangThread_(self, t);
  return t;
}

- (void)initializeThreadWithJavaLangThread:(JavaLangThread *)t {
  OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initializeThreadWithJavaLangThread_(self, t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentThreadFactory;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread_UncaughtExceptionHandler;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder:);
  methods[1].selector = @selector(getWrappedFactory);
  methods[2].selector = @selector(getNamingPattern);
  methods[3].selector = @selector(getDaemonFlag);
  methods[4].selector = @selector(getPriority);
  methods[5].selector = @selector(getUncaughtExceptionHandler);
  methods[6].selector = @selector(getThreadCount);
  methods[7].selector = @selector(newThreadWithJavaLangRunnable:);
  methods[8].selector = @selector(initializeThreadWithJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadCounter_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wrappedFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "uncaughtExceptionHandler_", "LJavaLangThread_UncaughtExceptionHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "namingPattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "priority_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "daemonFlag_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;", "newThread", "LJavaLangRunnable;", "initializeThread", "LJavaLangThread;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentBasicThreadFactory = { "BasicThreadFactory", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, 0, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentBasicThreadFactory;
}

@end

void OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self, OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *builder) {
  NSObject_init(self);
  if (((OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *) nil_chk(builder))->wrappedFactory_ == nil) {
    self->wrappedFactory_ = JavaUtilConcurrentExecutors_defaultThreadFactory();
  }
  else {
    self->wrappedFactory_ = builder->wrappedFactory_;
  }
  self->namingPattern_ = builder->namingPattern_;
  self->priority_ = builder->priority_;
  self->daemonFlag_ = builder->daemonFlag_;
  self->uncaughtExceptionHandler_ = builder->exceptionHandler_;
  self->threadCounter_ = new_JavaUtilConcurrentAtomicAtomicLong_init();
}

OrgApacheCommonsLang3ConcurrentBasicThreadFactory *new_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *builder) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_, builder)
}

OrgApacheCommonsLang3ConcurrentBasicThreadFactory *create_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *builder) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentBasicThreadFactory, initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_, builder)
}

id<JavaUtilConcurrentThreadFactory> OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getWrappedFactory(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self) {
  return self->wrappedFactory_;
}

NSString *OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getNamingPattern(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self) {
  return self->namingPattern_;
}

JavaLangBoolean *OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getDaemonFlag(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self) {
  return self->daemonFlag_;
}

JavaLangInteger *OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getPriority(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self) {
  return self->priority_;
}

id<JavaLangThread_UncaughtExceptionHandler> OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getUncaughtExceptionHandler(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self) {
  return self->uncaughtExceptionHandler_;
}

void OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initializeThreadWithJavaLangThread_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory *self, JavaLangThread *t) {
  if (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getNamingPattern(self) != nil) {
    JavaLangLong *count = JavaLangLong_valueOfWithLong_([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->threadCounter_)) incrementAndGet]);
    [((JavaLangThread *) nil_chk(t)) setNameWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getNamingPattern(self), [IOSObjectArray newArrayWithObjects:(id[]){ count } count:1 type:NSObject_class_()])];
  }
  if (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getUncaughtExceptionHandler(self) != nil) {
    [((JavaLangThread *) nil_chk(t)) setUncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getUncaughtExceptionHandler(self)];
  }
  if (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getPriority(self) != nil) {
    [((JavaLangThread *) nil_chk(t)) setPriorityWithInt:[((JavaLangInteger *) nil_chk(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getPriority(self))) intValue]];
  }
  if (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getDaemonFlag(self) != nil) {
    [((JavaLangThread *) nil_chk(t)) setDaemonWithBoolean:[((JavaLangBoolean *) nil_chk(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_getDaemonFlag(self))) booleanValue]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentBasicThreadFactory)

@implementation OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)wrappedFactoryWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)factory {
  if (factory == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Wrapped ThreadFactory must not be null!");
  }
  wrappedFactory_ = factory;
  return self;
}

- (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)namingPatternWithNSString:(NSString *)pattern {
  if (pattern == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Naming pattern must not be null!");
  }
  namingPattern_ = pattern;
  return self;
}

- (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)daemonWithBoolean:(jboolean)f {
  daemonFlag_ = JavaLangBoolean_valueOfWithBoolean_(f);
  return self;
}

- (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)priorityWithInt:(jint)prio {
  priority_ = JavaLangInteger_valueOfWithInt_(prio);
  return self;
}

- (OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *)uncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:(id<JavaLangThread_UncaughtExceptionHandler>)handler {
  if (handler == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Uncaught exception handler must not be null!");
  }
  exceptionHandler_ = handler;
  return self;
}

- (void)reset {
  wrappedFactory_ = nil;
  exceptionHandler_ = nil;
  namingPattern_ = nil;
  priority_ = nil;
  daemonFlag_ = nil;
}

- (OrgApacheCommonsLang3ConcurrentBasicThreadFactory *)build {
  OrgApacheCommonsLang3ConcurrentBasicThreadFactory *factory = new_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_initWithOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_(self);
  [self reset];
  return factory;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(wrappedFactoryWithJavaUtilConcurrentThreadFactory:);
  methods[2].selector = @selector(namingPatternWithNSString:);
  methods[3].selector = @selector(daemonWithBoolean:);
  methods[4].selector = @selector(priorityWithInt:);
  methods[5].selector = @selector(uncaughtExceptionHandlerWithJavaLangThread_UncaughtExceptionHandler:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wrappedFactory_", "LJavaUtilConcurrentThreadFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exceptionHandler_", "LJavaLangThread_UncaughtExceptionHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "namingPattern_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "priority_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "daemonFlag_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "wrappedFactory", "LJavaUtilConcurrentThreadFactory;", "namingPattern", "LNSString;", "daemon", "Z", "priority", "I", "uncaughtExceptionHandler", "LJavaLangThread_UncaughtExceptionHandler;", "LOrgApacheCommonsLang3ConcurrentBasicThreadFactory;", "Ljava/lang/Object;Lorg/apache/commons/lang3/builder/Builder<Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder = { "Builder", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x9, 8, 5, 10, -1, -1, 11, -1 };
  return &_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder;
}

@end

void OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_init(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *new_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, init)
}

OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder *create_OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentBasicThreadFactory_Builder)
