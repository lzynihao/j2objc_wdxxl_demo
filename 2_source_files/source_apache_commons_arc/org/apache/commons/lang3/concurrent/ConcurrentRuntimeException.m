//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-sources.jar!org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java
//

#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.h"
#include "org/apache/commons/lang3/concurrent/ConcurrentUtils.h"

inline jlong OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_get_serialVersionUID();
#define OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_serialVersionUID -6582182735562919670LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, serialVersionUID, jlong)

@implementation OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSException:(NSException *)cause {
  OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSException_(self, cause);
  return self;
}

- (instancetype)initWithNSString:(NSString *)msg
                 withNSException:(NSException *)cause {
  OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSString_withNSException_(self, msg, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSException:);
  methods[2].selector = @selector(initWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "LNSString;LNSException;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException = { "ConcurrentRuntimeException", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException;
}

@end

void OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_init(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *self) {
  JavaLangRuntimeException_init(self);
}

OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *new_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, init)
}

OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *create_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, init)
}

void OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSException_(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *self, NSException *cause) {
  JavaLangRuntimeException_initWithNSException_(self, OrgApacheCommonsLang3ConcurrentConcurrentUtils_checkedExceptionWithNSException_(cause));
}

OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *new_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSException_(NSException *cause) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, initWithNSException_, cause)
}

OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *create_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSException_(NSException *cause) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, initWithNSException_, cause)
}

void OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSString_withNSException_(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *self, NSString *msg, NSException *cause) {
  JavaLangRuntimeException_initWithNSString_withNSException_(self, msg, OrgApacheCommonsLang3ConcurrentConcurrentUtils_checkedExceptionWithNSException_(cause));
}

OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *new_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSString_withNSException_(NSString *msg, NSException *cause) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, initWithNSString_withNSException_, msg, cause)
}

OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException *create_OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException_initWithNSString_withNSException_(NSString *msg, NSException *cause) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException, initWithNSString_withNSException_, msg, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentConcurrentRuntimeException)
