//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/commons/lang3/concurrent/BackgroundInitializer.h"
#include "org/apache/commons/lang3/concurrent/ConcurrentException.h"
#include "org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer () {
 @public
  id<JavaUtilMap> childInitializers_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer, childInitializers_, id<JavaUtilMap>)

@interface OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults () {
 @public
  id<JavaUtilMap> initializers_;
  id<JavaUtilMap> resultObjects_;
  id<JavaUtilMap> exceptions_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)inits
                    withJavaUtilMap:(id<JavaUtilMap>)results
                    withJavaUtilMap:(id<JavaUtilMap>)excepts;

- (OrgApacheCommonsLang3ConcurrentBackgroundInitializer *)checkNameWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults, initializers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults, resultObjects_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults, exceptions_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *self, id<JavaUtilMap> inits, id<JavaUtilMap> results, id<JavaUtilMap> excepts);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *new_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> inits, id<JavaUtilMap> results, id<JavaUtilMap> excepts) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *create_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> inits, id<JavaUtilMap> results, id<JavaUtilMap> excepts);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentBackgroundInitializer *OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *self, NSString *name);

@implementation OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)exec {
  OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_initWithJavaUtilConcurrentExecutorService_(self, exec);
  return self;
}

- (void)addInitializerWithNSString:(NSString *)name
withOrgApacheCommonsLang3ConcurrentBackgroundInitializer:(OrgApacheCommonsLang3ConcurrentBackgroundInitializer *)init_ {
  if (name == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Name of child initializer must not be null!");
  }
  if (init_ == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Child initializer must not be null!");
  }
  @synchronized(self) {
    if ([self isStarted]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"addInitializer() must not be called after start()!");
    }
    (void) [((id<JavaUtilMap>) nil_chk(childInitializers_)) putWithId:name withId:init_];
  }
}

- (jint)getTaskCount {
  jint result = 1;
  for (OrgApacheCommonsLang3ConcurrentBackgroundInitializer * __strong bi in nil_chk([((id<JavaUtilMap>) nil_chk(childInitializers_)) values])) {
    result += [((OrgApacheCommonsLang3ConcurrentBackgroundInitializer *) nil_chk(bi)) getTaskCount];
  }
  return result;
}

- (OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *)initialize__ {
  id<JavaUtilMap> inits;
  @synchronized(self) {
    inits = new_JavaUtilHashMap_initWithJavaUtilMap_(childInitializers_);
  }
  id<JavaUtilConcurrentExecutorService> exec = [self getActiveExecutor];
  for (OrgApacheCommonsLang3ConcurrentBackgroundInitializer * __strong bi in nil_chk([inits values])) {
    if ([((OrgApacheCommonsLang3ConcurrentBackgroundInitializer *) nil_chk(bi)) getExternalExecutor] == nil) {
      [bi setExternalExecutorWithJavaUtilConcurrentExecutorService:exec];
    }
    [bi start];
  }
  id<JavaUtilMap> results = new_JavaUtilHashMap_init();
  id<JavaUtilMap> excepts = new_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([inits entrySet])) {
    @try {
      (void) [results putWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[((OrgApacheCommonsLang3ConcurrentBackgroundInitializer *) nil_chk([e getValue])) get]];
    }
    @catch (OrgApacheCommonsLang3ConcurrentConcurrentException *cex) {
      (void) [excepts putWithId:[e getKey] withId:cex];
    }
  }
  return new_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(inits, results, excepts);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults;", 0x4, 4, -1, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilConcurrentExecutorService:);
  methods[2].selector = @selector(addInitializerWithNSString:withOrgApacheCommonsLang3ConcurrentBackgroundInitializer:);
  methods[3].selector = @selector(getTaskCount);
  methods[4].selector = @selector(initialize__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "childInitializers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutorService;", "addInitializer", "LNSString;LOrgApacheCommonsLang3ConcurrentBackgroundInitializer;", "(Ljava/lang/String;Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<*>;)V", "initialize", "LJavaLangException;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<*>;>;", "LOrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults;", "Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<Lorg/apache/commons/lang3/concurrent/MultiBackgroundInitializer$MultiBackgroundInitializerResults;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer = { "MultiBackgroundInitializer", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, 7, -1, 8, -1 };
  return &_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer;
}

@end

void OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_init(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer *self) {
  OrgApacheCommonsLang3ConcurrentBackgroundInitializer_init(self);
  self->childInitializers_ = new_JavaUtilHashMap_init();
}

OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer *new_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer, init)
}

OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer *create_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer, init)
}

void OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_initWithJavaUtilConcurrentExecutorService_(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer *self, id<JavaUtilConcurrentExecutorService> exec) {
  OrgApacheCommonsLang3ConcurrentBackgroundInitializer_initWithJavaUtilConcurrentExecutorService_(self, exec);
  self->childInitializers_ = new_JavaUtilHashMap_init();
}

OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer *new_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> exec) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer, initWithJavaUtilConcurrentExecutorService_, exec)
}

OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer *create_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_initWithJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentExecutorService> exec) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer, initWithJavaUtilConcurrentExecutorService_, exec)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer)

@implementation OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)inits
                    withJavaUtilMap:(id<JavaUtilMap>)results
                    withJavaUtilMap:(id<JavaUtilMap>)excepts {
  OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(self, inits, results, excepts);
  return self;
}

- (OrgApacheCommonsLang3ConcurrentBackgroundInitializer *)getInitializerWithNSString:(NSString *)name {
  return OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(self, name);
}

- (id)getResultObjectWithNSString:(NSString *)name {
  (void) OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(self, name);
  return [((id<JavaUtilMap>) nil_chk(resultObjects_)) getWithId:name];
}

- (jboolean)isExceptionWithNSString:(NSString *)name {
  (void) OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(self, name);
  return [((id<JavaUtilMap>) nil_chk(exceptions_)) containsKeyWithId:name];
}

- (OrgApacheCommonsLang3ConcurrentConcurrentException *)getExceptionWithNSString:(NSString *)name {
  (void) OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(self, name);
  return [((id<JavaUtilMap>) nil_chk(exceptions_)) getWithId:name];
}

- (id<JavaUtilSet>)initializerNames {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((id<JavaUtilMap>) nil_chk(initializers_)) keySet]);
}

- (jboolean)isSuccessful {
  return [((id<JavaUtilMap>) nil_chk(exceptions_)) isEmpty];
}

- (OrgApacheCommonsLang3ConcurrentBackgroundInitializer *)checkNameWithNSString:(NSString *)name {
  return OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(self, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBackgroundInitializer;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentConcurrentException;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentBackgroundInitializer;", 0x2, 9, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:withJavaUtilMap:withJavaUtilMap:);
  methods[1].selector = @selector(getInitializerWithNSString:);
  methods[2].selector = @selector(getResultObjectWithNSString:);
  methods[3].selector = @selector(isExceptionWithNSString:);
  methods[4].selector = @selector(getExceptionWithNSString:);
  methods[5].selector = @selector(initializerNames);
  methods[6].selector = @selector(isSuccessful);
  methods[7].selector = @selector(checkNameWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initializers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "resultObjects_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "exceptions_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;LJavaUtilMap;LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<*>;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/concurrent/ConcurrentException;>;)V", "getInitializer", "LNSString;", "(Ljava/lang/String;)Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<*>;", "getResultObject", "isException", "getException", "()Ljava/util/Set<Ljava/lang/String;>;", "checkName", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<*>;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/concurrent/ConcurrentException;>;", "LOrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults = { "MultiBackgroundInitializerResults", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x9, 8, 3, 13, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults;
}

@end

void OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *self, id<JavaUtilMap> inits, id<JavaUtilMap> results, id<JavaUtilMap> excepts) {
  NSObject_init(self);
  self->initializers_ = inits;
  self->resultObjects_ = results;
  self->exceptions_ = excepts;
}

OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *new_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> inits, id<JavaUtilMap> results, id<JavaUtilMap> excepts) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults, initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_, inits, results, excepts)
}

OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *create_OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> inits, id<JavaUtilMap> results, id<JavaUtilMap> excepts) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults, initWithJavaUtilMap_withJavaUtilMap_withJavaUtilMap_, inits, results, excepts)
}

OrgApacheCommonsLang3ConcurrentBackgroundInitializer *OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults_checkNameWithNSString_(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults *self, NSString *name) {
  OrgApacheCommonsLang3ConcurrentBackgroundInitializer *init_ = [((id<JavaUtilMap>) nil_chk(self->initializers_)) getWithId:name];
  if (init_ == nil) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(JreStrcat("$$", @"No child initializer with name ", name));
  }
  return init_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentMultiBackgroundInitializer_MultiBackgroundInitializerResults)
