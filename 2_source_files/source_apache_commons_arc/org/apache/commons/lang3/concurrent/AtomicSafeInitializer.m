//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java
//

#include "J2ObjC_source.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/apache/commons/lang3/concurrent/AtomicSafeInitializer.h"

@interface OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *factory_;
  JavaUtilConcurrentAtomicAtomicReference *reference_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer, factory_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer, reference_, JavaUtilConcurrentAtomicAtomicReference *)

@implementation OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)get {
  id result;
  while ((result = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(reference_)) get]) == nil) {
    if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(factory_)) compareAndSetWithId:nil withId:self]) {
      [reference_ setWithId:[self initialize__]];
    }
  }
  return result;
}

- (id)initialize__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, 0, 1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 2, -1, 0, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(initialize__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "factory_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "reference_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3ConcurrentConcurrentException;", "()TT;", "initialize", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer = { "AtomicSafeInitializer", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x401, 3, 2, -1, -1, -1, 5, -1 };
  return &_OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer;
}

@end

void OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer_init(OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer *self) {
  NSObject_init(self);
  self->factory_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
  self->reference_ = new_JavaUtilConcurrentAtomicAtomicReference_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentAtomicSafeInitializer)
