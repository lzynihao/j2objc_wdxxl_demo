//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/helper/Validate.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/jsoup/helper/Validate.h"

@interface OrgJsoupHelperValidate ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgJsoupHelperValidate_init(OrgJsoupHelperValidate *self);

__attribute__((unused)) static OrgJsoupHelperValidate *new_OrgJsoupHelperValidate_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperValidate *create_OrgJsoupHelperValidate_init();

@implementation OrgJsoupHelperValidate

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperValidate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)notNullWithId:(id)obj {
  OrgJsoupHelperValidate_notNullWithId_(obj);
}

+ (void)notNullWithId:(id)obj
         withNSString:(NSString *)msg {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(obj, msg);
}

+ (void)isTrueWithBoolean:(jboolean)val {
  OrgJsoupHelperValidate_isTrueWithBoolean_(val);
}

+ (void)isTrueWithBoolean:(jboolean)val
             withNSString:(NSString *)msg {
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(val, msg);
}

+ (void)isFalseWithBoolean:(jboolean)val {
  OrgJsoupHelperValidate_isFalseWithBoolean_(val);
}

+ (void)isFalseWithBoolean:(jboolean)val
              withNSString:(NSString *)msg {
  OrgJsoupHelperValidate_isFalseWithBoolean_withNSString_(val, msg);
}

+ (void)noNullElementsWithNSObjectArray:(IOSObjectArray *)objects {
  OrgJsoupHelperValidate_noNullElementsWithNSObjectArray_(objects);
}

+ (void)noNullElementsWithNSObjectArray:(IOSObjectArray *)objects
                           withNSString:(NSString *)msg {
  OrgJsoupHelperValidate_noNullElementsWithNSObjectArray_withNSString_(objects, msg);
}

+ (void)notEmptyWithNSString:(NSString *)string {
  OrgJsoupHelperValidate_notEmptyWithNSString_(string);
}

+ (void)notEmptyWithNSString:(NSString *)string
                withNSString:(NSString *)msg {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(string, msg);
}

+ (void)failWithNSString:(NSString *)msg {
  OrgJsoupHelperValidate_failWithNSString_(msg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(notNullWithId:);
  methods[2].selector = @selector(notNullWithId:withNSString:);
  methods[3].selector = @selector(isTrueWithBoolean:);
  methods[4].selector = @selector(isTrueWithBoolean:withNSString:);
  methods[5].selector = @selector(isFalseWithBoolean:);
  methods[6].selector = @selector(isFalseWithBoolean:withNSString:);
  methods[7].selector = @selector(noNullElementsWithNSObjectArray:);
  methods[8].selector = @selector(noNullElementsWithNSObjectArray:withNSString:);
  methods[9].selector = @selector(notEmptyWithNSString:);
  methods[10].selector = @selector(notEmptyWithNSString:withNSString:);
  methods[11].selector = @selector(failWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "notNull", "LNSObject;", "LNSObject;LNSString;", "isTrue", "Z", "ZLNSString;", "isFalse", "noNullElements", "[LNSObject;", "[LNSObject;LNSString;", "notEmpty", "LNSString;", "LNSString;LNSString;", "fail" };
  static const J2ObjcClassInfo _OrgJsoupHelperValidate = { "Validate", "org.jsoup.helper", ptrTable, methods, NULL, 7, 0x11, 12, 0, -1, -1, -1, -1, -1 };
  return &_OrgJsoupHelperValidate;
}

@end

void OrgJsoupHelperValidate_init(OrgJsoupHelperValidate *self) {
  NSObject_init(self);
}

OrgJsoupHelperValidate *new_OrgJsoupHelperValidate_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperValidate, init)
}

OrgJsoupHelperValidate *create_OrgJsoupHelperValidate_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperValidate, init)
}

void OrgJsoupHelperValidate_notNullWithId_(id obj) {
  OrgJsoupHelperValidate_initialize();
  if (obj == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Object must not be null");
}

void OrgJsoupHelperValidate_notNullWithId_withNSString_(id obj, NSString *msg) {
  OrgJsoupHelperValidate_initialize();
  if (obj == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(msg);
}

void OrgJsoupHelperValidate_isTrueWithBoolean_(jboolean val) {
  OrgJsoupHelperValidate_initialize();
  if (!val) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Must be true");
}

void OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(jboolean val, NSString *msg) {
  OrgJsoupHelperValidate_initialize();
  if (!val) @throw new_JavaLangIllegalArgumentException_initWithNSString_(msg);
}

void OrgJsoupHelperValidate_isFalseWithBoolean_(jboolean val) {
  OrgJsoupHelperValidate_initialize();
  if (val) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Must be false");
}

void OrgJsoupHelperValidate_isFalseWithBoolean_withNSString_(jboolean val, NSString *msg) {
  OrgJsoupHelperValidate_initialize();
  if (val) @throw new_JavaLangIllegalArgumentException_initWithNSString_(msg);
}

void OrgJsoupHelperValidate_noNullElementsWithNSObjectArray_(IOSObjectArray *objects) {
  OrgJsoupHelperValidate_initialize();
  OrgJsoupHelperValidate_noNullElementsWithNSObjectArray_withNSString_(objects, @"Array must not contain any null objects");
}

void OrgJsoupHelperValidate_noNullElementsWithNSObjectArray_withNSString_(IOSObjectArray *objects, NSString *msg) {
  OrgJsoupHelperValidate_initialize();
  {
    IOSObjectArray *a__ = objects;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id obj = *b__++;
      if (obj == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(msg);
    }
  }
}

void OrgJsoupHelperValidate_notEmptyWithNSString_(NSString *string) {
  OrgJsoupHelperValidate_initialize();
  if (string == nil || [string java_length] == 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"String must not be empty");
}

void OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(NSString *string, NSString *msg) {
  OrgJsoupHelperValidate_initialize();
  if (string == nil || [string java_length] == 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(msg);
}

void OrgJsoupHelperValidate_failWithNSString_(NSString *msg) {
  OrgJsoupHelperValidate_initialize();
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(msg);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperValidate)
