//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/helper/HttpConnection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/net/URLEncoder.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/IllegalCharsetNameException.h"
#include "java/security/KeyManagementException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/SecureRandom.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "java/util/zip/GZIPInputStream.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/HttpsURLConnection.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "org/jsoup/Connection.h"
#include "org/jsoup/HttpStatusException.h"
#include "org/jsoup/UnsupportedMimeTypeException.h"
#include "org/jsoup/helper/DataUtil.h"
#include "org/jsoup/helper/HttpConnection.h"
#include "org/jsoup/helper/StringUtil.h"
#include "org/jsoup/helper/Validate.h"
#include "org/jsoup/nodes/Document.h"
#include "org/jsoup/parser/Parser.h"
#include "org/jsoup/parser/TokenQueue.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgJsoupHelperHttpConnection () {
 @public
  id<OrgJsoupConnection_Request> req_;
  id<OrgJsoupConnection_Response> res_;
}

+ (NSString *)encodeUrlWithNSString:(NSString *)url;

+ (NSString *)encodeMimeNameWithNSString:(NSString *)val;

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection, req_, id<OrgJsoupConnection_Request>)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection, res_, id<OrgJsoupConnection_Response>)

inline NSString *OrgJsoupHelperHttpConnection_get_CONTENT_TYPE();
static NSString *OrgJsoupHelperHttpConnection_CONTENT_TYPE = @"Content-Type";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupHelperHttpConnection, CONTENT_TYPE, NSString *)

inline NSString *OrgJsoupHelperHttpConnection_get_MULTIPART_FORM_DATA();
static NSString *OrgJsoupHelperHttpConnection_MULTIPART_FORM_DATA = @"multipart/form-data";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupHelperHttpConnection, MULTIPART_FORM_DATA, NSString *)

inline NSString *OrgJsoupHelperHttpConnection_get_FORM_URL_ENCODED();
static NSString *OrgJsoupHelperHttpConnection_FORM_URL_ENCODED = @"application/x-www-form-urlencoded";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupHelperHttpConnection, FORM_URL_ENCODED, NSString *)

__attribute__((unused)) static NSString *OrgJsoupHelperHttpConnection_encodeUrlWithNSString_(NSString *url);

__attribute__((unused)) static NSString *OrgJsoupHelperHttpConnection_encodeMimeNameWithNSString_(NSString *val);

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_init(OrgJsoupHelperHttpConnection *self);

__attribute__((unused)) static OrgJsoupHelperHttpConnection *new_OrgJsoupHelperHttpConnection_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperHttpConnection *create_OrgJsoupHelperHttpConnection_init();

@interface OrgJsoupHelperHttpConnection_Base ()

- (instancetype)init;

- (NSString *)getHeaderCaseInsensitiveWithNSString:(NSString *)name;

- (id<JavaUtilMap_Entry>)scanHeadersWithNSString:(NSString *)name;

@end

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Base_init(OrgJsoupHelperHttpConnection_Base *self);

__attribute__((unused)) static NSString *OrgJsoupHelperHttpConnection_Base_getHeaderCaseInsensitiveWithNSString_(OrgJsoupHelperHttpConnection_Base *self, NSString *name);

__attribute__((unused)) static id<JavaUtilMap_Entry> OrgJsoupHelperHttpConnection_Base_scanHeadersWithNSString_(OrgJsoupHelperHttpConnection_Base *self, NSString *name);

@interface OrgJsoupHelperHttpConnection_Request () {
 @public
  jint timeoutMilliseconds_;
  jint maxBodySizeBytes_;
  jboolean followRedirects_;
  id<JavaUtilCollection> data_;
  jboolean ignoreHttpErrors_;
  jboolean ignoreContentType_;
  OrgJsoupParserParser *parser_;
  jboolean parserDefined_;
  jboolean validateTSLCertificates_;
  NSString *postDataCharset_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Request, data_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Request, parser_, OrgJsoupParserParser *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Request, postDataCharset_, NSString *)

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Request_init(OrgJsoupHelperHttpConnection_Request *self);

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Request *new_OrgJsoupHelperHttpConnection_Request_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Request *create_OrgJsoupHelperHttpConnection_Request_init();

@interface OrgJsoupHelperHttpConnection_Response () {
 @public
  jint statusCode_;
  NSString *statusMessage_;
  JavaNioByteBuffer *byteData_;
  NSString *charset_;
  NSString *contentType_;
  jboolean executed_;
  jint numRedirects_;
  id<OrgJsoupConnection_Request> req_;
}

- (instancetype)initWithOrgJsoupHelperHttpConnection_Response:(OrgJsoupHelperHttpConnection_Response *)previousResponse;

+ (JavaNetHttpURLConnection *)createConnectionWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req;

+ (id<JavaxNetSslHostnameVerifier>)getInsecureVerifier;

+ (void)initUnSecureTSL OBJC_METHOD_FAMILY_NONE;

- (void)setupFromConnectionWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)conn
                        withOrgJsoupConnection_Response:(id<OrgJsoupConnection_Response>)previousResponse;

+ (NSString *)setOutputContentTypeWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req;

+ (void)writePostWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req
                         withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                   withNSString:(NSString *)bound;

+ (NSString *)getRequestCookieStringWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req;

+ (void)serialiseRequestUrlWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req;

@end

J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Response, statusMessage_, NSString *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Response, byteData_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Response, charset_, NSString *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Response, contentType_, NSString *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_Response, req_, id<OrgJsoupConnection_Request>)

inline jint OrgJsoupHelperHttpConnection_Response_get_MAX_REDIRECTS();
#define OrgJsoupHelperHttpConnection_Response_MAX_REDIRECTS 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgJsoupHelperHttpConnection_Response, MAX_REDIRECTS, jint)

inline JavaxNetSslSSLSocketFactory *OrgJsoupHelperHttpConnection_Response_get_sslSocketFactory();
inline JavaxNetSslSSLSocketFactory *OrgJsoupHelperHttpConnection_Response_set_sslSocketFactory(JavaxNetSslSSLSocketFactory *value);
static JavaxNetSslSSLSocketFactory *OrgJsoupHelperHttpConnection_Response_sslSocketFactory;
J2OBJC_STATIC_FIELD_OBJ(OrgJsoupHelperHttpConnection_Response, sslSocketFactory, JavaxNetSslSSLSocketFactory *)

inline NSString *OrgJsoupHelperHttpConnection_Response_get_LOCATION();
static NSString *OrgJsoupHelperHttpConnection_Response_LOCATION = @"Location";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupHelperHttpConnection_Response, LOCATION, NSString *)

inline JavaUtilRegexPattern *OrgJsoupHelperHttpConnection_Response_get_xmlContentTypeRxp();
static JavaUtilRegexPattern *OrgJsoupHelperHttpConnection_Response_xmlContentTypeRxp;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupHelperHttpConnection_Response, xmlContentTypeRxp, JavaUtilRegexPattern *)

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(OrgJsoupHelperHttpConnection_Response *self, OrgJsoupHelperHttpConnection_Response *previousResponse);

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Response *new_OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(OrgJsoupHelperHttpConnection_Response *previousResponse) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Response *create_OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(OrgJsoupHelperHttpConnection_Response *previousResponse);

__attribute__((unused)) static JavaNetHttpURLConnection *OrgJsoupHelperHttpConnection_Response_createConnectionWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req);

__attribute__((unused)) static id<JavaxNetSslHostnameVerifier> OrgJsoupHelperHttpConnection_Response_getInsecureVerifier();

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_initUnSecureTSL();

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_setupFromConnectionWithJavaNetHttpURLConnection_withOrgJsoupConnection_Response_(OrgJsoupHelperHttpConnection_Response *self, JavaNetHttpURLConnection *conn, id<OrgJsoupConnection_Response> previousResponse);

__attribute__((unused)) static NSString *OrgJsoupHelperHttpConnection_Response_setOutputContentTypeWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req);

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_writePostWithOrgJsoupConnection_Request_withJavaIoOutputStream_withNSString_(id<OrgJsoupConnection_Request> req, JavaIoOutputStream *outputStream, NSString *bound);

__attribute__((unused)) static NSString *OrgJsoupHelperHttpConnection_Response_getRequestCookieStringWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req);

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_serialiseRequestUrlWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req);

@interface OrgJsoupHelperHttpConnection_Response_1 : NSObject < JavaxNetSslHostnameVerifier >

- (instancetype)init;

- (jboolean)verifyWithNSString:(NSString *)urlHostName
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupHelperHttpConnection_Response_1)

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_1_init(OrgJsoupHelperHttpConnection_Response_1 *self);

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Response_1 *new_OrgJsoupHelperHttpConnection_Response_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Response_1 *create_OrgJsoupHelperHttpConnection_Response_1_init();

@interface OrgJsoupHelperHttpConnection_Response_2 : NSObject < JavaxNetSslX509TrustManager >

- (instancetype)init;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType;

- (IOSObjectArray *)getAcceptedIssuers;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupHelperHttpConnection_Response_2)

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_Response_2_init(OrgJsoupHelperHttpConnection_Response_2 *self);

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Response_2 *new_OrgJsoupHelperHttpConnection_Response_2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperHttpConnection_Response_2 *create_OrgJsoupHelperHttpConnection_Response_2_init();

@interface OrgJsoupHelperHttpConnection_KeyVal () {
 @public
  NSString *key_;
  NSString *value_;
  JavaIoInputStream *stream_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_KeyVal, key_, NSString *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_KeyVal, value_, NSString *)
J2OBJC_FIELD_SETTER(OrgJsoupHelperHttpConnection_KeyVal, stream_, JavaIoInputStream *)

__attribute__((unused)) static void OrgJsoupHelperHttpConnection_KeyVal_init(OrgJsoupHelperHttpConnection_KeyVal *self);

__attribute__((unused)) static OrgJsoupHelperHttpConnection_KeyVal *new_OrgJsoupHelperHttpConnection_KeyVal_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupHelperHttpConnection_KeyVal *create_OrgJsoupHelperHttpConnection_KeyVal_init();

NSString *OrgJsoupHelperHttpConnection_CONTENT_ENCODING = @"Content-Encoding";

@implementation OrgJsoupHelperHttpConnection

+ (id<OrgJsoupConnection>)connectWithNSString:(NSString *)url {
  return OrgJsoupHelperHttpConnection_connectWithNSString_(url);
}

+ (id<OrgJsoupConnection>)connectWithJavaNetURL:(JavaNetURL *)url {
  return OrgJsoupHelperHttpConnection_connectWithJavaNetURL_(url);
}

+ (NSString *)encodeUrlWithNSString:(NSString *)url {
  return OrgJsoupHelperHttpConnection_encodeUrlWithNSString_(url);
}

+ (NSString *)encodeMimeNameWithNSString:(NSString *)val {
  return OrgJsoupHelperHttpConnection_encodeMimeNameWithNSString_(val);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgJsoupConnection>)urlWithJavaNetURL:(JavaNetURL *)url {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) urlWithJavaNetURL:url];
  return self;
}

- (id<OrgJsoupConnection>)urlWithNSString:(NSString *)url {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(url, @"Must supply a valid URL");
  @try {
    (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) urlWithJavaNetURL:new_JavaNetURL_initWithNSString_(OrgJsoupHelperHttpConnection_encodeUrlWithNSString_(url))];
  }
  @catch (JavaNetMalformedURLException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$", @"Malformed URL: ", url), e);
  }
  return self;
}

- (id<OrgJsoupConnection>)userAgentWithNSString:(NSString *)userAgent {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(userAgent, @"User agent must not be null");
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) headerWithNSString:@"User-Agent" withNSString:userAgent];
  return self;
}

- (id<OrgJsoupConnection>)timeoutWithInt:(jint)millis {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) timeoutWithInt:millis];
  return self;
}

- (id<OrgJsoupConnection>)maxBodySizeWithInt:(jint)bytes {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) maxBodySizeWithInt:bytes];
  return self;
}

- (id<OrgJsoupConnection>)followRedirectsWithBoolean:(jboolean)followRedirects {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) followRedirectsWithBoolean:followRedirects];
  return self;
}

- (id<OrgJsoupConnection>)referrerWithNSString:(NSString *)referrer {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(referrer, @"Referrer must not be null");
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) headerWithNSString:@"Referer" withNSString:referrer];
  return self;
}

- (id<OrgJsoupConnection>)methodWithOrgJsoupConnection_Method:(OrgJsoupConnection_Method *)method {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) methodWithOrgJsoupConnection_Method:method];
  return self;
}

- (id<OrgJsoupConnection>)ignoreHttpErrorsWithBoolean:(jboolean)ignoreHttpErrors {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) ignoreHttpErrorsWithBoolean:ignoreHttpErrors];
  return self;
}

- (id<OrgJsoupConnection>)ignoreContentTypeWithBoolean:(jboolean)ignoreContentType {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) ignoreContentTypeWithBoolean:ignoreContentType];
  return self;
}

- (id<OrgJsoupConnection>)validateTLSCertificatesWithBoolean:(jboolean)value {
  [((id<OrgJsoupConnection_Request>) nil_chk(req_)) validateTLSCertificatesWithBoolean:value];
  return self;
}

- (id<OrgJsoupConnection>)dataWithNSString:(NSString *)key
                              withNSString:(NSString *)value {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) dataWithOrgJsoupConnection_KeyVal:OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_(key, value)];
  return self;
}

- (id<OrgJsoupConnection>)dataWithNSString:(NSString *)key
                              withNSString:(NSString *)filename
                     withJavaIoInputStream:(JavaIoInputStream *)inputStream {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) dataWithOrgJsoupConnection_KeyVal:OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_withJavaIoInputStream_(key, filename, inputStream)];
  return self;
}

- (id<OrgJsoupConnection>)dataWithJavaUtilMap:(id<JavaUtilMap>)data {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(data, @"Data map must not be null");
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(data)) entrySet])) {
    (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) dataWithOrgJsoupConnection_KeyVal:OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [entry_ getValue])];
  }
  return self;
}

- (id<OrgJsoupConnection>)dataWithNSStringArray:(IOSObjectArray *)keyvals {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(keyvals, @"Data key value pairs must not be null");
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(((IOSObjectArray *) nil_chk(keyvals))->size_ % 2 == 0, @"Must supply an even number of key value pairs");
  for (jint i = 0; i < keyvals->size_; i += 2) {
    NSString *key = IOSObjectArray_Get(keyvals, i);
    NSString *value = IOSObjectArray_Get(keyvals, i + 1);
    OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(key, @"Data key must not be empty");
    OrgJsoupHelperValidate_notNullWithId_withNSString_(value, @"Data value must not be null");
    (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) dataWithOrgJsoupConnection_KeyVal:OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_(key, value)];
  }
  return self;
}

- (id<OrgJsoupConnection>)dataWithJavaUtilCollection:(id<JavaUtilCollection>)data {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(data, @"Data collection must not be null");
  for (id<OrgJsoupConnection_KeyVal> __strong entry_ in nil_chk(data)) {
    (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) dataWithOrgJsoupConnection_KeyVal:entry_];
  }
  return self;
}

- (id<OrgJsoupConnection>)headerWithNSString:(NSString *)name
                                withNSString:(NSString *)value {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) headerWithNSString:name withNSString:value];
  return self;
}

- (id<OrgJsoupConnection>)cookieWithNSString:(NSString *)name
                                withNSString:(NSString *)value {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) cookieWithNSString:name withNSString:value];
  return self;
}

- (id<OrgJsoupConnection>)cookiesWithJavaUtilMap:(id<JavaUtilMap>)cookies {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(cookies, @"Cookie map must not be null");
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(cookies)) entrySet])) {
    (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) cookieWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withNSString:[entry_ getValue]];
  }
  return self;
}

- (id<OrgJsoupConnection>)parserWithOrgJsoupParserParser:(OrgJsoupParserParser *)parser {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) parserWithOrgJsoupParserParser:parser];
  return self;
}

- (OrgJsoupNodesDocument *)get {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) methodWithOrgJsoupConnection_Method:JreLoadEnum(OrgJsoupConnection_Method, GET)];
  (void) [self execute];
  return [((id<OrgJsoupConnection_Response>) nil_chk(res_)) parse];
}

- (OrgJsoupNodesDocument *)post {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) methodWithOrgJsoupConnection_Method:JreLoadEnum(OrgJsoupConnection_Method, POST)];
  (void) [self execute];
  return [((id<OrgJsoupConnection_Response>) nil_chk(res_)) parse];
}

- (id<OrgJsoupConnection_Response>)execute {
  res_ = OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_(req_);
  return res_;
}

- (id<OrgJsoupConnection_Request>)request {
  return req_;
}

- (id<OrgJsoupConnection>)requestWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)request {
  req_ = request;
  return self;
}

- (id<OrgJsoupConnection_Response>)response {
  return res_;
}

- (id<OrgJsoupConnection>)responseWithOrgJsoupConnection_Response:(id<OrgJsoupConnection_Response>)response {
  res_ = response;
  return self;
}

- (id<OrgJsoupConnection>)postDataCharsetWithNSString:(NSString *)charset {
  (void) [((id<OrgJsoupConnection_Request>) nil_chk(req_)) postDataCharsetWithNSString:charset];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJsoupConnection;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 17, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 18, 21, -1, 22, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x81, 18, 23, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 18, 24, -1, 25, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 27, 19, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 28, 21, -1, 22, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesDocument;", 0x1, -1, -1, 31, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesDocument;", 0x1, -1, -1, 31, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Response;", 0x1, -1, -1, 31, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Response;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection;", 0x1, 36, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(connectWithNSString:);
  methods[1].selector = @selector(connectWithJavaNetURL:);
  methods[2].selector = @selector(encodeUrlWithNSString:);
  methods[3].selector = @selector(encodeMimeNameWithNSString:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(urlWithJavaNetURL:);
  methods[6].selector = @selector(urlWithNSString:);
  methods[7].selector = @selector(userAgentWithNSString:);
  methods[8].selector = @selector(timeoutWithInt:);
  methods[9].selector = @selector(maxBodySizeWithInt:);
  methods[10].selector = @selector(followRedirectsWithBoolean:);
  methods[11].selector = @selector(referrerWithNSString:);
  methods[12].selector = @selector(methodWithOrgJsoupConnection_Method:);
  methods[13].selector = @selector(ignoreHttpErrorsWithBoolean:);
  methods[14].selector = @selector(ignoreContentTypeWithBoolean:);
  methods[15].selector = @selector(validateTLSCertificatesWithBoolean:);
  methods[16].selector = @selector(dataWithNSString:withNSString:);
  methods[17].selector = @selector(dataWithNSString:withNSString:withJavaIoInputStream:);
  methods[18].selector = @selector(dataWithJavaUtilMap:);
  methods[19].selector = @selector(dataWithNSStringArray:);
  methods[20].selector = @selector(dataWithJavaUtilCollection:);
  methods[21].selector = @selector(headerWithNSString:withNSString:);
  methods[22].selector = @selector(cookieWithNSString:withNSString:);
  methods[23].selector = @selector(cookiesWithJavaUtilMap:);
  methods[24].selector = @selector(parserWithOrgJsoupParserParser:);
  methods[25].selector = @selector(get);
  methods[26].selector = @selector(post);
  methods[27].selector = @selector(execute);
  methods[28].selector = @selector(request);
  methods[29].selector = @selector(requestWithOrgJsoupConnection_Request:);
  methods[30].selector = @selector(response);
  methods[31].selector = @selector(responseWithOrgJsoupConnection_Response:);
  methods[32].selector = @selector(postDataCharsetWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONTENT_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "CONTENT_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "MULTIPART_FORM_DATA", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "FORM_URL_ENCODED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "req_", "LOrgJsoupConnection_Request;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "res_", "LOrgJsoupConnection_Response;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "connect", "LNSString;", "LJavaNetURL;", "encodeUrl", "encodeMimeName", "url", "userAgent", "timeout", "I", "maxBodySize", "followRedirects", "Z", "referrer", "method", "LOrgJsoupConnection_Method;", "ignoreHttpErrors", "ignoreContentType", "validateTLSCertificates", "data", "LNSString;LNSString;", "LNSString;LNSString;LJavaIoInputStream;", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Lorg/jsoup/Connection;", "[LNSString;", "LJavaUtilCollection;", "(Ljava/util/Collection<Lorg/jsoup/Connection$KeyVal;>;)Lorg/jsoup/Connection;", "header", "cookie", "cookies", "parser", "LOrgJsoupParserParser;", "LJavaIoIOException;", "request", "LOrgJsoupConnection_Request;", "response", "LOrgJsoupConnection_Response;", "postDataCharset", &OrgJsoupHelperHttpConnection_CONTENT_ENCODING, &OrgJsoupHelperHttpConnection_CONTENT_TYPE, &OrgJsoupHelperHttpConnection_MULTIPART_FORM_DATA, &OrgJsoupHelperHttpConnection_FORM_URL_ENCODED, "LOrgJsoupHelperHttpConnection_Base;LOrgJsoupHelperHttpConnection_Request;LOrgJsoupHelperHttpConnection_Response;LOrgJsoupHelperHttpConnection_KeyVal;" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection = { "HttpConnection", "org.jsoup.helper", ptrTable, methods, fields, 7, 0x1, 33, 6, -1, 41, -1, -1, -1 };
  return &_OrgJsoupHelperHttpConnection;
}

@end

id<OrgJsoupConnection> OrgJsoupHelperHttpConnection_connectWithNSString_(NSString *url) {
  OrgJsoupHelperHttpConnection_initialize();
  id<OrgJsoupConnection> con = new_OrgJsoupHelperHttpConnection_init();
  (void) [con urlWithNSString:url];
  return con;
}

id<OrgJsoupConnection> OrgJsoupHelperHttpConnection_connectWithJavaNetURL_(JavaNetURL *url) {
  OrgJsoupHelperHttpConnection_initialize();
  id<OrgJsoupConnection> con = new_OrgJsoupHelperHttpConnection_init();
  (void) [con urlWithJavaNetURL:url];
  return con;
}

NSString *OrgJsoupHelperHttpConnection_encodeUrlWithNSString_(NSString *url) {
  OrgJsoupHelperHttpConnection_initialize();
  if (url == nil) return nil;
  return [url java_replaceAll:@" " withReplacement:@"%20"];
}

NSString *OrgJsoupHelperHttpConnection_encodeMimeNameWithNSString_(NSString *val) {
  OrgJsoupHelperHttpConnection_initialize();
  if (val == nil) return nil;
  return [val java_replaceAll:@"\"" withReplacement:@"%22"];
}

void OrgJsoupHelperHttpConnection_init(OrgJsoupHelperHttpConnection *self) {
  NSObject_init(self);
  self->req_ = new_OrgJsoupHelperHttpConnection_Request_init();
  self->res_ = new_OrgJsoupHelperHttpConnection_Response_init();
}

OrgJsoupHelperHttpConnection *new_OrgJsoupHelperHttpConnection_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection, init)
}

OrgJsoupHelperHttpConnection *create_OrgJsoupHelperHttpConnection_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperHttpConnection)

@implementation OrgJsoupHelperHttpConnection_Base

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_Base_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaNetURL *)url {
  return url_;
}

- (id<OrgJsoupConnection_Base>)urlWithJavaNetURL:(JavaNetURL *)url {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(url, @"URL must not be null");
  self->url_ = url;
  return self;
}

- (OrgJsoupConnection_Method *)method {
  return method_;
}

- (id<OrgJsoupConnection_Base>)methodWithOrgJsoupConnection_Method:(OrgJsoupConnection_Method *)method {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(method, @"Method must not be null");
  self->method_ = method;
  return self;
}

- (NSString *)headerWithNSString:(NSString *)name {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(name, @"Header name must not be null");
  return OrgJsoupHelperHttpConnection_Base_getHeaderCaseInsensitiveWithNSString_(self, name);
}

- (id<OrgJsoupConnection_Base>)headerWithNSString:(NSString *)name
                                     withNSString:(NSString *)value {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Header name must not be empty");
  OrgJsoupHelperValidate_notNullWithId_withNSString_(value, @"Header value must not be null");
  (void) [self removeHeaderWithNSString:name];
  (void) [((id<JavaUtilMap>) nil_chk(headers_)) putWithId:name withId:value];
  return self;
}

- (jboolean)hasHeaderWithNSString:(NSString *)name {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Header name must not be empty");
  return OrgJsoupHelperHttpConnection_Base_getHeaderCaseInsensitiveWithNSString_(self, name) != nil;
}

- (jboolean)hasHeaderWithValueWithNSString:(NSString *)name
                              withNSString:(NSString *)value {
  return [self hasHeaderWithNSString:name] && [((NSString *) nil_chk([self headerWithNSString:name])) java_equalsIgnoreCase:value];
}

- (id<OrgJsoupConnection_Base>)removeHeaderWithNSString:(NSString *)name {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Header name must not be empty");
  id<JavaUtilMap_Entry> entry_ = OrgJsoupHelperHttpConnection_Base_scanHeadersWithNSString_(self, name);
  if (entry_ != nil) (void) [((id<JavaUtilMap>) nil_chk(headers_)) removeWithId:[entry_ getKey]];
  return self;
}

- (id<JavaUtilMap>)headers {
  return headers_;
}

- (NSString *)getHeaderCaseInsensitiveWithNSString:(NSString *)name {
  return OrgJsoupHelperHttpConnection_Base_getHeaderCaseInsensitiveWithNSString_(self, name);
}

- (id<JavaUtilMap_Entry>)scanHeadersWithNSString:(NSString *)name {
  return OrgJsoupHelperHttpConnection_Base_scanHeadersWithNSString_(self, name);
}

- (NSString *)cookieWithNSString:(NSString *)name {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Cookie name must not be empty");
  return [((id<JavaUtilMap>) nil_chk(cookies_)) getWithId:name];
}

- (id<OrgJsoupConnection_Base>)cookieWithNSString:(NSString *)name
                                     withNSString:(NSString *)value {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Cookie name must not be empty");
  OrgJsoupHelperValidate_notNullWithId_withNSString_(value, @"Cookie value must not be null");
  (void) [((id<JavaUtilMap>) nil_chk(cookies_)) putWithId:name withId:value];
  return self;
}

- (jboolean)hasCookieWithNSString:(NSString *)name {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Cookie name must not be empty");
  return [((id<JavaUtilMap>) nil_chk(cookies_)) containsKeyWithId:name];
}

- (id<OrgJsoupConnection_Base>)removeCookieWithNSString:(NSString *)name {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(name, @"Cookie name must not be empty");
  (void) [((id<JavaUtilMap>) nil_chk(cookies_)) removeWithId:name];
  return self;
}

- (id<JavaUtilMap>)cookies {
  return cookies_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Base;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgJsoupConnection_Method;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Base;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Base;", 0x1, 6, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Base;", 0x1, 12, 7, -1, 13, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LNSString;", 0x2, 15, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x2, 16, 7, -1, 17, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Base;", 0x1, 18, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Base;", 0x1, 20, 7, -1, 13, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(url);
  methods[2].selector = @selector(urlWithJavaNetURL:);
  methods[3].selector = @selector(method);
  methods[4].selector = @selector(methodWithOrgJsoupConnection_Method:);
  methods[5].selector = @selector(headerWithNSString:);
  methods[6].selector = @selector(headerWithNSString:withNSString:);
  methods[7].selector = @selector(hasHeaderWithNSString:);
  methods[8].selector = @selector(hasHeaderWithValueWithNSString:withNSString:);
  methods[9].selector = @selector(removeHeaderWithNSString:);
  methods[10].selector = @selector(headers);
  methods[11].selector = @selector(getHeaderCaseInsensitiveWithNSString:);
  methods[12].selector = @selector(scanHeadersWithNSString:);
  methods[13].selector = @selector(cookieWithNSString:);
  methods[14].selector = @selector(cookieWithNSString:withNSString:);
  methods[15].selector = @selector(hasCookieWithNSString:);
  methods[16].selector = @selector(removeCookieWithNSString:);
  methods[17].selector = @selector(cookies);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LJavaNetURL;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "method_", "LOrgJsoupConnection_Method;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
    { "cookies_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
  };
  static const void *ptrTable[] = { "url", "LJavaNetURL;", "(Ljava/net/URL;)TT;", "method", "LOrgJsoupConnection_Method;", "(Lorg/jsoup/Connection$Method;)TT;", "header", "LNSString;", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)TT;", "hasHeader", "hasHeaderWithValue", "removeHeader", "(Ljava/lang/String;)TT;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "getHeaderCaseInsensitive", "scanHeaders", "(Ljava/lang/String;)Ljava/util/Map$Entry<Ljava/lang/String;Ljava/lang/String;>;", "cookie", "hasCookie", "removeCookie", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgJsoupHelperHttpConnection;", "<T::Lorg/jsoup/Connection$Base;>Ljava/lang/Object;Lorg/jsoup/Connection$Base<TT;>;" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection_Base = { "Base", "org.jsoup.helper", ptrTable, methods, fields, 7, 0x40a, 18, 4, 22, -1, -1, 23, -1 };
  return &_OrgJsoupHelperHttpConnection_Base;
}

@end

void OrgJsoupHelperHttpConnection_Base_init(OrgJsoupHelperHttpConnection_Base *self) {
  NSObject_init(self);
  self->headers_ = new_JavaUtilLinkedHashMap_init();
  self->cookies_ = new_JavaUtilLinkedHashMap_init();
}

NSString *OrgJsoupHelperHttpConnection_Base_getHeaderCaseInsensitiveWithNSString_(OrgJsoupHelperHttpConnection_Base *self, NSString *name) {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(name, @"Header name must not be null");
  NSString *value = [((id<JavaUtilMap>) nil_chk(self->headers_)) getWithId:name];
  if (value == nil) value = [((id<JavaUtilMap>) nil_chk(self->headers_)) getWithId:[((NSString *) nil_chk(name)) lowercaseString]];
  if (value == nil) {
    id<JavaUtilMap_Entry> entry_ = OrgJsoupHelperHttpConnection_Base_scanHeadersWithNSString_(self, name);
    if (entry_ != nil) value = [entry_ getValue];
  }
  return value;
}

id<JavaUtilMap_Entry> OrgJsoupHelperHttpConnection_Base_scanHeadersWithNSString_(OrgJsoupHelperHttpConnection_Base *self, NSString *name) {
  NSString *lc = [((NSString *) nil_chk(name)) lowercaseString];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(self->headers_)) entrySet])) {
    if ([((NSString *) nil_chk([((NSString *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) lowercaseString])) isEqual:lc]) return entry_;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperHttpConnection_Base)

@implementation OrgJsoupHelperHttpConnection_Request

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_Request_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)timeout {
  return timeoutMilliseconds_;
}

- (OrgJsoupHelperHttpConnection_Request *)timeoutWithInt:(jint)millis {
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(millis >= 0, @"Timeout milliseconds must be 0 (infinite) or greater");
  timeoutMilliseconds_ = millis;
  return self;
}

- (jint)maxBodySize {
  return maxBodySizeBytes_;
}

- (id<OrgJsoupConnection_Request>)maxBodySizeWithInt:(jint)bytes {
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(bytes >= 0, @"maxSize must be 0 (unlimited) or larger");
  maxBodySizeBytes_ = bytes;
  return self;
}

- (jboolean)followRedirects {
  return followRedirects_;
}

- (id<OrgJsoupConnection_Request>)followRedirectsWithBoolean:(jboolean)followRedirects {
  self->followRedirects_ = followRedirects;
  return self;
}

- (jboolean)ignoreHttpErrors {
  return ignoreHttpErrors_;
}

- (jboolean)validateTLSCertificates {
  return validateTSLCertificates_;
}

- (void)validateTLSCertificatesWithBoolean:(jboolean)value {
  validateTSLCertificates_ = value;
}

- (id<OrgJsoupConnection_Request>)ignoreHttpErrorsWithBoolean:(jboolean)ignoreHttpErrors {
  self->ignoreHttpErrors_ = ignoreHttpErrors;
  return self;
}

- (jboolean)ignoreContentType {
  return ignoreContentType_;
}

- (id<OrgJsoupConnection_Request>)ignoreContentTypeWithBoolean:(jboolean)ignoreContentType {
  self->ignoreContentType_ = ignoreContentType;
  return self;
}

- (OrgJsoupHelperHttpConnection_Request *)dataWithOrgJsoupConnection_KeyVal:(id<OrgJsoupConnection_KeyVal>)keyval {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(keyval, @"Key val must not be null");
  [((id<JavaUtilCollection>) nil_chk(data_)) addWithId:keyval];
  return self;
}

- (id<JavaUtilCollection>)data {
  return data_;
}

- (OrgJsoupHelperHttpConnection_Request *)parserWithOrgJsoupParserParser:(OrgJsoupParserParser *)parser {
  self->parser_ = parser;
  parserDefined_ = true;
  return self;
}

- (OrgJsoupParserParser *)parser {
  return parser_;
}

- (id<OrgJsoupConnection_Request>)postDataCharsetWithNSString:(NSString *)charset {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(charset, @"Charset must not be null");
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(charset)) @throw new_JavaNioCharsetIllegalCharsetNameException_initWithNSString_(charset);
  self->postDataCharset_ = charset;
  return self;
}

- (NSString *)postDataCharset {
  return postDataCharset_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_Request;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Request;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Request;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Request;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Request;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_Request;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_Request;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupParserParser;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupConnection_Request;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(timeout);
  methods[2].selector = @selector(timeoutWithInt:);
  methods[3].selector = @selector(maxBodySize);
  methods[4].selector = @selector(maxBodySizeWithInt:);
  methods[5].selector = @selector(followRedirects);
  methods[6].selector = @selector(followRedirectsWithBoolean:);
  methods[7].selector = @selector(ignoreHttpErrors);
  methods[8].selector = @selector(validateTLSCertificates);
  methods[9].selector = @selector(validateTLSCertificatesWithBoolean:);
  methods[10].selector = @selector(ignoreHttpErrorsWithBoolean:);
  methods[11].selector = @selector(ignoreContentType);
  methods[12].selector = @selector(ignoreContentTypeWithBoolean:);
  methods[13].selector = @selector(dataWithOrgJsoupConnection_KeyVal:);
  methods[14].selector = @selector(data);
  methods[15].selector = @selector(parserWithOrgJsoupParserParser:);
  methods[16].selector = @selector(parser);
  methods[17].selector = @selector(postDataCharsetWithNSString:);
  methods[18].selector = @selector(postDataCharset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeoutMilliseconds_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxBodySizeBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "followRedirects_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "data_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
    { "ignoreHttpErrors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoreContentType_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parser_", "LOrgJsoupParserParser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parserDefined_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validateTSLCertificates_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postDataCharset_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "timeout", "I", "maxBodySize", "followRedirects", "Z", "validateTLSCertificates", "ignoreHttpErrors", "ignoreContentType", "data", "LOrgJsoupConnection_KeyVal;", "()Ljava/util/Collection<Lorg/jsoup/Connection$KeyVal;>;", "parser", "LOrgJsoupParserParser;", "postDataCharset", "LNSString;", "Ljava/util/Collection<Lorg/jsoup/Connection$KeyVal;>;", "LOrgJsoupHelperHttpConnection;", "Lorg/jsoup/helper/HttpConnection$Base<Lorg/jsoup/Connection$Request;>;Lorg/jsoup/Connection$Request;" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection_Request = { "Request", "org.jsoup.helper", ptrTable, methods, fields, 7, 0x9, 19, 10, 16, -1, -1, 17, -1 };
  return &_OrgJsoupHelperHttpConnection_Request;
}

@end

void OrgJsoupHelperHttpConnection_Request_init(OrgJsoupHelperHttpConnection_Request *self) {
  OrgJsoupHelperHttpConnection_Base_init(self);
  self->ignoreHttpErrors_ = false;
  self->ignoreContentType_ = false;
  self->parserDefined_ = false;
  self->validateTSLCertificates_ = true;
  self->postDataCharset_ = OrgJsoupHelperDataUtil_defaultCharset;
  self->timeoutMilliseconds_ = 3000;
  self->maxBodySizeBytes_ = 1024 * 1024;
  self->followRedirects_ = true;
  self->data_ = new_JavaUtilArrayList_init();
  self->method_ = JreLoadEnum(OrgJsoupConnection_Method, GET);
  (void) [((id<JavaUtilMap>) nil_chk(self->headers_)) putWithId:@"Accept-Encoding" withId:@"gzip"];
  self->parser_ = OrgJsoupParserParser_htmlParser();
}

OrgJsoupHelperHttpConnection_Request *new_OrgJsoupHelperHttpConnection_Request_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection_Request, init)
}

OrgJsoupHelperHttpConnection_Request *create_OrgJsoupHelperHttpConnection_Request_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection_Request, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperHttpConnection_Request)

J2OBJC_INITIALIZED_DEFN(OrgJsoupHelperHttpConnection_Response)

@implementation OrgJsoupHelperHttpConnection_Response

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_Response_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJsoupHelperHttpConnection_Response:(OrgJsoupHelperHttpConnection_Response *)previousResponse {
  OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(self, previousResponse);
  return self;
}

+ (OrgJsoupHelperHttpConnection_Response *)executeWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req {
  return OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_(req);
}

+ (OrgJsoupHelperHttpConnection_Response *)executeWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req
                                       withOrgJsoupHelperHttpConnection_Response:(OrgJsoupHelperHttpConnection_Response *)previousResponse {
  return OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_withOrgJsoupHelperHttpConnection_Response_(req, previousResponse);
}

- (jint)statusCode {
  return statusCode_;
}

- (NSString *)statusMessage {
  return statusMessage_;
}

- (NSString *)charset {
  return charset_;
}

- (NSString *)contentType {
  return contentType_;
}

- (OrgJsoupNodesDocument *)parse {
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(executed_, @"Request must be executed (with .execute(), .get(), or .post() before parsing response");
  OrgJsoupNodesDocument *doc = OrgJsoupHelperDataUtil_parseByteDataWithJavaNioByteBuffer_withNSString_withNSString_withOrgJsoupParserParser_(byteData_, charset_, [((JavaNetURL *) nil_chk(url_)) toExternalForm], [((id<OrgJsoupConnection_Request>) nil_chk(req_)) parser]);
  (void) [((JavaNioByteBuffer *) nil_chk(byteData_)) rewind];
  charset_ = [((JavaNioCharsetCharset *) nil_chk([((OrgJsoupNodesDocument_OutputSettings *) nil_chk([((OrgJsoupNodesDocument *) nil_chk(doc)) outputSettings])) charset])) name];
  return doc;
}

- (NSString *)body {
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(executed_, @"Request must be executed (with .execute(), .get(), or .post() before getting response body");
  NSString *body;
  if (charset_ == nil) body = [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_forNameWithNSString_(OrgJsoupHelperDataUtil_defaultCharset))) decodeWithJavaNioByteBuffer:byteData_])) description];
  else body = [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_forNameWithNSString_(charset_))) decodeWithJavaNioByteBuffer:byteData_])) description];
  (void) [((JavaNioByteBuffer *) nil_chk(byteData_)) rewind];
  return body;
}

- (IOSByteArray *)bodyAsBytes {
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(executed_, @"Request must be executed (with .execute(), .get(), or .post() before getting response body");
  return [((JavaNioByteBuffer *) nil_chk(byteData_)) array];
}

+ (JavaNetHttpURLConnection *)createConnectionWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req {
  return OrgJsoupHelperHttpConnection_Response_createConnectionWithOrgJsoupConnection_Request_(req);
}

+ (id<JavaxNetSslHostnameVerifier>)getInsecureVerifier {
  return OrgJsoupHelperHttpConnection_Response_getInsecureVerifier();
}

+ (void)initUnSecureTSL {
  OrgJsoupHelperHttpConnection_Response_initUnSecureTSL();
}

- (void)setupFromConnectionWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)conn
                        withOrgJsoupConnection_Response:(id<OrgJsoupConnection_Response>)previousResponse {
  OrgJsoupHelperHttpConnection_Response_setupFromConnectionWithJavaNetHttpURLConnection_withOrgJsoupConnection_Response_(self, conn, previousResponse);
}

- (void)processResponseHeadersWithJavaUtilMap:(id<JavaUtilMap>)resHeaders {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(resHeaders)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if (name == nil) continue;
    id<JavaUtilList> values = [entry_ getValue];
    if ([name java_equalsIgnoreCase:@"Set-Cookie"]) {
      for (NSString * __strong value in nil_chk(values)) {
        if (value == nil) continue;
        OrgJsoupParserTokenQueue *cd = new_OrgJsoupParserTokenQueue_initWithNSString_(value);
        NSString *cookieName = [((NSString *) nil_chk([cd chompToWithNSString:@"="])) java_trim];
        NSString *cookieVal = [((NSString *) nil_chk([cd consumeToWithNSString:@";"])) java_trim];
        if ([((NSString *) nil_chk(cookieName)) java_length] > 0) (void) [self cookieWithNSString:cookieName withNSString:cookieVal];
      }
    }
    else {
      if (![((id<JavaUtilList>) nil_chk(values)) isEmpty]) (void) [self headerWithNSString:name withNSString:[values getWithInt:0]];
    }
  }
}

+ (NSString *)setOutputContentTypeWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req {
  return OrgJsoupHelperHttpConnection_Response_setOutputContentTypeWithOrgJsoupConnection_Request_(req);
}

+ (void)writePostWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req
                         withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                   withNSString:(NSString *)bound {
  OrgJsoupHelperHttpConnection_Response_writePostWithOrgJsoupConnection_Request_withJavaIoOutputStream_withNSString_(req, outputStream, bound);
}

+ (NSString *)getRequestCookieStringWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req {
  return OrgJsoupHelperHttpConnection_Response_getRequestCookieStringWithOrgJsoupConnection_Request_(req);
}

+ (void)serialiseRequestUrlWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)req {
  OrgJsoupHelperHttpConnection_Response_serialiseRequestUrlWithOrgJsoupConnection_Request_(req);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_Response;", 0x8, 2, 3, 1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_Response;", 0x8, 2, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesDocument;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetHttpURLConnection;", 0xa, 5, 3, 1, -1, -1, -1 },
    { NULL, "LJavaxNetSslHostnameVerifier;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2a, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0xa, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgJsoupHelperHttpConnection_Response:);
  methods[2].selector = @selector(executeWithOrgJsoupConnection_Request:);
  methods[3].selector = @selector(executeWithOrgJsoupConnection_Request:withOrgJsoupHelperHttpConnection_Response:);
  methods[4].selector = @selector(statusCode);
  methods[5].selector = @selector(statusMessage);
  methods[6].selector = @selector(charset);
  methods[7].selector = @selector(contentType);
  methods[8].selector = @selector(parse);
  methods[9].selector = @selector(body);
  methods[10].selector = @selector(bodyAsBytes);
  methods[11].selector = @selector(createConnectionWithOrgJsoupConnection_Request:);
  methods[12].selector = @selector(getInsecureVerifier);
  methods[13].selector = @selector(initUnSecureTSL);
  methods[14].selector = @selector(setupFromConnectionWithJavaNetHttpURLConnection:withOrgJsoupConnection_Response:);
  methods[15].selector = @selector(processResponseHeadersWithJavaUtilMap:);
  methods[16].selector = @selector(setOutputContentTypeWithOrgJsoupConnection_Request:);
  methods[17].selector = @selector(writePostWithOrgJsoupConnection_Request:withJavaIoOutputStream:withNSString:);
  methods[18].selector = @selector(getRequestCookieStringWithOrgJsoupConnection_Request:);
  methods[19].selector = @selector(serialiseRequestUrlWithOrgJsoupConnection_Request:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_REDIRECTS", "I", .constantValue.asInt = OrgJsoupHelperHttpConnection_Response_MAX_REDIRECTS, 0x1a, -1, -1, -1, -1 },
    { "sslSocketFactory", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "LOCATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "statusCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "statusMessage_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteData_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charset_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "executed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numRedirects_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "req_", "LOrgJsoupConnection_Request;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmlContentTypeRxp", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJsoupHelperHttpConnection_Response;", "LJavaIoIOException;", "execute", "LOrgJsoupConnection_Request;", "LOrgJsoupConnection_Request;LOrgJsoupHelperHttpConnection_Response;", "createConnection", "setupFromConnection", "LJavaNetHttpURLConnection;LOrgJsoupConnection_Response;", "processResponseHeaders", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;)V", "setOutputContentType", "writePost", "LOrgJsoupConnection_Request;LJavaIoOutputStream;LNSString;", "getRequestCookieString", "serialiseRequestUrl", &OrgJsoupHelperHttpConnection_Response_sslSocketFactory, &OrgJsoupHelperHttpConnection_Response_LOCATION, &OrgJsoupHelperHttpConnection_Response_xmlContentTypeRxp, "LOrgJsoupHelperHttpConnection;", "Lorg/jsoup/helper/HttpConnection$Base<Lorg/jsoup/Connection$Response;>;Lorg/jsoup/Connection$Response;" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection_Response = { "Response", "org.jsoup.helper", ptrTable, methods, fields, 7, 0x9, 20, 12, 19, -1, -1, 20, -1 };
  return &_OrgJsoupHelperHttpConnection_Response;
}

+ (void)initialize {
  if (self == [OrgJsoupHelperHttpConnection_Response class]) {
    OrgJsoupHelperHttpConnection_Response_xmlContentTypeRxp = JavaUtilRegexPattern_compileWithNSString_(@"(application|text)/\\w*\\+?xml.*");
    J2OBJC_SET_INITIALIZED(OrgJsoupHelperHttpConnection_Response)
  }
}

@end

void OrgJsoupHelperHttpConnection_Response_init(OrgJsoupHelperHttpConnection_Response *self) {
  OrgJsoupHelperHttpConnection_Base_init(self);
  self->executed_ = false;
  self->numRedirects_ = 0;
}

OrgJsoupHelperHttpConnection_Response *new_OrgJsoupHelperHttpConnection_Response_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection_Response, init)
}

OrgJsoupHelperHttpConnection_Response *create_OrgJsoupHelperHttpConnection_Response_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection_Response, init)
}

void OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(OrgJsoupHelperHttpConnection_Response *self, OrgJsoupHelperHttpConnection_Response *previousResponse) {
  OrgJsoupHelperHttpConnection_Base_init(self);
  self->executed_ = false;
  self->numRedirects_ = 0;
  if (previousResponse != nil) {
    self->numRedirects_ = previousResponse->numRedirects_ + 1;
    if (self->numRedirects_ >= OrgJsoupHelperHttpConnection_Response_MAX_REDIRECTS) @throw new_JavaIoIOException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Too many redirects occurred trying to load URL %s", [IOSObjectArray newArrayWithObjects:(id[]){ [previousResponse url] } count:1 type:NSObject_class_()]));
  }
}

OrgJsoupHelperHttpConnection_Response *new_OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(OrgJsoupHelperHttpConnection_Response *previousResponse) {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection_Response, initWithOrgJsoupHelperHttpConnection_Response_, previousResponse)
}

OrgJsoupHelperHttpConnection_Response *create_OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(OrgJsoupHelperHttpConnection_Response *previousResponse) {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection_Response, initWithOrgJsoupHelperHttpConnection_Response_, previousResponse)
}

OrgJsoupHelperHttpConnection_Response *OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  return OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_withOrgJsoupHelperHttpConnection_Response_(req, nil);
}

OrgJsoupHelperHttpConnection_Response *OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_withOrgJsoupHelperHttpConnection_Response_(id<OrgJsoupConnection_Request> req, OrgJsoupHelperHttpConnection_Response *previousResponse) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  OrgJsoupHelperValidate_notNullWithId_withNSString_(req, @"Request must not be null");
  NSString *protocol = [((JavaNetURL *) nil_chk([((id<OrgJsoupConnection_Request>) nil_chk(req)) url])) getProtocol];
  if (![((NSString *) nil_chk(protocol)) isEqual:@"http"] && ![protocol isEqual:@"https"]) @throw new_JavaNetMalformedURLException_initWithNSString_(@"Only http & https protocols supported");
  NSString *mimeBoundary = nil;
  if (![((OrgJsoupConnection_Method *) nil_chk([req method])) hasBody] && [((id<JavaUtilCollection>) nil_chk([req data])) size] > 0) {
    OrgJsoupHelperHttpConnection_Response_serialiseRequestUrlWithOrgJsoupConnection_Request_(req);
  }
  else if ([((OrgJsoupConnection_Method *) nil_chk([req method])) hasBody]) {
    mimeBoundary = OrgJsoupHelperHttpConnection_Response_setOutputContentTypeWithOrgJsoupConnection_Request_(req);
  }
  JavaNetHttpURLConnection *conn = OrgJsoupHelperHttpConnection_Response_createConnectionWithOrgJsoupConnection_Request_(req);
  OrgJsoupHelperHttpConnection_Response *res;
  @try {
    [((JavaNetHttpURLConnection *) nil_chk(conn)) connect];
    if ([conn getDoOutput]) OrgJsoupHelperHttpConnection_Response_writePostWithOrgJsoupConnection_Request_withJavaIoOutputStream_withNSString_(req, [conn getOutputStream], mimeBoundary);
    jint status = [conn getResponseCode];
    res = new_OrgJsoupHelperHttpConnection_Response_initWithOrgJsoupHelperHttpConnection_Response_(previousResponse);
    OrgJsoupHelperHttpConnection_Response_setupFromConnectionWithJavaNetHttpURLConnection_withOrgJsoupConnection_Response_(res, conn, previousResponse);
    res->req_ = req;
    if ([res hasHeaderWithNSString:OrgJsoupHelperHttpConnection_Response_LOCATION] && [req followRedirects]) {
      (void) [req methodWithOrgJsoupConnection_Method:JreLoadEnum(OrgJsoupConnection_Method, GET)];
      [((id<JavaUtilCollection>) nil_chk([req data])) clear];
      NSString *location = [res headerWithNSString:OrgJsoupHelperHttpConnection_Response_LOCATION];
      if (location != nil && [location java_hasPrefix:@"http:/"] && [location charAtWithInt:6] != '/') location = [location java_substring:6];
      (void) [req urlWithJavaNetURL:OrgJsoupHelperStringUtil_resolveWithJavaNetURL_withNSString_([req url], OrgJsoupHelperHttpConnection_encodeUrlWithNSString_(location))];
      for (id<JavaUtilMap_Entry> __strong cookie in nil_chk([((id<JavaUtilMap>) nil_chk(res->cookies_)) entrySet])) {
        (void) [req cookieWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(cookie)) getKey] withNSString:[cookie getValue]];
      }
      return OrgJsoupHelperHttpConnection_Response_executeWithOrgJsoupConnection_Request_withOrgJsoupHelperHttpConnection_Response_(req, res);
    }
    if ((status < 200 || status >= 400) && ![req ignoreHttpErrors]) @throw new_OrgJsoupHttpStatusException_initWithNSString_withInt_withNSString_(@"HTTP error fetching URL", status, [((JavaNetURL *) nil_chk([req url])) description]);
    NSString *contentType = [res contentType];
    if (contentType != nil && ![req ignoreContentType] && ![contentType java_hasPrefix:@"text/"] && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgJsoupHelperHttpConnection_Response_xmlContentTypeRxp)) matcherWithJavaLangCharSequence:contentType])) matches]) @throw new_OrgJsoupUnsupportedMimeTypeException_initWithNSString_withNSString_withNSString_(@"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", contentType, [((JavaNetURL *) nil_chk([req url])) description]);
    if (contentType != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgJsoupHelperHttpConnection_Response_xmlContentTypeRxp)) matcherWithJavaLangCharSequence:contentType])) matches]) {
      if ([req isKindOfClass:[OrgJsoupHelperHttpConnection_Request class]] && !((OrgJsoupHelperHttpConnection_Request *) cast_chk(req, [OrgJsoupHelperHttpConnection_Request class]))->parserDefined_) {
        (void) [req parserWithOrgJsoupParserParser:OrgJsoupParserParser_xmlParser()];
      }
    }
    res->charset_ = OrgJsoupHelperDataUtil_getCharsetFromContentTypeWithNSString_(res->contentType_);
    if ([conn getContentLength] != 0) {
      JavaIoInputStream *bodyStream = nil;
      JavaIoInputStream *dataStream = nil;
      @try {
        dataStream = [conn getErrorStream] != nil ? [conn getErrorStream] : [conn getInputStream];
        bodyStream = [res hasHeaderWithValueWithNSString:OrgJsoupHelperHttpConnection_CONTENT_ENCODING withNSString:@"gzip"] ? new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(dataStream)) : new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(dataStream);
        res->byteData_ = OrgJsoupHelperDataUtil_readToByteBufferWithJavaIoInputStream_withInt_(bodyStream, [req maxBodySize]);
      }
      @finally {
        if (bodyStream != nil) [bodyStream close];
        if (dataStream != nil) [dataStream close];
      }
    }
    else {
      res->byteData_ = OrgJsoupHelperDataUtil_emptyByteBuffer();
    }
  }
  @finally {
    [conn disconnect];
  }
  ((OrgJsoupHelperHttpConnection_Response *) nil_chk(res))->executed_ = true;
  return res;
}

JavaNetHttpURLConnection *OrgJsoupHelperHttpConnection_Response_createConnectionWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  JavaNetHttpURLConnection *conn = (JavaNetHttpURLConnection *) cast_chk([((JavaNetURL *) nil_chk([((id<OrgJsoupConnection_Request>) nil_chk(req)) url])) openConnection], [JavaNetHttpURLConnection class]);
  [((JavaNetHttpURLConnection *) nil_chk(conn)) setRequestMethodWithNSString:[((OrgJsoupConnection_Method *) nil_chk([req method])) name]];
  [conn setInstanceFollowRedirectsWithBoolean:false];
  [conn setConnectTimeoutWithInt:[req timeout]];
  [conn setReadTimeoutWithInt:[req timeout]];
  if ([conn isKindOfClass:[JavaxNetSslHttpsURLConnection class]]) {
    if (![req validateTLSCertificates]) {
      OrgJsoupHelperHttpConnection_Response_initUnSecureTSL();
      [((JavaxNetSslHttpsURLConnection *) cast_chk(conn, [JavaxNetSslHttpsURLConnection class])) setSSLSocketFactoryWithJavaxNetSslSSLSocketFactory:OrgJsoupHelperHttpConnection_Response_sslSocketFactory];
      [((JavaxNetSslHttpsURLConnection *) cast_chk(conn, [JavaxNetSslHttpsURLConnection class])) setHostnameVerifierWithJavaxNetSslHostnameVerifier:OrgJsoupHelperHttpConnection_Response_getInsecureVerifier()];
    }
  }
  if ([((OrgJsoupConnection_Method *) nil_chk([req method])) hasBody]) [conn setDoOutputWithBoolean:true];
  if ([((id<JavaUtilMap>) nil_chk([req cookies])) size] > 0) [conn addRequestPropertyWithNSString:@"Cookie" withNSString:OrgJsoupHelperHttpConnection_Response_getRequestCookieStringWithOrgJsoupConnection_Request_(req)];
  for (id<JavaUtilMap_Entry> __strong header in nil_chk([((id<JavaUtilMap>) nil_chk([req headers])) entrySet])) {
    [conn addRequestPropertyWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(header)) getKey] withNSString:[header getValue]];
  }
  return conn;
}

id<JavaxNetSslHostnameVerifier> OrgJsoupHelperHttpConnection_Response_getInsecureVerifier() {
  OrgJsoupHelperHttpConnection_Response_initialize();
  return new_OrgJsoupHelperHttpConnection_Response_1_init();
}

void OrgJsoupHelperHttpConnection_Response_initUnSecureTSL() {
  OrgJsoupHelperHttpConnection_Response_initialize();
  @synchronized(OrgJsoupHelperHttpConnection_Response_class_()) {
    if (OrgJsoupHelperHttpConnection_Response_sslSocketFactory == nil) {
      IOSObjectArray *trustAllCerts = [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJsoupHelperHttpConnection_Response_2_init() } count:1 type:JavaxNetSslTrustManager_class_()];
      JavaxNetSslSSLContext *sslContext;
      @try {
        sslContext = JavaxNetSslSSLContext_getInstanceWithNSString_(@"SSL");
        [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:trustAllCerts withJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()];
        OrgJsoupHelperHttpConnection_Response_sslSocketFactory = [sslContext getSocketFactory];
      }
      @catch (JavaSecurityNoSuchAlgorithmException *e) {
        @throw new_JavaIoIOException_initWithNSString_(@"Can't create unsecure trust manager");
      }
      @catch (JavaSecurityKeyManagementException *e) {
        @throw new_JavaIoIOException_initWithNSString_(@"Can't create unsecure trust manager");
      }
    }
  }
}

void OrgJsoupHelperHttpConnection_Response_setupFromConnectionWithJavaNetHttpURLConnection_withOrgJsoupConnection_Response_(OrgJsoupHelperHttpConnection_Response *self, JavaNetHttpURLConnection *conn, id<OrgJsoupConnection_Response> previousResponse) {
  self->method_ = OrgJsoupConnection_Method_valueOfWithNSString_([((JavaNetHttpURLConnection *) nil_chk(conn)) getRequestMethod]);
  self->url_ = [conn getURL];
  self->statusCode_ = [conn getResponseCode];
  self->statusMessage_ = [conn getResponseMessage];
  self->contentType_ = [conn getContentType];
  id<JavaUtilMap> resHeaders = [conn getHeaderFields];
  [self processResponseHeadersWithJavaUtilMap:resHeaders];
  if (previousResponse != nil) {
    for (id<JavaUtilMap_Entry> __strong prevCookie in nil_chk([((id<JavaUtilMap>) nil_chk([previousResponse cookies])) entrySet])) {
      if (![self hasCookieWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(prevCookie)) getKey]]) (void) [self cookieWithNSString:[prevCookie getKey] withNSString:[prevCookie getValue]];
    }
  }
}

NSString *OrgJsoupHelperHttpConnection_Response_setOutputContentTypeWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  jboolean needsMulti = false;
  for (id<OrgJsoupConnection_KeyVal> __strong keyVal in nil_chk([((id<OrgJsoupConnection_Request>) nil_chk(req)) data])) {
    if ([((id<OrgJsoupConnection_KeyVal>) nil_chk(keyVal)) hasInputStream]) {
      needsMulti = true;
      break;
    }
  }
  NSString *bound = nil;
  if (needsMulti) {
    bound = OrgJsoupHelperDataUtil_mimeBoundary();
    (void) [req headerWithNSString:OrgJsoupHelperHttpConnection_CONTENT_TYPE withNSString:JreStrcat("$$$", OrgJsoupHelperHttpConnection_MULTIPART_FORM_DATA, @"; boundary=", bound)];
  }
  else {
    (void) [req headerWithNSString:OrgJsoupHelperHttpConnection_CONTENT_TYPE withNSString:JreStrcat("$$$", OrgJsoupHelperHttpConnection_FORM_URL_ENCODED, @"; charset=", [req postDataCharset])];
  }
  return bound;
}

void OrgJsoupHelperHttpConnection_Response_writePostWithOrgJsoupConnection_Request_withJavaIoOutputStream_withNSString_(id<OrgJsoupConnection_Request> req, JavaIoOutputStream *outputStream, NSString *bound) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  id<JavaUtilCollection> data = [((id<OrgJsoupConnection_Request>) nil_chk(req)) data];
  JavaIoBufferedWriter *w = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(outputStream, OrgJsoupHelperDataUtil_defaultCharset));
  if (bound != nil) {
    for (id<OrgJsoupConnection_KeyVal> __strong keyVal in nil_chk(data)) {
      [w writeWithNSString:@"--"];
      [w writeWithNSString:bound];
      [w writeWithNSString:@"\x0d\n"];
      [w writeWithNSString:@"Content-Disposition: form-data; name=\""];
      [w writeWithNSString:OrgJsoupHelperHttpConnection_encodeMimeNameWithNSString_([((id<OrgJsoupConnection_KeyVal>) nil_chk(keyVal)) key])];
      [w writeWithNSString:@"\""];
      if ([keyVal hasInputStream]) {
        [w writeWithNSString:@"; filename=\""];
        [w writeWithNSString:OrgJsoupHelperHttpConnection_encodeMimeNameWithNSString_([keyVal value])];
        [w writeWithNSString:@"\"\x0d\nContent-Type: application/octet-stream\x0d\n\x0d\n"];
        [w flush];
        OrgJsoupHelperDataUtil_crossStreamsWithJavaIoInputStream_withJavaIoOutputStream_([keyVal inputStream], outputStream);
        [((JavaIoOutputStream *) nil_chk(outputStream)) flush];
      }
      else {
        [w writeWithNSString:@"\x0d\n\x0d\n"];
        [w writeWithNSString:[keyVal value]];
      }
      [w writeWithNSString:@"\x0d\n"];
    }
    [w writeWithNSString:@"--"];
    [w writeWithNSString:bound];
    [w writeWithNSString:@"--"];
  }
  else {
    jboolean first = true;
    for (id<OrgJsoupConnection_KeyVal> __strong keyVal in nil_chk(data)) {
      if (!first) (void) [w appendWithChar:'&'];
      else first = false;
      [w writeWithNSString:JavaNetURLEncoder_encodeWithNSString_withNSString_([((id<OrgJsoupConnection_KeyVal>) nil_chk(keyVal)) key], [req postDataCharset])];
      [w writeWithInt:'='];
      [w writeWithNSString:JavaNetURLEncoder_encodeWithNSString_withNSString_([keyVal value], [req postDataCharset])];
    }
  }
  [w close];
}

NSString *OrgJsoupHelperHttpConnection_Response_getRequestCookieStringWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean first = true;
  for (id<JavaUtilMap_Entry> __strong cookie in nil_chk([((id<JavaUtilMap>) nil_chk([((id<OrgJsoupConnection_Request>) nil_chk(req)) cookies])) entrySet])) {
    if (!first) (void) [sb appendWithNSString:@"; "];
    else first = false;
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(cookie)) getKey]])) appendWithChar:'='])) appendWithNSString:[cookie getValue]];
  }
  return [sb description];
}

void OrgJsoupHelperHttpConnection_Response_serialiseRequestUrlWithOrgJsoupConnection_Request_(id<OrgJsoupConnection_Request> req) {
  OrgJsoupHelperHttpConnection_Response_initialize();
  JavaNetURL *in = [((id<OrgJsoupConnection_Request>) nil_chk(req)) url];
  JavaLangStringBuilder *url = new_JavaLangStringBuilder_init();
  jboolean first = true;
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([url appendWithNSString:[((JavaNetURL *) nil_chk(in)) getProtocol]])) appendWithNSString:@"://"])) appendWithNSString:[in getAuthority]])) appendWithNSString:[in getPath]])) appendWithNSString:@"?"];
  if ([in getQuery] != nil) {
    (void) [url appendWithNSString:[in getQuery]];
    first = false;
  }
  for (id<OrgJsoupConnection_KeyVal> __strong keyVal in nil_chk([req data])) {
    if (!first) (void) [url appendWithChar:'&'];
    else first = false;
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([url appendWithNSString:JavaNetURLEncoder_encodeWithNSString_withNSString_([((id<OrgJsoupConnection_KeyVal>) nil_chk(keyVal)) key], OrgJsoupHelperDataUtil_defaultCharset)])) appendWithChar:'='])) appendWithNSString:JavaNetURLEncoder_encodeWithNSString_withNSString_([keyVal value], OrgJsoupHelperDataUtil_defaultCharset)];
  }
  (void) [req urlWithJavaNetURL:new_JavaNetURL_initWithNSString_([url description])];
  [((id<JavaUtilCollection>) nil_chk([req data])) clear];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperHttpConnection_Response)

@implementation OrgJsoupHelperHttpConnection_Response_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_Response_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)verifyWithNSString:(NSString *)urlHostName
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyWithNSString:withJavaxNetSslSSLSession:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LNSString;LJavaxNetSslSSLSession;", "LOrgJsoupHelperHttpConnection_Response;", "getInsecureVerifier" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection_Response_1 = { "", "org.jsoup.helper", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_OrgJsoupHelperHttpConnection_Response_1;
}

@end

void OrgJsoupHelperHttpConnection_Response_1_init(OrgJsoupHelperHttpConnection_Response_1 *self) {
  NSObject_init(self);
}

OrgJsoupHelperHttpConnection_Response_1 *new_OrgJsoupHelperHttpConnection_Response_1_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection_Response_1, init)
}

OrgJsoupHelperHttpConnection_Response_1 *create_OrgJsoupHelperHttpConnection_Response_1_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection_Response_1, init)
}

@implementation OrgJsoupHelperHttpConnection_Response_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_Response_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
}

- (IOSObjectArray *)getAcceptedIssuers {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[2].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(getAcceptedIssuers);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "checkServerTrusted", "LOrgJsoupHelperHttpConnection_Response;", "initUnSecureTSL" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection_Response_2 = { "", "org.jsoup.helper", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 3, -1, 4, -1, -1 };
  return &_OrgJsoupHelperHttpConnection_Response_2;
}

@end

void OrgJsoupHelperHttpConnection_Response_2_init(OrgJsoupHelperHttpConnection_Response_2 *self) {
  NSObject_init(self);
}

OrgJsoupHelperHttpConnection_Response_2 *new_OrgJsoupHelperHttpConnection_Response_2_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection_Response_2, init)
}

OrgJsoupHelperHttpConnection_Response_2 *create_OrgJsoupHelperHttpConnection_Response_2_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection_Response_2, init)
}

@implementation OrgJsoupHelperHttpConnection_KeyVal

+ (OrgJsoupHelperHttpConnection_KeyVal *)createWithNSString:(NSString *)key
                                               withNSString:(NSString *)value {
  return OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_(key, value);
}

+ (OrgJsoupHelperHttpConnection_KeyVal *)createWithNSString:(NSString *)key
                                               withNSString:(NSString *)filename
                                      withJavaIoInputStream:(JavaIoInputStream *)stream {
  return OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_withJavaIoInputStream_(key, filename, stream);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperHttpConnection_KeyVal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJsoupHelperHttpConnection_KeyVal *)keyWithNSString:(NSString *)key {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(key, @"Data key must not be empty");
  self->key_ = key;
  return self;
}

- (NSString *)key {
  return key_;
}

- (OrgJsoupHelperHttpConnection_KeyVal *)valueWithNSString:(NSString *)value {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(value, @"Data value must not be null");
  self->value_ = value;
  return self;
}

- (NSString *)value {
  return value_;
}

- (OrgJsoupHelperHttpConnection_KeyVal *)inputStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(value_, @"Data input stream must not be null");
  self->stream_ = inputStream;
  return self;
}

- (JavaIoInputStream *)inputStream {
  return stream_;
}

- (jboolean)hasInputStream {
  return stream_ != nil;
}

- (NSString *)description {
  return JreStrcat("$C$", key_, '=', value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJsoupHelperHttpConnection_KeyVal;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_KeyVal;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_KeyVal;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_KeyVal;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupHelperHttpConnection_KeyVal;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithNSString:withNSString:);
  methods[1].selector = @selector(createWithNSString:withNSString:withJavaIoInputStream:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(keyWithNSString:);
  methods[4].selector = @selector(key);
  methods[5].selector = @selector(valueWithNSString:);
  methods[6].selector = @selector(value);
  methods[7].selector = @selector(inputStreamWithJavaIoInputStream:);
  methods[8].selector = @selector(inputStream);
  methods[9].selector = @selector(hasInputStream);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LNSString;LNSString;", "LNSString;LNSString;LJavaIoInputStream;", "key", "LNSString;", "value", "inputStream", "LJavaIoInputStream;", "toString", "LOrgJsoupHelperHttpConnection;" };
  static const J2ObjcClassInfo _OrgJsoupHelperHttpConnection_KeyVal = { "KeyVal", "org.jsoup.helper", ptrTable, methods, fields, 7, 0x9, 11, 3, 9, -1, -1, -1, -1 };
  return &_OrgJsoupHelperHttpConnection_KeyVal;
}

@end

OrgJsoupHelperHttpConnection_KeyVal *OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_(NSString *key, NSString *value) {
  OrgJsoupHelperHttpConnection_KeyVal_initialize();
  return [((OrgJsoupHelperHttpConnection_KeyVal *) nil_chk([new_OrgJsoupHelperHttpConnection_KeyVal_init() keyWithNSString:key])) valueWithNSString:value];
}

OrgJsoupHelperHttpConnection_KeyVal *OrgJsoupHelperHttpConnection_KeyVal_createWithNSString_withNSString_withJavaIoInputStream_(NSString *key, NSString *filename, JavaIoInputStream *stream) {
  OrgJsoupHelperHttpConnection_KeyVal_initialize();
  return [((OrgJsoupHelperHttpConnection_KeyVal *) nil_chk([((OrgJsoupHelperHttpConnection_KeyVal *) nil_chk([new_OrgJsoupHelperHttpConnection_KeyVal_init() keyWithNSString:key])) valueWithNSString:filename])) inputStreamWithJavaIoInputStream:stream];
}

void OrgJsoupHelperHttpConnection_KeyVal_init(OrgJsoupHelperHttpConnection_KeyVal *self) {
  NSObject_init(self);
}

OrgJsoupHelperHttpConnection_KeyVal *new_OrgJsoupHelperHttpConnection_KeyVal_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperHttpConnection_KeyVal, init)
}

OrgJsoupHelperHttpConnection_KeyVal *create_OrgJsoupHelperHttpConnection_KeyVal_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperHttpConnection_KeyVal, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperHttpConnection_KeyVal)
