//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/nodes/DocumentType.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/jsoup/helper/StringUtil.h"
#include "org/jsoup/nodes/Document.h"
#include "org/jsoup/nodes/DocumentType.h"
#include "org/jsoup/nodes/Node.h"

@interface OrgJsoupNodesDocumentType ()

- (jboolean)hasWithNSString:(NSString *)attribute;

@end

inline NSString *OrgJsoupNodesDocumentType_get_NAME(void);
static NSString *OrgJsoupNodesDocumentType_NAME = @"name";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesDocumentType, NAME, NSString *)

inline NSString *OrgJsoupNodesDocumentType_get_PUBLIC_ID(void);
static NSString *OrgJsoupNodesDocumentType_PUBLIC_ID = @"publicId";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesDocumentType, PUBLIC_ID, NSString *)

inline NSString *OrgJsoupNodesDocumentType_get_SYSTEM_ID(void);
static NSString *OrgJsoupNodesDocumentType_SYSTEM_ID = @"systemId";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesDocumentType, SYSTEM_ID, NSString *)

__attribute__((unused)) static jboolean OrgJsoupNodesDocumentType_hasWithNSString_(OrgJsoupNodesDocumentType *self, NSString *attribute);

@implementation OrgJsoupNodesDocumentType

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)publicId
                    withNSString:(NSString *)systemId
                    withNSString:(NSString *)baseUri {
  OrgJsoupNodesDocumentType_initWithNSString_withNSString_withNSString_withNSString_(self, name, publicId, systemId, baseUri);
  return self;
}

- (NSString *)nodeName {
  return @"#doctype";
}

- (void)outerHtmlHeadWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg {
  if ([((OrgJsoupNodesDocument_OutputSettings *) nil_chk(outArg)) syntax] == JreLoadEnum(OrgJsoupNodesDocument_OutputSettings_Syntax, html) && !OrgJsoupNodesDocumentType_hasWithNSString_(self, OrgJsoupNodesDocumentType_PUBLIC_ID) && !OrgJsoupNodesDocumentType_hasWithNSString_(self, OrgJsoupNodesDocumentType_SYSTEM_ID)) {
    (void) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"<!doctype"];
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"<!DOCTYPE"];
  }
  if (OrgJsoupNodesDocumentType_hasWithNSString_(self, OrgJsoupNodesDocumentType_NAME)) (void) [((JavaLangStringBuilder *) nil_chk([accum appendWithNSString:@" "])) appendWithNSString:[self attrWithNSString:OrgJsoupNodesDocumentType_NAME]];
  if (OrgJsoupNodesDocumentType_hasWithNSString_(self, OrgJsoupNodesDocumentType_PUBLIC_ID)) (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([accum appendWithNSString:@" PUBLIC \""])) appendWithNSString:[self attrWithNSString:OrgJsoupNodesDocumentType_PUBLIC_ID]])) appendWithChar:'"'];
  if (OrgJsoupNodesDocumentType_hasWithNSString_(self, OrgJsoupNodesDocumentType_SYSTEM_ID)) (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([accum appendWithNSString:@" \""])) appendWithNSString:[self attrWithNSString:OrgJsoupNodesDocumentType_SYSTEM_ID]])) appendWithChar:'"'];
  (void) [accum appendWithChar:'>'];
}

- (void)outerHtmlTailWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg {
}

- (jboolean)hasWithNSString:(NSString *)attribute {
  return OrgJsoupNodesDocumentType_hasWithNSString_(self, attribute);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:);
  methods[1].selector = @selector(nodeName);
  methods[2].selector = @selector(outerHtmlHeadWithJavaLangStringBuilder:withInt:withOrgJsoupNodesDocument_OutputSettings:);
  methods[3].selector = @selector(outerHtmlTailWithJavaLangStringBuilder:withInt:withOrgJsoupNodesDocument_OutputSettings:);
  methods[4].selector = @selector(hasWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "PUBLIC_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "SYSTEM_ID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;LNSString;", "outerHtmlHead", "LJavaLangStringBuilder;ILOrgJsoupNodesDocument_OutputSettings;", "outerHtmlTail", "has", "LNSString;", &OrgJsoupNodesDocumentType_NAME, &OrgJsoupNodesDocumentType_PUBLIC_ID, &OrgJsoupNodesDocumentType_SYSTEM_ID };
  static const J2ObjcClassInfo _OrgJsoupNodesDocumentType = { "DocumentType", "org.jsoup.nodes", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgJsoupNodesDocumentType;
}

@end

void OrgJsoupNodesDocumentType_initWithNSString_withNSString_withNSString_withNSString_(OrgJsoupNodesDocumentType *self, NSString *name, NSString *publicId, NSString *systemId, NSString *baseUri) {
  OrgJsoupNodesNode_initWithNSString_(self, baseUri);
  (void) [self attrWithNSString:OrgJsoupNodesDocumentType_NAME withNSString:name];
  (void) [self attrWithNSString:OrgJsoupNodesDocumentType_PUBLIC_ID withNSString:publicId];
  (void) [self attrWithNSString:OrgJsoupNodesDocumentType_SYSTEM_ID withNSString:systemId];
}

OrgJsoupNodesDocumentType *new_OrgJsoupNodesDocumentType_initWithNSString_withNSString_withNSString_withNSString_(NSString *name, NSString *publicId, NSString *systemId, NSString *baseUri) {
  J2OBJC_NEW_IMPL(OrgJsoupNodesDocumentType, initWithNSString_withNSString_withNSString_withNSString_, name, publicId, systemId, baseUri)
}

OrgJsoupNodesDocumentType *create_OrgJsoupNodesDocumentType_initWithNSString_withNSString_withNSString_withNSString_(NSString *name, NSString *publicId, NSString *systemId, NSString *baseUri) {
  J2OBJC_CREATE_IMPL(OrgJsoupNodesDocumentType, initWithNSString_withNSString_withNSString_withNSString_, name, publicId, systemId, baseUri)
}

jboolean OrgJsoupNodesDocumentType_hasWithNSString_(OrgJsoupNodesDocumentType *self, NSString *attribute) {
  return !OrgJsoupHelperStringUtil_isBlankWithNSString_([self attrWithNSString:attribute]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupNodesDocumentType)
