//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/parser/TreeBuilder.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/jsoup/helper/Validate.h"
#include "org/jsoup/nodes/Attributes.h"
#include "org/jsoup/nodes/Document.h"
#include "org/jsoup/nodes/Element.h"
#include "org/jsoup/parser/CharacterReader.h"
#include "org/jsoup/parser/ParseErrorList.h"
#include "org/jsoup/parser/Token.h"
#include "org/jsoup/parser/Tokeniser.h"
#include "org/jsoup/parser/TreeBuilder.h"

@interface OrgJsoupParserTreeBuilder () {
 @public
  OrgJsoupParserToken_StartTag *start_;
  OrgJsoupParserToken_EndTag *end_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupParserTreeBuilder, start_, OrgJsoupParserToken_StartTag *)
J2OBJC_FIELD_SETTER(OrgJsoupParserTreeBuilder, end_, OrgJsoupParserToken_EndTag *)

@implementation OrgJsoupParserTreeBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupParserTreeBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialiseParseWithNSString:(NSString *)input
                       withNSString:(NSString *)baseUri
   withOrgJsoupParserParseErrorList:(OrgJsoupParserParseErrorList *)errors {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(input, @"String input must not be null");
  OrgJsoupHelperValidate_notNullWithId_withNSString_(baseUri, @"BaseURI must not be null");
  doc_ = new_OrgJsoupNodesDocument_initWithNSString_(baseUri);
  reader_ = new_OrgJsoupParserCharacterReader_initWithNSString_(input);
  self->errors_ = errors;
  tokeniser_ = new_OrgJsoupParserTokeniser_initWithOrgJsoupParserCharacterReader_withOrgJsoupParserParseErrorList_(reader_, errors);
  stack_ = new_JavaUtilArrayList_initWithInt_(32);
  self->baseUri_ = baseUri;
}

- (OrgJsoupNodesDocument *)parseWithNSString:(NSString *)input
                                withNSString:(NSString *)baseUri {
  return [self parseWithNSString:input withNSString:baseUri withOrgJsoupParserParseErrorList:OrgJsoupParserParseErrorList_noTracking()];
}

- (OrgJsoupNodesDocument *)parseWithNSString:(NSString *)input
                                withNSString:(NSString *)baseUri
            withOrgJsoupParserParseErrorList:(OrgJsoupParserParseErrorList *)errors {
  [self initialiseParseWithNSString:input withNSString:baseUri withOrgJsoupParserParseErrorList:errors];
  [self runParser];
  return doc_;
}

- (void)runParser {
  while (true) {
    OrgJsoupParserToken *token = [((OrgJsoupParserTokeniser *) nil_chk(tokeniser_)) read];
    [self processWithOrgJsoupParserToken:token];
    (void) [((OrgJsoupParserToken *) nil_chk(token)) reset];
    if (token->type_ == JreLoadEnum(OrgJsoupParserToken_TokenType, EOF)) break;
  }
}

- (jboolean)processWithOrgJsoupParserToken:(OrgJsoupParserToken *)token {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)processStartTagWithNSString:(NSString *)name {
  if (currentToken_ == start_) {
    return [self processWithOrgJsoupParserToken:[new_OrgJsoupParserToken_StartTag_init() nameWithNSString:name]];
  }
  return [self processWithOrgJsoupParserToken:[((OrgJsoupParserToken_Tag *) nil_chk([((OrgJsoupParserToken_StartTag *) nil_chk(start_)) reset])) nameWithNSString:name]];
}

- (jboolean)processStartTagWithNSString:(NSString *)name
            withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)attrs {
  if (currentToken_ == start_) {
    return [self processWithOrgJsoupParserToken:[new_OrgJsoupParserToken_StartTag_init() nameAttrWithNSString:name withOrgJsoupNodesAttributes:attrs]];
  }
  (void) [((OrgJsoupParserToken_StartTag *) nil_chk(start_)) reset];
  (void) [((OrgJsoupParserToken_StartTag *) nil_chk(start_)) nameAttrWithNSString:name withOrgJsoupNodesAttributes:attrs];
  return [self processWithOrgJsoupParserToken:start_];
}

- (jboolean)processEndTagWithNSString:(NSString *)name {
  if (currentToken_ == end_) {
    return [self processWithOrgJsoupParserToken:[new_OrgJsoupParserToken_EndTag_init() nameWithNSString:name]];
  }
  return [self processWithOrgJsoupParserToken:[((OrgJsoupParserToken_Tag *) nil_chk([((OrgJsoupParserToken_EndTag *) nil_chk(end_)) reset])) nameWithNSString:name]];
}

- (OrgJsoupNodesElement *)currentElement {
  jint size = [((JavaUtilArrayList *) nil_chk(stack_)) size];
  return size > 0 ? [((JavaUtilArrayList *) nil_chk(stack_)) getWithInt:size - 1] : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesDocument;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesDocument;", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 9, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialiseParseWithNSString:withNSString:withOrgJsoupParserParseErrorList:);
  methods[2].selector = @selector(parseWithNSString:withNSString:);
  methods[3].selector = @selector(parseWithNSString:withNSString:withOrgJsoupParserParseErrorList:);
  methods[4].selector = @selector(runParser);
  methods[5].selector = @selector(processWithOrgJsoupParserToken:);
  methods[6].selector = @selector(processStartTagWithNSString:);
  methods[7].selector = @selector(processStartTagWithNSString:withOrgJsoupNodesAttributes:);
  methods[8].selector = @selector(processEndTagWithNSString:);
  methods[9].selector = @selector(currentElement);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LOrgJsoupParserCharacterReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tokeniser_", "LOrgJsoupParserTokeniser;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doc_", "LOrgJsoupNodesDocument;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stack_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 10, -1 },
    { "baseUri_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "currentToken_", "LOrgJsoupParserToken;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "errors_", "LOrgJsoupParserParseErrorList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "start_", "LOrgJsoupParserToken_StartTag;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "end_", "LOrgJsoupParserToken_EndTag;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialiseParse", "LNSString;LNSString;LOrgJsoupParserParseErrorList;", "parse", "LNSString;LNSString;", "process", "LOrgJsoupParserToken;", "processStartTag", "LNSString;", "LNSString;LOrgJsoupNodesAttributes;", "processEndTag", "Ljava/util/ArrayList<Lorg/jsoup/nodes/Element;>;" };
  static const J2ObjcClassInfo _OrgJsoupParserTreeBuilder = { "TreeBuilder", "org.jsoup.parser", ptrTable, methods, fields, 7, 0x400, 10, 9, -1, -1, -1, -1, -1 };
  return &_OrgJsoupParserTreeBuilder;
}

@end

void OrgJsoupParserTreeBuilder_init(OrgJsoupParserTreeBuilder *self) {
  NSObject_init(self);
  self->start_ = new_OrgJsoupParserToken_StartTag_init();
  self->end_ = new_OrgJsoupParserToken_EndTag_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupParserTreeBuilder)
