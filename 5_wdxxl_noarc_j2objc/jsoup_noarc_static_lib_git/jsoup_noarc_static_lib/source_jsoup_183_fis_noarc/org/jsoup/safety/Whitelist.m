//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/safety/Whitelist.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/jsoup/helper/Validate.h"
#include "org/jsoup/nodes/Attribute.h"
#include "org/jsoup/nodes/Attributes.h"
#include "org/jsoup/nodes/Element.h"
#include "org/jsoup/safety/Whitelist.h"

@interface OrgJsoupSafetyWhitelist () {
 @public
  id<JavaUtilSet> tagNames_;
  id<JavaUtilMap> attributes_;
  id<JavaUtilMap> enforcedAttributes_;
  id<JavaUtilMap> protocols_;
  jboolean preserveRelativeLinks_;
}

- (jboolean)testValidProtocolWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)el
                           withOrgJsoupNodesAttribute:(OrgJsoupNodesAttribute *)attr
                                      withJavaUtilSet:(id<JavaUtilSet>)protocols;

- (jboolean)isValidAnchorWithNSString:(NSString *)value;

@end

J2OBJC_FIELD_SETTER(OrgJsoupSafetyWhitelist, tagNames_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgJsoupSafetyWhitelist, attributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgJsoupSafetyWhitelist, enforcedAttributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgJsoupSafetyWhitelist, protocols_, id<JavaUtilMap>)

__attribute__((unused)) static jboolean OrgJsoupSafetyWhitelist_testValidProtocolWithOrgJsoupNodesElement_withOrgJsoupNodesAttribute_withJavaUtilSet_(OrgJsoupSafetyWhitelist *self, OrgJsoupNodesElement *el, OrgJsoupNodesAttribute *attr, id<JavaUtilSet> protocols);

__attribute__((unused)) static jboolean OrgJsoupSafetyWhitelist_isValidAnchorWithNSString_(OrgJsoupSafetyWhitelist *self, NSString *value);

@interface OrgJsoupSafetyWhitelist_TypedValue () {
 @public
  NSString *value_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSafetyWhitelist_TypedValue, value_, NSString *)

@implementation OrgJsoupSafetyWhitelist

+ (OrgJsoupSafetyWhitelist *)none {
  return OrgJsoupSafetyWhitelist_none();
}

+ (OrgJsoupSafetyWhitelist *)simpleText {
  return OrgJsoupSafetyWhitelist_simpleText();
}

+ (OrgJsoupSafetyWhitelist *)basic {
  return OrgJsoupSafetyWhitelist_basic();
}

+ (OrgJsoupSafetyWhitelist *)basicWithImages {
  return OrgJsoupSafetyWhitelist_basicWithImages();
}

+ (OrgJsoupSafetyWhitelist *)relaxed {
  return OrgJsoupSafetyWhitelist_relaxed();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSafetyWhitelist_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJsoupSafetyWhitelist *)addTagsWithNSStringArray:(IOSObjectArray *)tags {
  OrgJsoupHelperValidate_notNullWithId_(tags);
  {
    IOSObjectArray *a__ = tags;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *tagName = *b__++;
      OrgJsoupHelperValidate_notEmptyWithNSString_(tagName);
      [((id<JavaUtilSet>) nil_chk(tagNames_)) addWithId:OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tagName)];
    }
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)removeTagsWithNSStringArray:(IOSObjectArray *)tags {
  OrgJsoupHelperValidate_notNullWithId_(tags);
  {
    IOSObjectArray *a__ = tags;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *tag = *b__++;
      OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
      OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
      if ([((id<JavaUtilSet>) nil_chk(tagNames_)) removeWithId:tagName]) {
        [((id<JavaUtilMap>) nil_chk(attributes_)) removeWithId:tagName];
        [((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) removeWithId:tagName];
        [((id<JavaUtilMap>) nil_chk(protocols_)) removeWithId:tagName];
      }
    }
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)addAttributesWithNSString:(NSString *)tag
                                     withNSStringArray:(IOSObjectArray *)keys {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
  OrgJsoupHelperValidate_notNullWithId_(keys);
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(((IOSObjectArray *) nil_chk(keys))->size_ > 0, @"No attributes supplied.");
  OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
  if (![((id<JavaUtilSet>) nil_chk(tagNames_)) containsWithId:tagName]) [((id<JavaUtilSet>) nil_chk(tagNames_)) addWithId:tagName];
  id<JavaUtilSet> attributeSet = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = keys;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = *b__++;
      OrgJsoupHelperValidate_notEmptyWithNSString_(key);
      [attributeSet addWithId:OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(key)];
    }
  }
  if ([((id<JavaUtilMap>) nil_chk(attributes_)) containsKeyWithId:tagName]) {
    id<JavaUtilSet> currentSet = [((id<JavaUtilMap>) nil_chk(attributes_)) getWithId:tagName];
    [((id<JavaUtilSet>) nil_chk(currentSet)) addAllWithJavaUtilCollection:attributeSet];
  }
  else {
    [((id<JavaUtilMap>) nil_chk(attributes_)) putWithId:tagName withId:attributeSet];
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)removeAttributesWithNSString:(NSString *)tag
                                        withNSStringArray:(IOSObjectArray *)keys {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
  OrgJsoupHelperValidate_notNullWithId_(keys);
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(((IOSObjectArray *) nil_chk(keys))->size_ > 0, @"No attributes supplied.");
  OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
  id<JavaUtilSet> attributeSet = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = keys;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = *b__++;
      OrgJsoupHelperValidate_notEmptyWithNSString_(key);
      [attributeSet addWithId:OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(key)];
    }
  }
  if ([((id<JavaUtilSet>) nil_chk(tagNames_)) containsWithId:tagName] && [((id<JavaUtilMap>) nil_chk(attributes_)) containsKeyWithId:tagName]) {
    id<JavaUtilSet> currentSet = [((id<JavaUtilMap>) nil_chk(attributes_)) getWithId:tagName];
    [((id<JavaUtilSet>) nil_chk(currentSet)) removeAllWithJavaUtilCollection:attributeSet];
    if ([currentSet isEmpty]) [((id<JavaUtilMap>) nil_chk(attributes_)) removeWithId:tagName];
  }
  if ([((NSString *) nil_chk(tag)) isEqual:@":all"]) for (OrgJsoupSafetyWhitelist_TagName * __strong name in nil_chk([((id<JavaUtilMap>) nil_chk(attributes_)) keySet])) {
    id<JavaUtilSet> currentSet = [((id<JavaUtilMap>) nil_chk(attributes_)) getWithId:name];
    [((id<JavaUtilSet>) nil_chk(currentSet)) removeAllWithJavaUtilCollection:attributeSet];
    if ([currentSet isEmpty]) [((id<JavaUtilMap>) nil_chk(attributes_)) removeWithId:name];
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)addEnforcedAttributeWithNSString:(NSString *)tag
                                                 withNSString:(NSString *)key
                                                 withNSString:(NSString *)value {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  OrgJsoupHelperValidate_notEmptyWithNSString_(value);
  OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
  if (![((id<JavaUtilSet>) nil_chk(tagNames_)) containsWithId:tagName]) [((id<JavaUtilSet>) nil_chk(tagNames_)) addWithId:tagName];
  OrgJsoupSafetyWhitelist_AttributeKey *attrKey = OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(key);
  OrgJsoupSafetyWhitelist_AttributeValue *attrVal = OrgJsoupSafetyWhitelist_AttributeValue_valueOfWithNSString_(value);
  if ([((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) containsKeyWithId:tagName]) {
    [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) getWithId:tagName])) putWithId:attrKey withId:attrVal];
  }
  else {
    id<JavaUtilMap> attrMap = create_JavaUtilHashMap_init();
    [attrMap putWithId:attrKey withId:attrVal];
    [((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) putWithId:tagName withId:attrMap];
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)removeEnforcedAttributeWithNSString:(NSString *)tag
                                                    withNSString:(NSString *)key {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
  if ([((id<JavaUtilSet>) nil_chk(tagNames_)) containsWithId:tagName] && [((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) containsKeyWithId:tagName]) {
    OrgJsoupSafetyWhitelist_AttributeKey *attrKey = OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(key);
    id<JavaUtilMap> attrMap = [((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) getWithId:tagName];
    [((id<JavaUtilMap>) nil_chk(attrMap)) removeWithId:attrKey];
    if ([attrMap isEmpty]) [((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) removeWithId:tagName];
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)preserveRelativeLinksWithBoolean:(jboolean)preserve {
  preserveRelativeLinks_ = preserve;
  return self;
}

- (OrgJsoupSafetyWhitelist *)addProtocolsWithNSString:(NSString *)tag
                                         withNSString:(NSString *)key
                                    withNSStringArray:(IOSObjectArray *)protocols {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  OrgJsoupHelperValidate_notNullWithId_(protocols);
  OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
  OrgJsoupSafetyWhitelist_AttributeKey *attrKey = OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(key);
  id<JavaUtilMap> attrMap;
  id<JavaUtilSet> protSet;
  if ([((id<JavaUtilMap>) nil_chk(self->protocols_)) containsKeyWithId:tagName]) {
    attrMap = [((id<JavaUtilMap>) nil_chk(self->protocols_)) getWithId:tagName];
  }
  else {
    attrMap = create_JavaUtilHashMap_init();
    [((id<JavaUtilMap>) nil_chk(self->protocols_)) putWithId:tagName withId:attrMap];
  }
  if ([((id<JavaUtilMap>) nil_chk(attrMap)) containsKeyWithId:attrKey]) {
    protSet = [attrMap getWithId:attrKey];
  }
  else {
    protSet = create_JavaUtilHashSet_init();
    [attrMap putWithId:attrKey withId:protSet];
  }
  {
    IOSObjectArray *a__ = protocols;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *protocol = *b__++;
      OrgJsoupHelperValidate_notEmptyWithNSString_(protocol);
      OrgJsoupSafetyWhitelist_Protocol *prot = OrgJsoupSafetyWhitelist_Protocol_valueOfWithNSString_(protocol);
      [((id<JavaUtilSet>) nil_chk(protSet)) addWithId:prot];
    }
  }
  return self;
}

- (OrgJsoupSafetyWhitelist *)removeProtocolsWithNSString:(NSString *)tag
                                            withNSString:(NSString *)key
                                       withNSStringArray:(IOSObjectArray *)protocols {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tag);
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  OrgJsoupHelperValidate_notNullWithId_(protocols);
  OrgJsoupSafetyWhitelist_TagName *tagName = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag);
  OrgJsoupSafetyWhitelist_AttributeKey *attrKey = OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(key);
  if ([((id<JavaUtilMap>) nil_chk(self->protocols_)) containsKeyWithId:tagName]) {
    id<JavaUtilMap> attrMap = [((id<JavaUtilMap>) nil_chk(self->protocols_)) getWithId:tagName];
    if ([((id<JavaUtilMap>) nil_chk(attrMap)) containsKeyWithId:attrKey]) {
      id<JavaUtilSet> protSet = [attrMap getWithId:attrKey];
      {
        IOSObjectArray *a__ = protocols;
        NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *protocol = *b__++;
          OrgJsoupHelperValidate_notEmptyWithNSString_(protocol);
          OrgJsoupSafetyWhitelist_Protocol *prot = OrgJsoupSafetyWhitelist_Protocol_valueOfWithNSString_(protocol);
          [((id<JavaUtilSet>) nil_chk(protSet)) removeWithId:prot];
        }
      }
      if ([((id<JavaUtilSet>) nil_chk(protSet)) isEmpty]) {
        [attrMap removeWithId:attrKey];
        if ([attrMap isEmpty]) [((id<JavaUtilMap>) nil_chk(self->protocols_)) removeWithId:tagName];
      }
    }
  }
  return self;
}

- (jboolean)isSafeTagWithNSString:(NSString *)tag {
  return [((id<JavaUtilSet>) nil_chk(tagNames_)) containsWithId:OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tag)];
}

- (jboolean)isSafeAttributeWithNSString:(NSString *)tagName
               withOrgJsoupNodesElement:(OrgJsoupNodesElement *)el
             withOrgJsoupNodesAttribute:(OrgJsoupNodesAttribute *)attr {
  OrgJsoupSafetyWhitelist_TagName *tag = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tagName);
  OrgJsoupSafetyWhitelist_AttributeKey *key = OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_([((OrgJsoupNodesAttribute *) nil_chk(attr)) getKey]);
  if ([((id<JavaUtilMap>) nil_chk(attributes_)) containsKeyWithId:tag]) {
    if ([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes_)) getWithId:tag])) containsWithId:key]) {
      if ([((id<JavaUtilMap>) nil_chk(protocols_)) containsKeyWithId:tag]) {
        id<JavaUtilMap> attrProts = [((id<JavaUtilMap>) nil_chk(protocols_)) getWithId:tag];
        return ![((id<JavaUtilMap>) nil_chk(attrProts)) containsKeyWithId:key] || OrgJsoupSafetyWhitelist_testValidProtocolWithOrgJsoupNodesElement_withOrgJsoupNodesAttribute_withJavaUtilSet_(self, el, attr, [attrProts getWithId:key]);
      }
      else {
        return true;
      }
    }
  }
  return ![((NSString *) nil_chk(tagName)) isEqual:@":all"] && [self isSafeAttributeWithNSString:@":all" withOrgJsoupNodesElement:el withOrgJsoupNodesAttribute:attr];
}

- (jboolean)testValidProtocolWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)el
                           withOrgJsoupNodesAttribute:(OrgJsoupNodesAttribute *)attr
                                      withJavaUtilSet:(id<JavaUtilSet>)protocols {
  return OrgJsoupSafetyWhitelist_testValidProtocolWithOrgJsoupNodesElement_withOrgJsoupNodesAttribute_withJavaUtilSet_(self, el, attr, protocols);
}

- (jboolean)isValidAnchorWithNSString:(NSString *)value {
  return OrgJsoupSafetyWhitelist_isValidAnchorWithNSString_(self, value);
}

- (OrgJsoupNodesAttributes *)getEnforcedAttributesWithNSString:(NSString *)tagName {
  OrgJsoupNodesAttributes *attrs = create_OrgJsoupNodesAttributes_init();
  OrgJsoupSafetyWhitelist_TagName *tag = OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(tagName);
  if ([((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) containsKeyWithId:tag]) {
    id<JavaUtilMap> keyVals = [((id<JavaUtilMap>) nil_chk(enforcedAttributes_)) getWithId:tag];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(keyVals)) entrySet])) {
      [attrs putWithNSString:[((OrgJsoupSafetyWhitelist_AttributeKey *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) description] withNSString:[((OrgJsoupSafetyWhitelist_AttributeValue *) nil_chk([entry_ getValue])) description]];
    }
  }
  return attrs;
}

- (void)dealloc {
  RELEASE_(tagNames_);
  RELEASE_(attributes_);
  RELEASE_(enforcedAttributes_);
  RELEASE_(protocols_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x81, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x81, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x81, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist;", 0x81, 14, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, 21, -1, -1 },
    { NULL, "Z", 0x2, 22, 16, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesAttributes;", 0x0, 23, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(none);
  methods[1].selector = @selector(simpleText);
  methods[2].selector = @selector(basic);
  methods[3].selector = @selector(basicWithImages);
  methods[4].selector = @selector(relaxed);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(addTagsWithNSStringArray:);
  methods[7].selector = @selector(removeTagsWithNSStringArray:);
  methods[8].selector = @selector(addAttributesWithNSString:withNSStringArray:);
  methods[9].selector = @selector(removeAttributesWithNSString:withNSStringArray:);
  methods[10].selector = @selector(addEnforcedAttributeWithNSString:withNSString:withNSString:);
  methods[11].selector = @selector(removeEnforcedAttributeWithNSString:withNSString:);
  methods[12].selector = @selector(preserveRelativeLinksWithBoolean:);
  methods[13].selector = @selector(addProtocolsWithNSString:withNSString:withNSStringArray:);
  methods[14].selector = @selector(removeProtocolsWithNSString:withNSString:withNSStringArray:);
  methods[15].selector = @selector(isSafeTagWithNSString:);
  methods[16].selector = @selector(isSafeAttributeWithNSString:withOrgJsoupNodesElement:withOrgJsoupNodesAttribute:);
  methods[17].selector = @selector(testValidProtocolWithOrgJsoupNodesElement:withOrgJsoupNodesAttribute:withJavaUtilSet:);
  methods[18].selector = @selector(isValidAnchorWithNSString:);
  methods[19].selector = @selector(getEnforcedAttributesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tagNames_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "attributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 25, -1 },
    { "enforcedAttributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 26, -1 },
    { "protocols_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 27, -1 },
    { "preserveRelativeLinks_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addTags", "[LNSString;", "removeTags", "addAttributes", "LNSString;[LNSString;", "removeAttributes", "addEnforcedAttribute", "LNSString;LNSString;LNSString;", "removeEnforcedAttribute", "LNSString;LNSString;", "preserveRelativeLinks", "Z", "addProtocols", "LNSString;LNSString;[LNSString;", "removeProtocols", "isSafeTag", "LNSString;", "isSafeAttribute", "LNSString;LOrgJsoupNodesElement;LOrgJsoupNodesAttribute;", "testValidProtocol", "LOrgJsoupNodesElement;LOrgJsoupNodesAttribute;LJavaUtilSet;", "(Lorg/jsoup/nodes/Element;Lorg/jsoup/nodes/Attribute;Ljava/util/Set<Lorg/jsoup/safety/Whitelist$Protocol;>;)Z", "isValidAnchor", "getEnforcedAttributes", "Ljava/util/Set<Lorg/jsoup/safety/Whitelist$TagName;>;", "Ljava/util/Map<Lorg/jsoup/safety/Whitelist$TagName;Ljava/util/Set<Lorg/jsoup/safety/Whitelist$AttributeKey;>;>;", "Ljava/util/Map<Lorg/jsoup/safety/Whitelist$TagName;Ljava/util/Map<Lorg/jsoup/safety/Whitelist$AttributeKey;Lorg/jsoup/safety/Whitelist$AttributeValue;>;>;", "Ljava/util/Map<Lorg/jsoup/safety/Whitelist$TagName;Ljava/util/Map<Lorg/jsoup/safety/Whitelist$AttributeKey;Ljava/util/Set<Lorg/jsoup/safety/Whitelist$Protocol;>;>;>;", "LOrgJsoupSafetyWhitelist_TagName;LOrgJsoupSafetyWhitelist_AttributeKey;LOrgJsoupSafetyWhitelist_AttributeValue;LOrgJsoupSafetyWhitelist_Protocol;LOrgJsoupSafetyWhitelist_TypedValue;" };
  static const J2ObjcClassInfo _OrgJsoupSafetyWhitelist = { "Whitelist", "org.jsoup.safety", ptrTable, methods, fields, 7, 0x1, 20, 5, -1, 28, -1, -1, -1 };
  return &_OrgJsoupSafetyWhitelist;
}

@end

OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_none() {
  OrgJsoupSafetyWhitelist_initialize();
  return create_OrgJsoupSafetyWhitelist_init();
}

OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_simpleText() {
  OrgJsoupSafetyWhitelist_initialize();
  return [create_OrgJsoupSafetyWhitelist_init() addTagsWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"b", @"em", @"i", @"strong", @"u" } count:5 type:NSString_class_()]];
}

OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_basic() {
  OrgJsoupSafetyWhitelist_initialize();
  return [((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([create_OrgJsoupSafetyWhitelist_init() addTagsWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"a", @"b", @"blockquote", @"br", @"cite", @"code", @"dd", @"dl", @"dt", @"em", @"i", @"li", @"ol", @"p", @"pre", @"q", @"small", @"span", @"strike", @"strong", @"sub", @"sup", @"u", @"ul" } count:24 type:NSString_class_()]]))) addAttributesWithNSString:@"a" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"href" } count:1 type:NSString_class_()]]))) addAttributesWithNSString:@"blockquote" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"cite" } count:1 type:NSString_class_()]]))) addAttributesWithNSString:@"q" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"cite" } count:1 type:NSString_class_()]]))) addProtocolsWithNSString:@"a" withNSString:@"href" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ftp", @"http", @"https", @"mailto" } count:4 type:NSString_class_()]]))) addProtocolsWithNSString:@"blockquote" withNSString:@"cite" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]]))) addProtocolsWithNSString:@"cite" withNSString:@"cite" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]]))) addEnforcedAttributeWithNSString:@"a" withNSString:@"rel" withNSString:@"nofollow"];
}

OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_basicWithImages() {
  OrgJsoupSafetyWhitelist_initialize();
  return [((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(OrgJsoupSafetyWhitelist_basic())) addTagsWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"img" } count:1 type:NSString_class_()]]))) addAttributesWithNSString:@"img" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"align", @"alt", @"height", @"src", @"title", @"width" } count:6 type:NSString_class_()]]))) addProtocolsWithNSString:@"img" withNSString:@"src" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]];
}

OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_relaxed() {
  OrgJsoupSafetyWhitelist_initialize();
  return [((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([((OrgJsoupSafetyWhitelist *) nil_chk(([create_OrgJsoupSafetyWhitelist_init() addTagsWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"a", @"b", @"blockquote", @"br", @"caption", @"cite", @"code", @"col", @"colgroup", @"dd", @"div", @"dl", @"dt", @"em", @"h1", @"h2", @"h3", @"h4", @"h5", @"h6", @"i", @"img", @"li", @"ol", @"p", @"pre", @"q", @"small", @"span", @"strike", @"strong", @"sub", @"sup", @"table", @"tbody", @"td", @"tfoot", @"th", @"thead", @"tr", @"u", @"ul" } count:42 type:NSString_class_()]]))) addAttributesWithNSString:@"a" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"href", @"title" } count:2 type:NSString_class_()]]))) addAttributesWithNSString:@"blockquote" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"cite" } count:1 type:NSString_class_()]]))) addAttributesWithNSString:@"col" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"span", @"width" } count:2 type:NSString_class_()]]))) addAttributesWithNSString:@"colgroup" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"span", @"width" } count:2 type:NSString_class_()]]))) addAttributesWithNSString:@"img" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"align", @"alt", @"height", @"src", @"title", @"width" } count:6 type:NSString_class_()]]))) addAttributesWithNSString:@"ol" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"start", @"type" } count:2 type:NSString_class_()]]))) addAttributesWithNSString:@"q" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"cite" } count:1 type:NSString_class_()]]))) addAttributesWithNSString:@"table" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"summary", @"width" } count:2 type:NSString_class_()]]))) addAttributesWithNSString:@"td" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"abbr", @"axis", @"colspan", @"rowspan", @"width" } count:5 type:NSString_class_()]]))) addAttributesWithNSString:@"th" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"abbr", @"axis", @"colspan", @"rowspan", @"scope", @"width" } count:6 type:NSString_class_()]]))) addAttributesWithNSString:@"ul" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"type" } count:1 type:NSString_class_()]]))) addProtocolsWithNSString:@"a" withNSString:@"href" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"ftp", @"http", @"https", @"mailto" } count:4 type:NSString_class_()]]))) addProtocolsWithNSString:@"blockquote" withNSString:@"cite" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]]))) addProtocolsWithNSString:@"cite" withNSString:@"cite" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]]))) addProtocolsWithNSString:@"img" withNSString:@"src" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]]))) addProtocolsWithNSString:@"q" withNSString:@"cite" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"http", @"https" } count:2 type:NSString_class_()]];
}

void OrgJsoupSafetyWhitelist_init(OrgJsoupSafetyWhitelist *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->tagNames_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->attributes_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->enforcedAttributes_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->protocols_, new_JavaUtilHashMap_init());
  self->preserveRelativeLinks_ = false;
}

OrgJsoupSafetyWhitelist *new_OrgJsoupSafetyWhitelist_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSafetyWhitelist, init)
}

OrgJsoupSafetyWhitelist *create_OrgJsoupSafetyWhitelist_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSafetyWhitelist, init)
}

jboolean OrgJsoupSafetyWhitelist_testValidProtocolWithOrgJsoupNodesElement_withOrgJsoupNodesAttribute_withJavaUtilSet_(OrgJsoupSafetyWhitelist *self, OrgJsoupNodesElement *el, OrgJsoupNodesAttribute *attr, id<JavaUtilSet> protocols) {
  NSString *value = [((OrgJsoupNodesElement *) nil_chk(el)) absUrlWithNSString:[((OrgJsoupNodesAttribute *) nil_chk(attr)) getKey]];
  if ([((NSString *) nil_chk(value)) java_length] == 0) value = [attr getValue];
  if (!self->preserveRelativeLinks_) [attr setValueWithId:value];
  for (OrgJsoupSafetyWhitelist_Protocol * __strong protocol in nil_chk(protocols)) {
    NSString *prot = [((OrgJsoupSafetyWhitelist_Protocol *) nil_chk(protocol)) description];
    if ([((NSString *) nil_chk(prot)) isEqual:@"#"]) {
      if (OrgJsoupSafetyWhitelist_isValidAnchorWithNSString_(self, value)) {
        return true;
      }
      else {
        continue;
      }
    }
    JreStrAppend(&prot, "$", @":");
    if ([((NSString *) nil_chk([((NSString *) nil_chk(value)) lowercaseString])) java_hasPrefix:prot]) {
      return true;
    }
  }
  return false;
}

jboolean OrgJsoupSafetyWhitelist_isValidAnchorWithNSString_(OrgJsoupSafetyWhitelist *self, NSString *value) {
  return [((NSString *) nil_chk(value)) java_hasPrefix:@"#"] && ![value java_matches:@".*\\s.*"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSafetyWhitelist)

@implementation OrgJsoupSafetyWhitelist_TypedValue

- (instancetype)initWithNSString:(NSString *)value {
  OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(self, value);
  return self;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((value_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(value_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (obj == nil) return false;
  if ([self java_getClass] != [obj java_getClass]) return false;
  OrgJsoupSafetyWhitelist_TypedValue *other = (OrgJsoupSafetyWhitelist_TypedValue *) cast_chk(obj, [OrgJsoupSafetyWhitelist_TypedValue class]);
  if (value_ == nil) {
    if (other->value_ != nil) return false;
  }
  else if (![value_ isEqual:other->value_]) return false;
  return true;
}

- (NSString *)description {
  return value_;
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "hashCode", "equals", "LNSObject;", "toString", "LOrgJsoupSafetyWhitelist;" };
  static const J2ObjcClassInfo _OrgJsoupSafetyWhitelist_TypedValue = { "TypedValue", "org.jsoup.safety", ptrTable, methods, fields, 7, 0x408, 4, 1, 5, -1, -1, -1, -1 };
  return &_OrgJsoupSafetyWhitelist_TypedValue;
}

@end

void OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(OrgJsoupSafetyWhitelist_TypedValue *self, NSString *value) {
  NSObject_init(self);
  OrgJsoupHelperValidate_notNullWithId_(value);
  JreStrongAssign(&self->value_, value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSafetyWhitelist_TypedValue)

@implementation OrgJsoupSafetyWhitelist_TagName

- (instancetype)initWithNSString:(NSString *)value {
  OrgJsoupSafetyWhitelist_TagName_initWithNSString_(self, value);
  return self;
}

+ (OrgJsoupSafetyWhitelist_TagName *)valueOfWithNSString:(NSString *)value {
  return OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist_TagName;", 0x8, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "valueOf", "LOrgJsoupSafetyWhitelist;" };
  static const J2ObjcClassInfo _OrgJsoupSafetyWhitelist_TagName = { "TagName", "org.jsoup.safety", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgJsoupSafetyWhitelist_TagName;
}

@end

void OrgJsoupSafetyWhitelist_TagName_initWithNSString_(OrgJsoupSafetyWhitelist_TagName *self, NSString *value) {
  OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(self, value);
}

OrgJsoupSafetyWhitelist_TagName *new_OrgJsoupSafetyWhitelist_TagName_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSafetyWhitelist_TagName, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_TagName *create_OrgJsoupSafetyWhitelist_TagName_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSafetyWhitelist_TagName, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_TagName *OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(NSString *value) {
  OrgJsoupSafetyWhitelist_TagName_initialize();
  return create_OrgJsoupSafetyWhitelist_TagName_initWithNSString_(value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSafetyWhitelist_TagName)

@implementation OrgJsoupSafetyWhitelist_AttributeKey

- (instancetype)initWithNSString:(NSString *)value {
  OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(self, value);
  return self;
}

+ (OrgJsoupSafetyWhitelist_AttributeKey *)valueOfWithNSString:(NSString *)value {
  return OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist_AttributeKey;", 0x8, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "valueOf", "LOrgJsoupSafetyWhitelist;" };
  static const J2ObjcClassInfo _OrgJsoupSafetyWhitelist_AttributeKey = { "AttributeKey", "org.jsoup.safety", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgJsoupSafetyWhitelist_AttributeKey;
}

@end

void OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(OrgJsoupSafetyWhitelist_AttributeKey *self, NSString *value) {
  OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(self, value);
}

OrgJsoupSafetyWhitelist_AttributeKey *new_OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSafetyWhitelist_AttributeKey, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_AttributeKey *create_OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSafetyWhitelist_AttributeKey, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_AttributeKey *OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(NSString *value) {
  OrgJsoupSafetyWhitelist_AttributeKey_initialize();
  return create_OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSafetyWhitelist_AttributeKey)

@implementation OrgJsoupSafetyWhitelist_AttributeValue

- (instancetype)initWithNSString:(NSString *)value {
  OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(self, value);
  return self;
}

+ (OrgJsoupSafetyWhitelist_AttributeValue *)valueOfWithNSString:(NSString *)value {
  return OrgJsoupSafetyWhitelist_AttributeValue_valueOfWithNSString_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist_AttributeValue;", 0x8, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "valueOf", "LOrgJsoupSafetyWhitelist;" };
  static const J2ObjcClassInfo _OrgJsoupSafetyWhitelist_AttributeValue = { "AttributeValue", "org.jsoup.safety", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgJsoupSafetyWhitelist_AttributeValue;
}

@end

void OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(OrgJsoupSafetyWhitelist_AttributeValue *self, NSString *value) {
  OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(self, value);
}

OrgJsoupSafetyWhitelist_AttributeValue *new_OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSafetyWhitelist_AttributeValue, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_AttributeValue *create_OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSafetyWhitelist_AttributeValue, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_AttributeValue *OrgJsoupSafetyWhitelist_AttributeValue_valueOfWithNSString_(NSString *value) {
  OrgJsoupSafetyWhitelist_AttributeValue_initialize();
  return create_OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSafetyWhitelist_AttributeValue)

@implementation OrgJsoupSafetyWhitelist_Protocol

- (instancetype)initWithNSString:(NSString *)value {
  OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(self, value);
  return self;
}

+ (OrgJsoupSafetyWhitelist_Protocol *)valueOfWithNSString:(NSString *)value {
  return OrgJsoupSafetyWhitelist_Protocol_valueOfWithNSString_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSafetyWhitelist_Protocol;", 0x8, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "valueOf", "LOrgJsoupSafetyWhitelist;" };
  static const J2ObjcClassInfo _OrgJsoupSafetyWhitelist_Protocol = { "Protocol", "org.jsoup.safety", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgJsoupSafetyWhitelist_Protocol;
}

@end

void OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(OrgJsoupSafetyWhitelist_Protocol *self, NSString *value) {
  OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(self, value);
}

OrgJsoupSafetyWhitelist_Protocol *new_OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSafetyWhitelist_Protocol, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_Protocol *create_OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSafetyWhitelist_Protocol, initWithNSString_, value)
}

OrgJsoupSafetyWhitelist_Protocol *OrgJsoupSafetyWhitelist_Protocol_valueOfWithNSString_(NSString *value) {
  OrgJsoupSafetyWhitelist_Protocol_initialize();
  return create_OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSafetyWhitelist_Protocol)
