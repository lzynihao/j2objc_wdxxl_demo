//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/select/QueryParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/jsoup/helper/StringUtil.h"
#include "org/jsoup/helper/Validate.h"
#include "org/jsoup/parser/TokenQueue.h"
#include "org/jsoup/select/CombiningEvaluator.h"
#include "org/jsoup/select/Evaluator.h"
#include "org/jsoup/select/QueryParser.h"
#include "org/jsoup/select/Selector.h"
#include "org/jsoup/select/StructuralEvaluator.h"

@interface OrgJsoupSelectQueryParser () {
 @public
  OrgJsoupParserTokenQueue *tq_;
  NSString *query_;
  id<JavaUtilList> evals_;
}

- (instancetype)initWithNSString:(NSString *)query;

- (void)combinatorWithChar:(jchar)combinator;

- (NSString *)consumeSubQuery;

- (void)findElements;

- (void)byId;

- (void)byClass;

- (void)byTag;

- (void)byAttribute;

- (void)allElements;

- (void)indexLessThan;

- (void)indexGreaterThan;

- (void)indexEquals;

- (void)cssNthChildWithBoolean:(jboolean)backwards
                   withBoolean:(jboolean)ofType;

- (jint)consumeIndex;

- (void)has;

- (void)containsWithBoolean:(jboolean)own;

- (void)matchesWithBoolean:(jboolean)own;

- (void)not__;

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectQueryParser, tq_, OrgJsoupParserTokenQueue *)
J2OBJC_FIELD_SETTER(OrgJsoupSelectQueryParser, query_, NSString *)
J2OBJC_FIELD_SETTER(OrgJsoupSelectQueryParser, evals_, id<JavaUtilList>)

inline IOSObjectArray *OrgJsoupSelectQueryParser_get_combinators(void);
static IOSObjectArray *OrgJsoupSelectQueryParser_combinators;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupSelectQueryParser, combinators, IOSObjectArray *)

inline IOSObjectArray *OrgJsoupSelectQueryParser_get_AttributeEvals(void);
static IOSObjectArray *OrgJsoupSelectQueryParser_AttributeEvals;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupSelectQueryParser, AttributeEvals, IOSObjectArray *)

inline JavaUtilRegexPattern *OrgJsoupSelectQueryParser_get_NTH_AB(void);
static JavaUtilRegexPattern *OrgJsoupSelectQueryParser_NTH_AB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupSelectQueryParser, NTH_AB, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgJsoupSelectQueryParser_get_NTH_B(void);
static JavaUtilRegexPattern *OrgJsoupSelectQueryParser_NTH_B;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupSelectQueryParser, NTH_B, JavaUtilRegexPattern *)

__attribute__((unused)) static void OrgJsoupSelectQueryParser_initWithNSString_(OrgJsoupSelectQueryParser *self, NSString *query);

__attribute__((unused)) static OrgJsoupSelectQueryParser *new_OrgJsoupSelectQueryParser_initWithNSString_(NSString *query) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupSelectQueryParser *create_OrgJsoupSelectQueryParser_initWithNSString_(NSString *query);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_combinatorWithChar_(OrgJsoupSelectQueryParser *self, jchar combinator);

__attribute__((unused)) static NSString *OrgJsoupSelectQueryParser_consumeSubQuery(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_findElements(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_byId(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_byClass(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_byTag(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_byAttribute(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_allElements(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_indexLessThan(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_indexGreaterThan(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_indexEquals(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(OrgJsoupSelectQueryParser *self, jboolean backwards, jboolean ofType);

__attribute__((unused)) static jint OrgJsoupSelectQueryParser_consumeIndex(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_has(OrgJsoupSelectQueryParser *self);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_containsWithBoolean_(OrgJsoupSelectQueryParser *self, jboolean own);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_matchesWithBoolean_(OrgJsoupSelectQueryParser *self, jboolean own);

__attribute__((unused)) static void OrgJsoupSelectQueryParser_not__(OrgJsoupSelectQueryParser *self);

J2OBJC_INITIALIZED_DEFN(OrgJsoupSelectQueryParser)

@implementation OrgJsoupSelectQueryParser

- (instancetype)initWithNSString:(NSString *)query {
  OrgJsoupSelectQueryParser_initWithNSString_(self, query);
  return self;
}

+ (OrgJsoupSelectEvaluator *)parseWithNSString:(NSString *)query {
  return OrgJsoupSelectQueryParser_parseWithNSString_(query);
}

- (OrgJsoupSelectEvaluator *)parse {
  [((OrgJsoupParserTokenQueue *) nil_chk(tq_)) consumeWhitespace];
  if ([((OrgJsoupParserTokenQueue *) nil_chk(tq_)) matchesAnyWithNSStringArray:OrgJsoupSelectQueryParser_combinators]) {
    [((id<JavaUtilList>) nil_chk(evals_)) addWithId:create_OrgJsoupSelectStructuralEvaluator_Root_init()];
    OrgJsoupSelectQueryParser_combinatorWithChar_(self, [((OrgJsoupParserTokenQueue *) nil_chk(tq_)) consume]);
  }
  else {
    OrgJsoupSelectQueryParser_findElements(self);
  }
  while (![((OrgJsoupParserTokenQueue *) nil_chk(tq_)) isEmpty]) {
    jboolean seenWhite = [((OrgJsoupParserTokenQueue *) nil_chk(tq_)) consumeWhitespace];
    if ([((OrgJsoupParserTokenQueue *) nil_chk(tq_)) matchesAnyWithNSStringArray:OrgJsoupSelectQueryParser_combinators]) {
      OrgJsoupSelectQueryParser_combinatorWithChar_(self, [((OrgJsoupParserTokenQueue *) nil_chk(tq_)) consume]);
    }
    else if (seenWhite) {
      OrgJsoupSelectQueryParser_combinatorWithChar_(self, ' ');
    }
    else {
      OrgJsoupSelectQueryParser_findElements(self);
    }
  }
  if ([((id<JavaUtilList>) nil_chk(evals_)) size] == 1) return [((id<JavaUtilList>) nil_chk(evals_)) getWithInt:0];
  return create_OrgJsoupSelectCombiningEvaluator_And_initWithJavaUtilCollection_(evals_);
}

- (void)combinatorWithChar:(jchar)combinator {
  OrgJsoupSelectQueryParser_combinatorWithChar_(self, combinator);
}

- (NSString *)consumeSubQuery {
  return OrgJsoupSelectQueryParser_consumeSubQuery(self);
}

- (void)findElements {
  OrgJsoupSelectQueryParser_findElements(self);
}

- (void)byId {
  OrgJsoupSelectQueryParser_byId(self);
}

- (void)byClass {
  OrgJsoupSelectQueryParser_byClass(self);
}

- (void)byTag {
  OrgJsoupSelectQueryParser_byTag(self);
}

- (void)byAttribute {
  OrgJsoupSelectQueryParser_byAttribute(self);
}

- (void)allElements {
  OrgJsoupSelectQueryParser_allElements(self);
}

- (void)indexLessThan {
  OrgJsoupSelectQueryParser_indexLessThan(self);
}

- (void)indexGreaterThan {
  OrgJsoupSelectQueryParser_indexGreaterThan(self);
}

- (void)indexEquals {
  OrgJsoupSelectQueryParser_indexEquals(self);
}

- (void)cssNthChildWithBoolean:(jboolean)backwards
                   withBoolean:(jboolean)ofType {
  OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(self, backwards, ofType);
}

- (jint)consumeIndex {
  return OrgJsoupSelectQueryParser_consumeIndex(self);
}

- (void)has {
  OrgJsoupSelectQueryParser_has(self);
}

- (void)containsWithBoolean:(jboolean)own {
  OrgJsoupSelectQueryParser_containsWithBoolean_(self, own);
}

- (void)matchesWithBoolean:(jboolean)own {
  OrgJsoupSelectQueryParser_matchesWithBoolean_(self, own);
}

- (void)not__ {
  OrgJsoupSelectQueryParser_not__(self);
}

- (void)dealloc {
  RELEASE_(tq_);
  RELEASE_(query_);
  RELEASE_(evals_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectEvaluator;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectEvaluator;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(parseWithNSString:);
  methods[2].selector = @selector(parse);
  methods[3].selector = @selector(combinatorWithChar:);
  methods[4].selector = @selector(consumeSubQuery);
  methods[5].selector = @selector(findElements);
  methods[6].selector = @selector(byId);
  methods[7].selector = @selector(byClass);
  methods[8].selector = @selector(byTag);
  methods[9].selector = @selector(byAttribute);
  methods[10].selector = @selector(allElements);
  methods[11].selector = @selector(indexLessThan);
  methods[12].selector = @selector(indexGreaterThan);
  methods[13].selector = @selector(indexEquals);
  methods[14].selector = @selector(cssNthChildWithBoolean:withBoolean:);
  methods[15].selector = @selector(consumeIndex);
  methods[16].selector = @selector(has);
  methods[17].selector = @selector(containsWithBoolean:);
  methods[18].selector = @selector(matchesWithBoolean:);
  methods[19].selector = @selector(not__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "combinators", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "AttributeEvals", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "tq_", "LOrgJsoupParserTokenQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "evals_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
    { "NTH_AB", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "NTH_B", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "parse", "combinator", "C", "cssNthChild", "ZZ", "contains", "Z", "matches", "not", &OrgJsoupSelectQueryParser_combinators, &OrgJsoupSelectQueryParser_AttributeEvals, "Ljava/util/List<Lorg/jsoup/select/Evaluator;>;", &OrgJsoupSelectQueryParser_NTH_AB, &OrgJsoupSelectQueryParser_NTH_B };
  static const J2ObjcClassInfo _OrgJsoupSelectQueryParser = { "QueryParser", "org.jsoup.select", ptrTable, methods, fields, 7, 0x0, 20, 7, -1, -1, -1, -1, -1 };
  return &_OrgJsoupSelectQueryParser;
}

+ (void)initialize {
  if (self == [OrgJsoupSelectQueryParser class]) {
    JreStrongAssignAndConsume(&OrgJsoupSelectQueryParser_combinators, [IOSObjectArray newArrayWithObjects:(id[]){ @",", @">", @"+", @"~", @" " } count:5 type:NSString_class_()]);
    JreStrongAssignAndConsume(&OrgJsoupSelectQueryParser_AttributeEvals, [IOSObjectArray newArrayWithObjects:(id[]){ @"=", @"!=", @"^=", @"$=", @"*=", @"~=" } count:6 type:NSString_class_()]);
    JreStrongAssign(&OrgJsoupSelectQueryParser_NTH_AB, JavaUtilRegexPattern_compileWithNSString_withInt_(@"((\\+|-)?(\\d+)?)n(\\s*(\\+|-)?\\s*\\d+)?", JavaUtilRegexPattern_CASE_INSENSITIVE));
    JreStrongAssign(&OrgJsoupSelectQueryParser_NTH_B, JavaUtilRegexPattern_compileWithNSString_(@"(\\+|-)?(\\d+)"));
    J2OBJC_SET_INITIALIZED(OrgJsoupSelectQueryParser)
  }
}

@end

void OrgJsoupSelectQueryParser_initWithNSString_(OrgJsoupSelectQueryParser *self, NSString *query) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->evals_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->query_, query);
  JreStrongAssignAndConsume(&self->tq_, new_OrgJsoupParserTokenQueue_initWithNSString_(query));
}

OrgJsoupSelectQueryParser *new_OrgJsoupSelectQueryParser_initWithNSString_(NSString *query) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectQueryParser, initWithNSString_, query)
}

OrgJsoupSelectQueryParser *create_OrgJsoupSelectQueryParser_initWithNSString_(NSString *query) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectQueryParser, initWithNSString_, query)
}

OrgJsoupSelectEvaluator *OrgJsoupSelectQueryParser_parseWithNSString_(NSString *query) {
  OrgJsoupSelectQueryParser_initialize();
  OrgJsoupSelectQueryParser *p = create_OrgJsoupSelectQueryParser_initWithNSString_(query);
  return [p parse];
}

void OrgJsoupSelectQueryParser_combinatorWithChar_(OrgJsoupSelectQueryParser *self, jchar combinator) {
  [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeWhitespace];
  NSString *subQuery = OrgJsoupSelectQueryParser_consumeSubQuery(self);
  OrgJsoupSelectEvaluator *rootEval;
  OrgJsoupSelectEvaluator *currentEval;
  OrgJsoupSelectEvaluator *newEval = OrgJsoupSelectQueryParser_parseWithNSString_(subQuery);
  jboolean replaceRightMost = false;
  if ([((id<JavaUtilList>) nil_chk(self->evals_)) size] == 1) {
    rootEval = currentEval = [((id<JavaUtilList>) nil_chk(self->evals_)) getWithInt:0];
    if ([rootEval isKindOfClass:[OrgJsoupSelectCombiningEvaluator_Or class]] && combinator != ',') {
      currentEval = [((OrgJsoupSelectCombiningEvaluator_Or *) nil_chk(((OrgJsoupSelectCombiningEvaluator_Or *) cast_chk(currentEval, [OrgJsoupSelectCombiningEvaluator_Or class])))) rightMostEvaluator];
      replaceRightMost = true;
    }
  }
  else {
    rootEval = currentEval = create_OrgJsoupSelectCombiningEvaluator_And_initWithJavaUtilCollection_(self->evals_);
  }
  [((id<JavaUtilList>) nil_chk(self->evals_)) clear];
  if (combinator == '>') currentEval = create_OrgJsoupSelectCombiningEvaluator_And_initWithOrgJsoupSelectEvaluatorArray_([IOSObjectArray arrayWithObjects:(id[]){ newEval, create_OrgJsoupSelectStructuralEvaluator_ImmediateParent_initWithOrgJsoupSelectEvaluator_(currentEval) } count:2 type:OrgJsoupSelectEvaluator_class_()]);
  else if (combinator == ' ') currentEval = create_OrgJsoupSelectCombiningEvaluator_And_initWithOrgJsoupSelectEvaluatorArray_([IOSObjectArray arrayWithObjects:(id[]){ newEval, create_OrgJsoupSelectStructuralEvaluator_Parent_initWithOrgJsoupSelectEvaluator_(currentEval) } count:2 type:OrgJsoupSelectEvaluator_class_()]);
  else if (combinator == '+') currentEval = create_OrgJsoupSelectCombiningEvaluator_And_initWithOrgJsoupSelectEvaluatorArray_([IOSObjectArray arrayWithObjects:(id[]){ newEval, create_OrgJsoupSelectStructuralEvaluator_ImmediatePreviousSibling_initWithOrgJsoupSelectEvaluator_(currentEval) } count:2 type:OrgJsoupSelectEvaluator_class_()]);
  else if (combinator == '~') currentEval = create_OrgJsoupSelectCombiningEvaluator_And_initWithOrgJsoupSelectEvaluatorArray_([IOSObjectArray arrayWithObjects:(id[]){ newEval, create_OrgJsoupSelectStructuralEvaluator_PreviousSibling_initWithOrgJsoupSelectEvaluator_(currentEval) } count:2 type:OrgJsoupSelectEvaluator_class_()]);
  else if (combinator == ',') {
    OrgJsoupSelectCombiningEvaluator_Or *or_;
    if ([currentEval isKindOfClass:[OrgJsoupSelectCombiningEvaluator_Or class]]) {
      or_ = (OrgJsoupSelectCombiningEvaluator_Or *) cast_chk(currentEval, [OrgJsoupSelectCombiningEvaluator_Or class]);
      [((OrgJsoupSelectCombiningEvaluator_Or *) nil_chk(or_)) addWithOrgJsoupSelectEvaluator:newEval];
    }
    else {
      or_ = create_OrgJsoupSelectCombiningEvaluator_Or_init();
      [or_ addWithOrgJsoupSelectEvaluator:currentEval];
      [or_ addWithOrgJsoupSelectEvaluator:newEval];
    }
    currentEval = or_;
  }
  else @throw create_OrgJsoupSelectSelector_SelectorParseException_initWithNSString_withNSObjectArray_(JreStrcat("$C", @"Unknown combinator: ", combinator), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  if (replaceRightMost) [((OrgJsoupSelectCombiningEvaluator_Or *) cast_chk(rootEval, [OrgJsoupSelectCombiningEvaluator_Or class])) replaceRightMostEvaluatorWithOrgJsoupSelectEvaluator:currentEval];
  else rootEval = currentEval;
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:rootEval];
}

NSString *OrgJsoupSelectQueryParser_consumeSubQuery(OrgJsoupSelectQueryParser *self) {
  JavaLangStringBuilder *sq = create_JavaLangStringBuilder_init();
  while (![((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) isEmpty]) {
    if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@"("]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sq appendWithNSString:@"("])) appendWithNSString:[((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'(' withChar:')']])) appendWithNSString:@")"];
    else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@"["]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sq appendWithNSString:@"["])) appendWithNSString:[((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'[' withChar:']']])) appendWithNSString:@"]"];
    else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesAnyWithNSStringArray:OrgJsoupSelectQueryParser_combinators]) break;
    else [sq appendWithChar:[((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consume]];
  }
  return [sq description];
}

void OrgJsoupSelectQueryParser_findElements(OrgJsoupSelectQueryParser *self) {
  if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@"#"]) OrgJsoupSelectQueryParser_byId(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@"."]) OrgJsoupSelectQueryParser_byClass(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWord]) OrgJsoupSelectQueryParser_byTag(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@"["]) OrgJsoupSelectQueryParser_byAttribute(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@"*"]) OrgJsoupSelectQueryParser_allElements(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":lt("]) OrgJsoupSelectQueryParser_indexLessThan(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":gt("]) OrgJsoupSelectQueryParser_indexGreaterThan(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":eq("]) OrgJsoupSelectQueryParser_indexEquals(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@":has("]) OrgJsoupSelectQueryParser_has(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@":contains("]) OrgJsoupSelectQueryParser_containsWithBoolean_(self, false);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@":containsOwn("]) OrgJsoupSelectQueryParser_containsWithBoolean_(self, true);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@":matches("]) OrgJsoupSelectQueryParser_matchesWithBoolean_(self, false);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@":matchesOwn("]) OrgJsoupSelectQueryParser_matchesWithBoolean_(self, true);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchesWithNSString:@":not("]) OrgJsoupSelectQueryParser_not__(self);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":nth-child("]) OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(self, false, false);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":nth-last-child("]) OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(self, true, false);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":nth-of-type("]) OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(self, false, true);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":nth-last-of-type("]) OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(self, true, true);
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":first-child"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsFirstChild_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":last-child"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsLastChild_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":first-of-type"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsFirstOfType_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":last-of-type"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsLastOfType_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":only-child"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsOnlyChild_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":only-of-type"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsOnlyOfType_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":empty"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsEmpty_init()];
  else if ([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) matchChompWithNSString:@":root"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsRoot_init()];
  else @throw create_OrgJsoupSelectSelector_SelectorParseException_initWithNSString_withNSObjectArray_(@"Could not parse query '%s': unexpected token at '%s'", [IOSObjectArray arrayWithObjects:(id[]){ self->query_, [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) remainder] } count:2 type:NSObject_class_()]);
}

void OrgJsoupSelectQueryParser_byId(OrgJsoupSelectQueryParser *self) {
  NSString *id_ = [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeCssIdentifier];
  OrgJsoupHelperValidate_notEmptyWithNSString_(id_);
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_Id_initWithNSString_(id_)];
}

void OrgJsoupSelectQueryParser_byClass(OrgJsoupSelectQueryParser *self) {
  NSString *className_ = [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeCssIdentifier];
  OrgJsoupHelperValidate_notEmptyWithNSString_(className_);
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_Class_initWithNSString_([((NSString *) nil_chk([((NSString *) nil_chk(className_)) java_trim])) lowercaseString])];
}

void OrgJsoupSelectQueryParser_byTag(OrgJsoupSelectQueryParser *self) {
  NSString *tagName = [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeElementSelector];
  OrgJsoupHelperValidate_notEmptyWithNSString_(tagName);
  if ([((NSString *) nil_chk(tagName)) java_contains:@"|"]) tagName = [tagName java_replace:@"|" withSequence:@":"];
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_Tag_initWithNSString_([((NSString *) nil_chk([((NSString *) nil_chk(tagName)) java_trim])) lowercaseString])];
}

void OrgJsoupSelectQueryParser_byAttribute(OrgJsoupSelectQueryParser *self) {
  OrgJsoupParserTokenQueue *cq = create_OrgJsoupParserTokenQueue_initWithNSString_([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'[' withChar:']']);
  NSString *key = [cq consumeToAnyWithNSStringArray:OrgJsoupSelectQueryParser_AttributeEvals];
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  [cq consumeWhitespace];
  if ([cq isEmpty]) {
    if ([((NSString *) nil_chk(key)) java_hasPrefix:@"^"]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeStarting_initWithNSString_([key java_substring:1])];
    else [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_Attribute_initWithNSString_(key)];
  }
  else {
    if ([cq matchChompWithNSString:@"="]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeWithValue_initWithNSString_withNSString_(key, [cq remainder])];
    else if ([cq matchChompWithNSString:@"!="]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeWithValueNot_initWithNSString_withNSString_(key, [cq remainder])];
    else if ([cq matchChompWithNSString:@"^="]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeWithValueStarting_initWithNSString_withNSString_(key, [cq remainder])];
    else if ([cq matchChompWithNSString:@"$="]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeWithValueEnding_initWithNSString_withNSString_(key, [cq remainder])];
    else if ([cq matchChompWithNSString:@"*="]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeWithValueContaining_initWithNSString_withNSString_(key, [cq remainder])];
    else if ([cq matchChompWithNSString:@"~="]) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AttributeWithValueMatching_initWithNSString_withJavaUtilRegexPattern_(key, JavaUtilRegexPattern_compileWithNSString_([cq remainder]))];
    else @throw create_OrgJsoupSelectSelector_SelectorParseException_initWithNSString_withNSObjectArray_(@"Could not parse attribute query '%s': unexpected token at '%s'", [IOSObjectArray arrayWithObjects:(id[]){ self->query_, [cq remainder] } count:2 type:NSObject_class_()]);
  }
}

void OrgJsoupSelectQueryParser_allElements(OrgJsoupSelectQueryParser *self) {
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_AllElements_init()];
}

void OrgJsoupSelectQueryParser_indexLessThan(OrgJsoupSelectQueryParser *self) {
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IndexLessThan_initWithInt_(OrgJsoupSelectQueryParser_consumeIndex(self))];
}

void OrgJsoupSelectQueryParser_indexGreaterThan(OrgJsoupSelectQueryParser *self) {
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IndexGreaterThan_initWithInt_(OrgJsoupSelectQueryParser_consumeIndex(self))];
}

void OrgJsoupSelectQueryParser_indexEquals(OrgJsoupSelectQueryParser *self) {
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IndexEquals_initWithInt_(OrgJsoupSelectQueryParser_consumeIndex(self))];
}

void OrgJsoupSelectQueryParser_cssNthChildWithBoolean_withBoolean_(OrgJsoupSelectQueryParser *self, jboolean backwards, jboolean ofType) {
  NSString *argS = [((NSString *) nil_chk([((NSString *) nil_chk([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompToWithNSString:@")"])) java_trim])) lowercaseString];
  JavaUtilRegexMatcher *mAB = [((JavaUtilRegexPattern *) nil_chk(OrgJsoupSelectQueryParser_NTH_AB)) matcherWithJavaLangCharSequence:argS];
  JavaUtilRegexMatcher *mB = [((JavaUtilRegexPattern *) nil_chk(OrgJsoupSelectQueryParser_NTH_B)) matcherWithJavaLangCharSequence:argS];
  jint a;
  jint b;
  if ([@"odd" isEqual:argS]) {
    a = 2;
    b = 1;
  }
  else if ([@"even" isEqual:argS]) {
    a = 2;
    b = 0;
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk(mAB)) matches]) {
    a = [mAB groupWithInt:3] != nil ? JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk([mAB groupWithInt:1])) java_replaceFirst:@"^\\+" withReplacement:@""]) : 1;
    b = [mAB groupWithInt:4] != nil ? JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk([mAB groupWithInt:4])) java_replaceFirst:@"^\\+" withReplacement:@""]) : 0;
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk(mB)) matches]) {
    a = 0;
    b = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk([mB group])) java_replaceFirst:@"^\\+" withReplacement:@""]);
  }
  else {
    @throw create_OrgJsoupSelectSelector_SelectorParseException_initWithNSString_withNSObjectArray_(@"Could not parse nth-index '%s': unexpected format", [IOSObjectArray arrayWithObjects:(id[]){ argS } count:1 type:NSObject_class_()]);
  }
  if (ofType) if (backwards) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsNthLastOfType_initWithInt_withInt_(a, b)];
  else [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsNthOfType_initWithInt_withInt_(a, b)];
  else {
    if (backwards) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsNthLastChild_initWithInt_withInt_(a, b)];
    else [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_IsNthChild_initWithInt_withInt_(a, b)];
  }
}

jint OrgJsoupSelectQueryParser_consumeIndex(OrgJsoupSelectQueryParser *self) {
  NSString *indexS = [((NSString *) nil_chk([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompToWithNSString:@")"])) java_trim];
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(OrgJsoupHelperStringUtil_isNumericWithNSString_(indexS), @"Index must be numeric");
  return JavaLangInteger_parseIntWithNSString_(indexS);
}

void OrgJsoupSelectQueryParser_has(OrgJsoupSelectQueryParser *self) {
  [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeWithNSString:@":has"];
  NSString *subQuery = [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'(' withChar:')'];
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(subQuery, @":has(el) subselect must not be empty");
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectStructuralEvaluator_Has_initWithOrgJsoupSelectEvaluator_(OrgJsoupSelectQueryParser_parseWithNSString_(subQuery))];
}

void OrgJsoupSelectQueryParser_containsWithBoolean_(OrgJsoupSelectQueryParser *self, jboolean own) {
  [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeWithNSString:own ? @":containsOwn" : @":contains"];
  NSString *searchText = OrgJsoupParserTokenQueue_unescapeWithNSString_([((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'(' withChar:')']);
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(searchText, @":contains(text) query must not be empty");
  if (own) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_ContainsOwnText_initWithNSString_(searchText)];
  else [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_ContainsText_initWithNSString_(searchText)];
}

void OrgJsoupSelectQueryParser_matchesWithBoolean_(OrgJsoupSelectQueryParser *self, jboolean own) {
  [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeWithNSString:own ? @":matchesOwn" : @":matches"];
  NSString *regex = [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'(' withChar:')'];
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(regex, @":matches(regex) query must not be empty");
  if (own) [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_MatchesOwn_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern_compileWithNSString_(regex))];
  else [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectEvaluator_Matches_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern_compileWithNSString_(regex))];
}

void OrgJsoupSelectQueryParser_not__(OrgJsoupSelectQueryParser *self) {
  [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) consumeWithNSString:@":not"];
  NSString *subQuery = [((OrgJsoupParserTokenQueue *) nil_chk(self->tq_)) chompBalancedWithChar:'(' withChar:')'];
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(subQuery, @":not(selector) subselect must not be empty");
  [((id<JavaUtilList>) nil_chk(self->evals_)) addWithId:create_OrgJsoupSelectStructuralEvaluator_Not_initWithOrgJsoupSelectEvaluator_(OrgJsoupSelectQueryParser_parseWithNSString_(subQuery))];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectQueryParser)
