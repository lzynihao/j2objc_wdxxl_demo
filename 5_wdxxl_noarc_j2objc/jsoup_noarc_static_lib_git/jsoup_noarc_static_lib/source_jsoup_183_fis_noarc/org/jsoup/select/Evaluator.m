//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/select/Evaluator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/jsoup/helper/Validate.h"
#include "org/jsoup/nodes/Attribute.h"
#include "org/jsoup/nodes/Attributes.h"
#include "org/jsoup/nodes/Comment.h"
#include "org/jsoup/nodes/Document.h"
#include "org/jsoup/nodes/DocumentType.h"
#include "org/jsoup/nodes/Element.h"
#include "org/jsoup/nodes/Node.h"
#include "org/jsoup/nodes/XmlDeclaration.h"
#include "org/jsoup/parser/Tag.h"
#include "org/jsoup/select/Elements.h"
#include "org/jsoup/select/Evaluator.h"

@interface OrgJsoupSelectEvaluator_Tag () {
 @public
  NSString *tagName_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_Tag, tagName_, NSString *)

@interface OrgJsoupSelectEvaluator_Id () {
 @public
  NSString *id__;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_Id, id__, NSString *)

@interface OrgJsoupSelectEvaluator_Class () {
 @public
  NSString *className__;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_Class, className__, NSString *)

@interface OrgJsoupSelectEvaluator_Attribute () {
 @public
  NSString *key_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_Attribute, key_, NSString *)

@interface OrgJsoupSelectEvaluator_AttributeStarting () {
 @public
  NSString *keyPrefix_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_AttributeStarting, keyPrefix_, NSString *)

@interface OrgJsoupSelectEvaluator_ContainsText () {
 @public
  NSString *searchText_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_ContainsText, searchText_, NSString *)

@interface OrgJsoupSelectEvaluator_ContainsOwnText () {
 @public
  NSString *searchText_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_ContainsOwnText, searchText_, NSString *)

@interface OrgJsoupSelectEvaluator_Matches () {
 @public
  JavaUtilRegexPattern *pattern_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_Matches, pattern_, JavaUtilRegexPattern *)

@interface OrgJsoupSelectEvaluator_MatchesOwn () {
 @public
  JavaUtilRegexPattern *pattern_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupSelectEvaluator_MatchesOwn, pattern_, JavaUtilRegexPattern *)

@implementation OrgJsoupSelectEvaluator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "LOrgJsoupSelectEvaluator_Tag;LOrgJsoupSelectEvaluator_Id;LOrgJsoupSelectEvaluator_Class;LOrgJsoupSelectEvaluator_Attribute;LOrgJsoupSelectEvaluator_AttributeStarting;LOrgJsoupSelectEvaluator_AttributeWithValue;LOrgJsoupSelectEvaluator_AttributeWithValueNot;LOrgJsoupSelectEvaluator_AttributeWithValueStarting;LOrgJsoupSelectEvaluator_AttributeWithValueEnding;LOrgJsoupSelectEvaluator_AttributeWithValueContaining;LOrgJsoupSelectEvaluator_AttributeWithValueMatching;LOrgJsoupSelectEvaluator_AttributeKeyPair;LOrgJsoupSelectEvaluator_AllElements;LOrgJsoupSelectEvaluator_IndexLessThan;LOrgJsoupSelectEvaluator_IndexGreaterThan;LOrgJsoupSelectEvaluator_IndexEquals;LOrgJsoupSelectEvaluator_IsLastChild;LOrgJsoupSelectEvaluator_IsFirstOfType;LOrgJsoupSelectEvaluator_IsLastOfType;LOrgJsoupSelectEvaluator_CssNthEvaluator;LOrgJsoupSelectEvaluator_IsNthChild;LOrgJsoupSelectEvaluator_IsNthLastChild;LOrgJsoupSelectEvaluator_IsNthOfType;LOrgJsoupSelectEvaluator_IsNthLastOfType;LOrgJsoupSelectEvaluator_IsFirstChild;LOrgJsoupSelectEvaluator_IsRoot;LOrgJsoupSelectEvaluator_IsOnlyChild;LOrgJsoupSelectEvaluator_IsOnlyOfType;LOrgJsoupSelectEvaluator_IsEmpty;LOrgJsoupSelectEvaluator_IndexEvaluator;LOrgJsoupSelectEvaluator_ContainsText;LOrgJsoupSelectEvaluator_ContainsOwnText;LOrgJsoupSelectEvaluator_Matches;LOrgJsoupSelectEvaluator_MatchesOwn;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator = { "Evaluator", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x401, 2, 0, -1, 2, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator;
}

@end

void OrgJsoupSelectEvaluator_init(OrgJsoupSelectEvaluator *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator)

@implementation OrgJsoupSelectEvaluator_Tag

- (instancetype)initWithNSString:(NSString *)tagName {
  OrgJsoupSelectEvaluator_Tag_initWithNSString_(self, tagName);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return ([((NSString *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) tagName])) isEqual:tagName_]);
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s", [IOSObjectArray arrayWithObjects:(id[]){ tagName_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(tagName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tagName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_Tag = { "Tag", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_Tag;
}

@end

void OrgJsoupSelectEvaluator_Tag_initWithNSString_(OrgJsoupSelectEvaluator_Tag *self, NSString *tagName) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->tagName_, tagName);
}

OrgJsoupSelectEvaluator_Tag *new_OrgJsoupSelectEvaluator_Tag_initWithNSString_(NSString *tagName) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_Tag, initWithNSString_, tagName)
}

OrgJsoupSelectEvaluator_Tag *create_OrgJsoupSelectEvaluator_Tag_initWithNSString_(NSString *tagName) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_Tag, initWithNSString_, tagName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_Tag)

@implementation OrgJsoupSelectEvaluator_Id

- (instancetype)initWithNSString:(NSString *)id_ {
  OrgJsoupSelectEvaluator_Id_initWithNSString_(self, id_);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return ([((NSString *) nil_chk(id__)) isEqual:[((OrgJsoupNodesElement *) nil_chk(element)) id__]]);
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"#%s", [IOSObjectArray arrayWithObjects:(id[]){ id__ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(id__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "LNSString;", .constantValue.asLong = 0, 0x2, 4, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "id", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_Id = { "Id", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 5, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_Id;
}

@end

void OrgJsoupSelectEvaluator_Id_initWithNSString_(OrgJsoupSelectEvaluator_Id *self, NSString *id_) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->id__, id_);
}

OrgJsoupSelectEvaluator_Id *new_OrgJsoupSelectEvaluator_Id_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_Id, initWithNSString_, id_)
}

OrgJsoupSelectEvaluator_Id *create_OrgJsoupSelectEvaluator_Id_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_Id, initWithNSString_, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_Id)

@implementation OrgJsoupSelectEvaluator_Class

- (instancetype)initWithNSString:(NSString *)className_ {
  OrgJsoupSelectEvaluator_Class_initWithNSString_(self, className_);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return ([((OrgJsoupNodesElement *) nil_chk(element)) hasClassWithNSString:className__]);
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@".%s", [IOSObjectArray arrayWithObjects:(id[]){ className__ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(className__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "className__", "LNSString;", .constantValue.asLong = 0, 0x2, 4, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "className", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_Class = { "Class", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 5, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_Class;
}

@end

void OrgJsoupSelectEvaluator_Class_initWithNSString_(OrgJsoupSelectEvaluator_Class *self, NSString *className_) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->className__, className_);
}

OrgJsoupSelectEvaluator_Class *new_OrgJsoupSelectEvaluator_Class_initWithNSString_(NSString *className_) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_Class, initWithNSString_, className_)
}

OrgJsoupSelectEvaluator_Class *create_OrgJsoupSelectEvaluator_Class_initWithNSString_(NSString *className_) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_Class, initWithNSString_, className_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_Class)

@implementation OrgJsoupSelectEvaluator_Attribute

- (instancetype)initWithNSString:(NSString *)key {
  OrgJsoupSelectEvaluator_Attribute_initWithNSString_(self, key);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupNodesElement *) nil_chk(element)) hasAttrWithNSString:key_];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(key_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_Attribute = { "Attribute", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_Attribute;
}

@end

void OrgJsoupSelectEvaluator_Attribute_initWithNSString_(OrgJsoupSelectEvaluator_Attribute *self, NSString *key) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->key_, key);
}

OrgJsoupSelectEvaluator_Attribute *new_OrgJsoupSelectEvaluator_Attribute_initWithNSString_(NSString *key) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_Attribute, initWithNSString_, key)
}

OrgJsoupSelectEvaluator_Attribute *create_OrgJsoupSelectEvaluator_Attribute_initWithNSString_(NSString *key) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_Attribute, initWithNSString_, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_Attribute)

@implementation OrgJsoupSelectEvaluator_AttributeStarting

- (instancetype)initWithNSString:(NSString *)keyPrefix {
  OrgJsoupSelectEvaluator_AttributeStarting_initWithNSString_(self, keyPrefix);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  id<JavaUtilList> values = [((OrgJsoupNodesAttributes *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) attributes])) asList];
  for (OrgJsoupNodesAttribute * __strong attribute in nil_chk(values)) {
    if ([((NSString *) nil_chk([((OrgJsoupNodesAttribute *) nil_chk(attribute)) getKey])) java_hasPrefix:keyPrefix_]) return true;
  }
  return false;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[^%s]", [IOSObjectArray arrayWithObjects:(id[]){ keyPrefix_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(keyPrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyPrefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeStarting = { "AttributeStarting", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeStarting;
}

@end

void OrgJsoupSelectEvaluator_AttributeStarting_initWithNSString_(OrgJsoupSelectEvaluator_AttributeStarting *self, NSString *keyPrefix) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->keyPrefix_, keyPrefix);
}

OrgJsoupSelectEvaluator_AttributeStarting *new_OrgJsoupSelectEvaluator_AttributeStarting_initWithNSString_(NSString *keyPrefix) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeStarting, initWithNSString_, keyPrefix)
}

OrgJsoupSelectEvaluator_AttributeStarting *create_OrgJsoupSelectEvaluator_AttributeStarting_initWithNSString_(NSString *keyPrefix) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeStarting, initWithNSString_, keyPrefix)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeStarting)

@implementation OrgJsoupSelectEvaluator_AttributeKeyPair

- (instancetype)initWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(self, key, value);
  return self;
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeKeyPair = { "AttributeKeyPair", "org.jsoup.select", ptrTable, methods, fields, 7, 0x409, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeKeyPair;
}

@end

void OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(OrgJsoupSelectEvaluator_AttributeKeyPair *self, NSString *key, NSString *value) {
  OrgJsoupSelectEvaluator_init(self);
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  OrgJsoupHelperValidate_notEmptyWithNSString_(value);
  JreStrongAssign(&self->key_, [((NSString *) nil_chk([((NSString *) nil_chk(key)) java_trim])) lowercaseString]);
  if ([((NSString *) nil_chk(value)) java_hasPrefix:@"\""] && [value java_hasSuffix:@"\""]) {
    value = [value java_substring:1 endIndex:[value java_length] - 1];
  }
  JreStrongAssign(&self->value_, [((NSString *) nil_chk([((NSString *) nil_chk(value)) java_trim])) lowercaseString]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeKeyPair)

@implementation OrgJsoupSelectEvaluator_AttributeWithValue

- (instancetype)initWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  OrgJsoupSelectEvaluator_AttributeWithValue_initWithNSString_withNSString_(self, key, value);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupNodesElement *) nil_chk(element)) hasAttrWithNSString:key_] && [((NSString *) nil_chk(value_)) java_equalsIgnoreCase:[((NSString *) nil_chk([element attrWithNSString:key_])) java_trim]];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s=%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_, value_ } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeWithValue = { "AttributeWithValue", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeWithValue;
}

@end

void OrgJsoupSelectEvaluator_AttributeWithValue_initWithNSString_withNSString_(OrgJsoupSelectEvaluator_AttributeWithValue *self, NSString *key, NSString *value) {
  OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(self, key, value);
}

OrgJsoupSelectEvaluator_AttributeWithValue *new_OrgJsoupSelectEvaluator_AttributeWithValue_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeWithValue, initWithNSString_withNSString_, key, value)
}

OrgJsoupSelectEvaluator_AttributeWithValue *create_OrgJsoupSelectEvaluator_AttributeWithValue_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeWithValue, initWithNSString_withNSString_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeWithValue)

@implementation OrgJsoupSelectEvaluator_AttributeWithValueNot

- (instancetype)initWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  OrgJsoupSelectEvaluator_AttributeWithValueNot_initWithNSString_withNSString_(self, key, value);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return ![((NSString *) nil_chk(value_)) java_equalsIgnoreCase:[((OrgJsoupNodesElement *) nil_chk(element)) attrWithNSString:key_]];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s!=%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_, value_ } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeWithValueNot = { "AttributeWithValueNot", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeWithValueNot;
}

@end

void OrgJsoupSelectEvaluator_AttributeWithValueNot_initWithNSString_withNSString_(OrgJsoupSelectEvaluator_AttributeWithValueNot *self, NSString *key, NSString *value) {
  OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(self, key, value);
}

OrgJsoupSelectEvaluator_AttributeWithValueNot *new_OrgJsoupSelectEvaluator_AttributeWithValueNot_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueNot, initWithNSString_withNSString_, key, value)
}

OrgJsoupSelectEvaluator_AttributeWithValueNot *create_OrgJsoupSelectEvaluator_AttributeWithValueNot_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueNot, initWithNSString_withNSString_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeWithValueNot)

@implementation OrgJsoupSelectEvaluator_AttributeWithValueStarting

- (instancetype)initWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  OrgJsoupSelectEvaluator_AttributeWithValueStarting_initWithNSString_withNSString_(self, key, value);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupNodesElement *) nil_chk(element)) hasAttrWithNSString:key_] && [((NSString *) nil_chk([((NSString *) nil_chk([element attrWithNSString:key_])) lowercaseString])) java_hasPrefix:value_];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s^=%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_, value_ } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeWithValueStarting = { "AttributeWithValueStarting", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeWithValueStarting;
}

@end

void OrgJsoupSelectEvaluator_AttributeWithValueStarting_initWithNSString_withNSString_(OrgJsoupSelectEvaluator_AttributeWithValueStarting *self, NSString *key, NSString *value) {
  OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(self, key, value);
}

OrgJsoupSelectEvaluator_AttributeWithValueStarting *new_OrgJsoupSelectEvaluator_AttributeWithValueStarting_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueStarting, initWithNSString_withNSString_, key, value)
}

OrgJsoupSelectEvaluator_AttributeWithValueStarting *create_OrgJsoupSelectEvaluator_AttributeWithValueStarting_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueStarting, initWithNSString_withNSString_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeWithValueStarting)

@implementation OrgJsoupSelectEvaluator_AttributeWithValueEnding

- (instancetype)initWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  OrgJsoupSelectEvaluator_AttributeWithValueEnding_initWithNSString_withNSString_(self, key, value);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupNodesElement *) nil_chk(element)) hasAttrWithNSString:key_] && [((NSString *) nil_chk([((NSString *) nil_chk([element attrWithNSString:key_])) lowercaseString])) java_hasSuffix:value_];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s$=%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_, value_ } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeWithValueEnding = { "AttributeWithValueEnding", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeWithValueEnding;
}

@end

void OrgJsoupSelectEvaluator_AttributeWithValueEnding_initWithNSString_withNSString_(OrgJsoupSelectEvaluator_AttributeWithValueEnding *self, NSString *key, NSString *value) {
  OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(self, key, value);
}

OrgJsoupSelectEvaluator_AttributeWithValueEnding *new_OrgJsoupSelectEvaluator_AttributeWithValueEnding_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueEnding, initWithNSString_withNSString_, key, value)
}

OrgJsoupSelectEvaluator_AttributeWithValueEnding *create_OrgJsoupSelectEvaluator_AttributeWithValueEnding_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueEnding, initWithNSString_withNSString_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeWithValueEnding)

@implementation OrgJsoupSelectEvaluator_AttributeWithValueContaining

- (instancetype)initWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  OrgJsoupSelectEvaluator_AttributeWithValueContaining_initWithNSString_withNSString_(self, key, value);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupNodesElement *) nil_chk(element)) hasAttrWithNSString:key_] && [((NSString *) nil_chk([((NSString *) nil_chk([element attrWithNSString:key_])) lowercaseString])) java_contains:value_];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s*=%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_, value_ } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeWithValueContaining = { "AttributeWithValueContaining", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeWithValueContaining;
}

@end

void OrgJsoupSelectEvaluator_AttributeWithValueContaining_initWithNSString_withNSString_(OrgJsoupSelectEvaluator_AttributeWithValueContaining *self, NSString *key, NSString *value) {
  OrgJsoupSelectEvaluator_AttributeKeyPair_initWithNSString_withNSString_(self, key, value);
}

OrgJsoupSelectEvaluator_AttributeWithValueContaining *new_OrgJsoupSelectEvaluator_AttributeWithValueContaining_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueContaining, initWithNSString_withNSString_, key, value)
}

OrgJsoupSelectEvaluator_AttributeWithValueContaining *create_OrgJsoupSelectEvaluator_AttributeWithValueContaining_initWithNSString_withNSString_(NSString *key, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueContaining, initWithNSString_withNSString_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeWithValueContaining)

@implementation OrgJsoupSelectEvaluator_AttributeWithValueMatching

- (instancetype)initWithNSString:(NSString *)key
        withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgJsoupSelectEvaluator_AttributeWithValueMatching_initWithNSString_withJavaUtilRegexPattern_(self, key, pattern);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupNodesElement *) nil_chk(element)) hasAttrWithNSString:key_] && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:[element attrWithNSString:key_]])) find];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"[%s~=%s]", [IOSObjectArray arrayWithObjects:(id[]){ key_, [((JavaUtilRegexPattern *) nil_chk(pattern_)) description] } count:2 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(pattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilRegexPattern:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilRegexPattern;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AttributeWithValueMatching = { "AttributeWithValueMatching", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 2, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AttributeWithValueMatching;
}

@end

void OrgJsoupSelectEvaluator_AttributeWithValueMatching_initWithNSString_withJavaUtilRegexPattern_(OrgJsoupSelectEvaluator_AttributeWithValueMatching *self, NSString *key, JavaUtilRegexPattern *pattern) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->key_, [((NSString *) nil_chk([((NSString *) nil_chk(key)) java_trim])) lowercaseString]);
  JreStrongAssign(&self->pattern_, pattern);
}

OrgJsoupSelectEvaluator_AttributeWithValueMatching *new_OrgJsoupSelectEvaluator_AttributeWithValueMatching_initWithNSString_withJavaUtilRegexPattern_(NSString *key, JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueMatching, initWithNSString_withJavaUtilRegexPattern_, key, pattern)
}

OrgJsoupSelectEvaluator_AttributeWithValueMatching *create_OrgJsoupSelectEvaluator_AttributeWithValueMatching_initWithNSString_withJavaUtilRegexPattern_(NSString *key, JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AttributeWithValueMatching, initWithNSString_withJavaUtilRegexPattern_, key, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AttributeWithValueMatching)

@implementation OrgJsoupSelectEvaluator_AllElements

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_AllElements_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return true;
}

- (NSString *)description {
  return @"*";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_AllElements = { "AllElements", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_AllElements;
}

@end

void OrgJsoupSelectEvaluator_AllElements_init(OrgJsoupSelectEvaluator_AllElements *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_AllElements *new_OrgJsoupSelectEvaluator_AllElements_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_AllElements, init)
}

OrgJsoupSelectEvaluator_AllElements *create_OrgJsoupSelectEvaluator_AllElements_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_AllElements, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_AllElements)

@implementation OrgJsoupSelectEvaluator_IndexEvaluator

- (instancetype)initWithInt:(jint)index {
  OrgJsoupSelectEvaluator_IndexEvaluator_initWithInt_(self, index);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IndexEvaluator = { "IndexEvaluator", "org.jsoup.select", ptrTable, methods, fields, 7, 0x409, 1, 1, 1, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IndexEvaluator;
}

@end

void OrgJsoupSelectEvaluator_IndexEvaluator_initWithInt_(OrgJsoupSelectEvaluator_IndexEvaluator *self, jint index) {
  OrgJsoupSelectEvaluator_init(self);
  self->index_ = index;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IndexEvaluator)

@implementation OrgJsoupSelectEvaluator_IndexLessThan

- (instancetype)initWithInt:(jint)index {
  OrgJsoupSelectEvaluator_IndexLessThan_initWithInt_(self, index);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((JavaLangInteger *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) elementSiblingIndex])) intValue] < index_;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":lt(%d)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index_) } count:1 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IndexLessThan = { "IndexLessThan", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IndexLessThan;
}

@end

void OrgJsoupSelectEvaluator_IndexLessThan_initWithInt_(OrgJsoupSelectEvaluator_IndexLessThan *self, jint index) {
  OrgJsoupSelectEvaluator_IndexEvaluator_initWithInt_(self, index);
}

OrgJsoupSelectEvaluator_IndexLessThan *new_OrgJsoupSelectEvaluator_IndexLessThan_initWithInt_(jint index) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IndexLessThan, initWithInt_, index)
}

OrgJsoupSelectEvaluator_IndexLessThan *create_OrgJsoupSelectEvaluator_IndexLessThan_initWithInt_(jint index) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IndexLessThan, initWithInt_, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IndexLessThan)

@implementation OrgJsoupSelectEvaluator_IndexGreaterThan

- (instancetype)initWithInt:(jint)index {
  OrgJsoupSelectEvaluator_IndexGreaterThan_initWithInt_(self, index);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((JavaLangInteger *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) elementSiblingIndex])) intValue] > index_;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":gt(%d)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index_) } count:1 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IndexGreaterThan = { "IndexGreaterThan", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IndexGreaterThan;
}

@end

void OrgJsoupSelectEvaluator_IndexGreaterThan_initWithInt_(OrgJsoupSelectEvaluator_IndexGreaterThan *self, jint index) {
  OrgJsoupSelectEvaluator_IndexEvaluator_initWithInt_(self, index);
}

OrgJsoupSelectEvaluator_IndexGreaterThan *new_OrgJsoupSelectEvaluator_IndexGreaterThan_initWithInt_(jint index) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IndexGreaterThan, initWithInt_, index)
}

OrgJsoupSelectEvaluator_IndexGreaterThan *create_OrgJsoupSelectEvaluator_IndexGreaterThan_initWithInt_(jint index) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IndexGreaterThan, initWithInt_, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IndexGreaterThan)

@implementation OrgJsoupSelectEvaluator_IndexEquals

- (instancetype)initWithInt:(jint)index {
  OrgJsoupSelectEvaluator_IndexEquals_initWithInt_(self, index);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((JavaLangInteger *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) elementSiblingIndex])) intValue] == index_;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":eq(%d)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index_) } count:1 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IndexEquals = { "IndexEquals", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IndexEquals;
}

@end

void OrgJsoupSelectEvaluator_IndexEquals_initWithInt_(OrgJsoupSelectEvaluator_IndexEquals *self, jint index) {
  OrgJsoupSelectEvaluator_IndexEvaluator_initWithInt_(self, index);
}

OrgJsoupSelectEvaluator_IndexEquals *new_OrgJsoupSelectEvaluator_IndexEquals_initWithInt_(jint index) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IndexEquals, initWithInt_, index)
}

OrgJsoupSelectEvaluator_IndexEquals *create_OrgJsoupSelectEvaluator_IndexEquals_initWithInt_(jint index) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IndexEquals, initWithInt_, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IndexEquals)

@implementation OrgJsoupSelectEvaluator_IsLastChild

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsLastChild_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  OrgJsoupNodesElement *p = [((OrgJsoupNodesElement *) nil_chk(element)) parent];
  return p != nil && !([p isKindOfClass:[OrgJsoupNodesDocument class]]) && [((JavaLangInteger *) nil_chk([element elementSiblingIndex])) intValue] == [((OrgJsoupSelectElements *) nil_chk([p children])) size] - 1;
}

- (NSString *)description {
  return @":last-child";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsLastChild = { "IsLastChild", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsLastChild;
}

@end

void OrgJsoupSelectEvaluator_IsLastChild_init(OrgJsoupSelectEvaluator_IsLastChild *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_IsLastChild *new_OrgJsoupSelectEvaluator_IsLastChild_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsLastChild, init)
}

OrgJsoupSelectEvaluator_IsLastChild *create_OrgJsoupSelectEvaluator_IsLastChild_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsLastChild, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsLastChild)

@implementation OrgJsoupSelectEvaluator_CssNthEvaluator

- (instancetype)initWithInt:(jint)a
                    withInt:(jint)b {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(self, a, b);
  return self;
}

- (instancetype)initWithInt:(jint)b {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_(self, b);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  OrgJsoupNodesElement *p = [((OrgJsoupNodesElement *) nil_chk(element)) parent];
  if (p == nil || ([p isKindOfClass:[OrgJsoupNodesDocument class]])) return false;
  jint pos = [self calculatePositionWithOrgJsoupNodesElement:root withOrgJsoupNodesElement:element];
  if (a_ == 0) return pos == b_;
  return (pos - b_) * a_ >= 0 && (pos - b_) % a_ == 0;
}

- (NSString *)description {
  if (a_ == 0) return NSString_java_formatWithNSString_withNSObjectArray_(@":%s(%d)", [IOSObjectArray arrayWithObjects:(id[]){ [self getPseudoClass], JavaLangInteger_valueOfWithInt_(b_) } count:2 type:NSObject_class_()]);
  if (b_ == 0) return NSString_java_formatWithNSString_withNSObjectArray_(@":%s(%dn)", [IOSObjectArray arrayWithObjects:(id[]){ [self getPseudoClass], JavaLangInteger_valueOfWithInt_(a_) } count:2 type:NSObject_class_()]);
  return NSString_java_formatWithNSString_withNSObjectArray_(@":%s(%dn%+d)", [IOSObjectArray arrayWithObjects:(id[]){ [self getPseudoClass], JavaLangInteger_valueOfWithInt_(a_), JavaLangInteger_valueOfWithInt_(b_) } count:3 type:NSObject_class_()]);
}

- (NSString *)getPseudoClass {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)calculatePositionWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                         withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 5, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(getPseudoClass);
  methods[5].selector = @selector(calculatePositionWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "a_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "b_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "I", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "calculatePosition", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_CssNthEvaluator = { "CssNthEvaluator", "org.jsoup.select", ptrTable, methods, fields, 7, 0x409, 6, 2, 6, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_CssNthEvaluator;
}

@end

void OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(OrgJsoupSelectEvaluator_CssNthEvaluator *self, jint a, jint b) {
  OrgJsoupSelectEvaluator_init(self);
  self->a_ = a;
  self->b_ = b;
}

void OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_(OrgJsoupSelectEvaluator_CssNthEvaluator *self, jint b) {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(self, 0, b);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_CssNthEvaluator)

@implementation OrgJsoupSelectEvaluator_IsNthOfType

- (instancetype)initWithInt:(jint)a
                    withInt:(jint)b {
  OrgJsoupSelectEvaluator_IsNthOfType_initWithInt_withInt_(self, a, b);
  return self;
}

- (jint)calculatePositionWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                         withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  jint pos = 0;
  OrgJsoupSelectElements *family = [((OrgJsoupNodesElement *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) parent])) children];
  for (jint i = 0; i < [((OrgJsoupSelectElements *) nil_chk(family)) size]; i++) {
    if ([((OrgJsoupParserTag *) nil_chk([((OrgJsoupNodesElement *) nil_chk([family getWithInt:i])) tag])) isEqual:[element tag]]) pos++;
    if ([family getWithInt:i] == element) break;
  }
  return pos;
}

- (NSString *)getPseudoClass {
  return @"nth-of-type";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(calculatePositionWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(getPseudoClass);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "II", "calculatePosition", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsNthOfType = { "IsNthOfType", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x9, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsNthOfType;
}

@end

void OrgJsoupSelectEvaluator_IsNthOfType_initWithInt_withInt_(OrgJsoupSelectEvaluator_IsNthOfType *self, jint a, jint b) {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(self, a, b);
}

OrgJsoupSelectEvaluator_IsNthOfType *new_OrgJsoupSelectEvaluator_IsNthOfType_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsNthOfType, initWithInt_withInt_, a, b)
}

OrgJsoupSelectEvaluator_IsNthOfType *create_OrgJsoupSelectEvaluator_IsNthOfType_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsNthOfType, initWithInt_withInt_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsNthOfType)

@implementation OrgJsoupSelectEvaluator_IsFirstOfType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsFirstOfType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return @":first-of-type";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsFirstOfType = { "IsFirstOfType", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 2, 0, 1, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsFirstOfType;
}

@end

void OrgJsoupSelectEvaluator_IsFirstOfType_init(OrgJsoupSelectEvaluator_IsFirstOfType *self) {
  OrgJsoupSelectEvaluator_IsNthOfType_initWithInt_withInt_(self, 0, 1);
}

OrgJsoupSelectEvaluator_IsFirstOfType *new_OrgJsoupSelectEvaluator_IsFirstOfType_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsFirstOfType, init)
}

OrgJsoupSelectEvaluator_IsFirstOfType *create_OrgJsoupSelectEvaluator_IsFirstOfType_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsFirstOfType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsFirstOfType)

@implementation OrgJsoupSelectEvaluator_IsNthLastOfType

- (instancetype)initWithInt:(jint)a
                    withInt:(jint)b {
  OrgJsoupSelectEvaluator_IsNthLastOfType_initWithInt_withInt_(self, a, b);
  return self;
}

- (jint)calculatePositionWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                         withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  jint pos = 0;
  OrgJsoupSelectElements *family = [((OrgJsoupNodesElement *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) parent])) children];
  for (jint i = [((JavaLangInteger *) nil_chk([element elementSiblingIndex])) intValue]; i < [((OrgJsoupSelectElements *) nil_chk(family)) size]; i++) {
    if ([((OrgJsoupParserTag *) nil_chk([((OrgJsoupNodesElement *) nil_chk([family getWithInt:i])) tag])) isEqual:[element tag]]) pos++;
  }
  return pos;
}

- (NSString *)getPseudoClass {
  return @"nth-last-of-type";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(calculatePositionWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(getPseudoClass);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "II", "calculatePosition", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsNthLastOfType = { "IsNthLastOfType", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x9, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsNthLastOfType;
}

@end

void OrgJsoupSelectEvaluator_IsNthLastOfType_initWithInt_withInt_(OrgJsoupSelectEvaluator_IsNthLastOfType *self, jint a, jint b) {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(self, a, b);
}

OrgJsoupSelectEvaluator_IsNthLastOfType *new_OrgJsoupSelectEvaluator_IsNthLastOfType_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsNthLastOfType, initWithInt_withInt_, a, b)
}

OrgJsoupSelectEvaluator_IsNthLastOfType *create_OrgJsoupSelectEvaluator_IsNthLastOfType_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsNthLastOfType, initWithInt_withInt_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsNthLastOfType)

@implementation OrgJsoupSelectEvaluator_IsLastOfType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsLastOfType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return @":last-of-type";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsLastOfType = { "IsLastOfType", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 2, 0, 1, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsLastOfType;
}

@end

void OrgJsoupSelectEvaluator_IsLastOfType_init(OrgJsoupSelectEvaluator_IsLastOfType *self) {
  OrgJsoupSelectEvaluator_IsNthLastOfType_initWithInt_withInt_(self, 0, 1);
}

OrgJsoupSelectEvaluator_IsLastOfType *new_OrgJsoupSelectEvaluator_IsLastOfType_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsLastOfType, init)
}

OrgJsoupSelectEvaluator_IsLastOfType *create_OrgJsoupSelectEvaluator_IsLastOfType_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsLastOfType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsLastOfType)

@implementation OrgJsoupSelectEvaluator_IsNthChild

- (instancetype)initWithInt:(jint)a
                    withInt:(jint)b {
  OrgJsoupSelectEvaluator_IsNthChild_initWithInt_withInt_(self, a, b);
  return self;
}

- (jint)calculatePositionWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                         withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((JavaLangInteger *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) elementSiblingIndex])) intValue] + 1;
}

- (NSString *)getPseudoClass {
  return @"nth-child";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(calculatePositionWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(getPseudoClass);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "II", "calculatePosition", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsNthChild = { "IsNthChild", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsNthChild;
}

@end

void OrgJsoupSelectEvaluator_IsNthChild_initWithInt_withInt_(OrgJsoupSelectEvaluator_IsNthChild *self, jint a, jint b) {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(self, a, b);
}

OrgJsoupSelectEvaluator_IsNthChild *new_OrgJsoupSelectEvaluator_IsNthChild_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsNthChild, initWithInt_withInt_, a, b)
}

OrgJsoupSelectEvaluator_IsNthChild *create_OrgJsoupSelectEvaluator_IsNthChild_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsNthChild, initWithInt_withInt_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsNthChild)

@implementation OrgJsoupSelectEvaluator_IsNthLastChild

- (instancetype)initWithInt:(jint)a
                    withInt:(jint)b {
  OrgJsoupSelectEvaluator_IsNthLastChild_initWithInt_withInt_(self, a, b);
  return self;
}

- (jint)calculatePositionWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                         withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return [((OrgJsoupSelectElements *) nil_chk([((OrgJsoupNodesElement *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) parent])) children])) size] - [((JavaLangInteger *) nil_chk([element elementSiblingIndex])) intValue];
}

- (NSString *)getPseudoClass {
  return @"nth-last-child";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(calculatePositionWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(getPseudoClass);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "II", "calculatePosition", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsNthLastChild = { "IsNthLastChild", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsNthLastChild;
}

@end

void OrgJsoupSelectEvaluator_IsNthLastChild_initWithInt_withInt_(OrgJsoupSelectEvaluator_IsNthLastChild *self, jint a, jint b) {
  OrgJsoupSelectEvaluator_CssNthEvaluator_initWithInt_withInt_(self, a, b);
}

OrgJsoupSelectEvaluator_IsNthLastChild *new_OrgJsoupSelectEvaluator_IsNthLastChild_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsNthLastChild, initWithInt_withInt_, a, b)
}

OrgJsoupSelectEvaluator_IsNthLastChild *create_OrgJsoupSelectEvaluator_IsNthLastChild_initWithInt_withInt_(jint a, jint b) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsNthLastChild, initWithInt_withInt_, a, b)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsNthLastChild)

@implementation OrgJsoupSelectEvaluator_IsFirstChild

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsFirstChild_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  OrgJsoupNodesElement *p = [((OrgJsoupNodesElement *) nil_chk(element)) parent];
  return p != nil && !([p isKindOfClass:[OrgJsoupNodesDocument class]]) && [((JavaLangInteger *) nil_chk([element elementSiblingIndex])) intValue] == 0;
}

- (NSString *)description {
  return @":first-child";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsFirstChild = { "IsFirstChild", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsFirstChild;
}

@end

void OrgJsoupSelectEvaluator_IsFirstChild_init(OrgJsoupSelectEvaluator_IsFirstChild *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_IsFirstChild *new_OrgJsoupSelectEvaluator_IsFirstChild_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsFirstChild, init)
}

OrgJsoupSelectEvaluator_IsFirstChild *create_OrgJsoupSelectEvaluator_IsFirstChild_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsFirstChild, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsFirstChild)

@implementation OrgJsoupSelectEvaluator_IsRoot

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsRoot_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  OrgJsoupNodesElement *r = [root isKindOfClass:[OrgJsoupNodesDocument class]] ? [((OrgJsoupNodesElement *) nil_chk(root)) childWithInt:0] : root;
  return element == r;
}

- (NSString *)description {
  return @":root";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsRoot = { "IsRoot", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsRoot;
}

@end

void OrgJsoupSelectEvaluator_IsRoot_init(OrgJsoupSelectEvaluator_IsRoot *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_IsRoot *new_OrgJsoupSelectEvaluator_IsRoot_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsRoot, init)
}

OrgJsoupSelectEvaluator_IsRoot *create_OrgJsoupSelectEvaluator_IsRoot_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsRoot, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsRoot)

@implementation OrgJsoupSelectEvaluator_IsOnlyChild

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsOnlyChild_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  OrgJsoupNodesElement *p = [((OrgJsoupNodesElement *) nil_chk(element)) parent];
  return p != nil && !([p isKindOfClass:[OrgJsoupNodesDocument class]]) && [((OrgJsoupSelectElements *) nil_chk([element siblingElements])) size] == 0;
}

- (NSString *)description {
  return @":only-child";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsOnlyChild = { "IsOnlyChild", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsOnlyChild;
}

@end

void OrgJsoupSelectEvaluator_IsOnlyChild_init(OrgJsoupSelectEvaluator_IsOnlyChild *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_IsOnlyChild *new_OrgJsoupSelectEvaluator_IsOnlyChild_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsOnlyChild, init)
}

OrgJsoupSelectEvaluator_IsOnlyChild *create_OrgJsoupSelectEvaluator_IsOnlyChild_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsOnlyChild, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsOnlyChild)

@implementation OrgJsoupSelectEvaluator_IsOnlyOfType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsOnlyOfType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  OrgJsoupNodesElement *p = [((OrgJsoupNodesElement *) nil_chk(element)) parent];
  if (p == nil || [p isKindOfClass:[OrgJsoupNodesDocument class]]) return false;
  jint pos = 0;
  OrgJsoupSelectElements *family = [p children];
  for (jint i = 0; i < [((OrgJsoupSelectElements *) nil_chk(family)) size]; i++) {
    if ([((OrgJsoupParserTag *) nil_chk([((OrgJsoupNodesElement *) nil_chk([family getWithInt:i])) tag])) isEqual:[element tag]]) pos++;
  }
  return pos == 1;
}

- (NSString *)description {
  return @":only-of-type";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsOnlyOfType = { "IsOnlyOfType", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsOnlyOfType;
}

@end

void OrgJsoupSelectEvaluator_IsOnlyOfType_init(OrgJsoupSelectEvaluator_IsOnlyOfType *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_IsOnlyOfType *new_OrgJsoupSelectEvaluator_IsOnlyOfType_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsOnlyOfType, init)
}

OrgJsoupSelectEvaluator_IsOnlyOfType *create_OrgJsoupSelectEvaluator_IsOnlyOfType_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsOnlyOfType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsOnlyOfType)

@implementation OrgJsoupSelectEvaluator_IsEmpty

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupSelectEvaluator_IsEmpty_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  id<JavaUtilList> family = [((OrgJsoupNodesElement *) nil_chk(element)) childNodes];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(family)) size]; i++) {
    OrgJsoupNodesNode *n = [family getWithInt:i];
    if (!([n isKindOfClass:[OrgJsoupNodesComment class]] || [n isKindOfClass:[OrgJsoupNodesXmlDeclaration class]] || [n isKindOfClass:[OrgJsoupNodesDocumentType class]])) return false;
  }
  return true;
}

- (NSString *)description {
  return @":empty";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_IsEmpty = { "IsEmpty", "org.jsoup.select", ptrTable, methods, NULL, 7, 0x19, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_IsEmpty;
}

@end

void OrgJsoupSelectEvaluator_IsEmpty_init(OrgJsoupSelectEvaluator_IsEmpty *self) {
  OrgJsoupSelectEvaluator_init(self);
}

OrgJsoupSelectEvaluator_IsEmpty *new_OrgJsoupSelectEvaluator_IsEmpty_init() {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_IsEmpty, init)
}

OrgJsoupSelectEvaluator_IsEmpty *create_OrgJsoupSelectEvaluator_IsEmpty_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_IsEmpty, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_IsEmpty)

@implementation OrgJsoupSelectEvaluator_ContainsText

- (instancetype)initWithNSString:(NSString *)searchText {
  OrgJsoupSelectEvaluator_ContainsText_initWithNSString_(self, searchText);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return ([((NSString *) nil_chk([((NSString *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) text])) lowercaseString])) java_contains:searchText_]);
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":contains(%s", [IOSObjectArray arrayWithObjects:(id[]){ searchText_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(searchText_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "searchText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_ContainsText = { "ContainsText", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_ContainsText;
}

@end

void OrgJsoupSelectEvaluator_ContainsText_initWithNSString_(OrgJsoupSelectEvaluator_ContainsText *self, NSString *searchText) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->searchText_, [((NSString *) nil_chk(searchText)) lowercaseString]);
}

OrgJsoupSelectEvaluator_ContainsText *new_OrgJsoupSelectEvaluator_ContainsText_initWithNSString_(NSString *searchText) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_ContainsText, initWithNSString_, searchText)
}

OrgJsoupSelectEvaluator_ContainsText *create_OrgJsoupSelectEvaluator_ContainsText_initWithNSString_(NSString *searchText) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_ContainsText, initWithNSString_, searchText)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_ContainsText)

@implementation OrgJsoupSelectEvaluator_ContainsOwnText

- (instancetype)initWithNSString:(NSString *)searchText {
  OrgJsoupSelectEvaluator_ContainsOwnText_initWithNSString_(self, searchText);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  return ([((NSString *) nil_chk([((NSString *) nil_chk([((OrgJsoupNodesElement *) nil_chk(element)) ownText])) lowercaseString])) java_contains:searchText_]);
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":containsOwn(%s", [IOSObjectArray arrayWithObjects:(id[]){ searchText_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(searchText_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "searchText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_ContainsOwnText = { "ContainsOwnText", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_ContainsOwnText;
}

@end

void OrgJsoupSelectEvaluator_ContainsOwnText_initWithNSString_(OrgJsoupSelectEvaluator_ContainsOwnText *self, NSString *searchText) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->searchText_, [((NSString *) nil_chk(searchText)) lowercaseString]);
}

OrgJsoupSelectEvaluator_ContainsOwnText *new_OrgJsoupSelectEvaluator_ContainsOwnText_initWithNSString_(NSString *searchText) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_ContainsOwnText, initWithNSString_, searchText)
}

OrgJsoupSelectEvaluator_ContainsOwnText *create_OrgJsoupSelectEvaluator_ContainsOwnText_initWithNSString_(NSString *searchText) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_ContainsOwnText, initWithNSString_, searchText)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_ContainsOwnText)

@implementation OrgJsoupSelectEvaluator_Matches

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgJsoupSelectEvaluator_Matches_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:[((OrgJsoupNodesElement *) nil_chk(element)) text]];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) find];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":matches(%s", [IOSObjectArray arrayWithObjects:(id[]){ pattern_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(pattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_Matches = { "Matches", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_Matches;
}

@end

void OrgJsoupSelectEvaluator_Matches_initWithJavaUtilRegexPattern_(OrgJsoupSelectEvaluator_Matches *self, JavaUtilRegexPattern *pattern) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->pattern_, pattern);
}

OrgJsoupSelectEvaluator_Matches *new_OrgJsoupSelectEvaluator_Matches_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_Matches, initWithJavaUtilRegexPattern_, pattern)
}

OrgJsoupSelectEvaluator_Matches *create_OrgJsoupSelectEvaluator_Matches_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_Matches, initWithJavaUtilRegexPattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_Matches)

@implementation OrgJsoupSelectEvaluator_MatchesOwn

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  OrgJsoupSelectEvaluator_MatchesOwn_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (jboolean)matchesWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)root
                   withOrgJsoupNodesElement:(OrgJsoupNodesElement *)element {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:[((OrgJsoupNodesElement *) nil_chk(element)) ownText]];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) find];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@":matchesOwn(%s", [IOSObjectArray arrayWithObjects:(id[]){ pattern_ } count:1 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(pattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:);
  methods[1].selector = @selector(matchesWithOrgJsoupNodesElement:withOrgJsoupNodesElement:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;", "matches", "LOrgJsoupNodesElement;LOrgJsoupNodesElement;", "toString", "LOrgJsoupSelectEvaluator;" };
  static const J2ObjcClassInfo _OrgJsoupSelectEvaluator_MatchesOwn = { "MatchesOwn", "org.jsoup.select", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, -1, -1 };
  return &_OrgJsoupSelectEvaluator_MatchesOwn;
}

@end

void OrgJsoupSelectEvaluator_MatchesOwn_initWithJavaUtilRegexPattern_(OrgJsoupSelectEvaluator_MatchesOwn *self, JavaUtilRegexPattern *pattern) {
  OrgJsoupSelectEvaluator_init(self);
  JreStrongAssign(&self->pattern_, pattern);
}

OrgJsoupSelectEvaluator_MatchesOwn *new_OrgJsoupSelectEvaluator_MatchesOwn_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(OrgJsoupSelectEvaluator_MatchesOwn, initWithJavaUtilRegexPattern_, pattern)
}

OrgJsoupSelectEvaluator_MatchesOwn *create_OrgJsoupSelectEvaluator_MatchesOwn_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(OrgJsoupSelectEvaluator_MatchesOwn, initWithJavaUtilRegexPattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupSelectEvaluator_MatchesOwn)
