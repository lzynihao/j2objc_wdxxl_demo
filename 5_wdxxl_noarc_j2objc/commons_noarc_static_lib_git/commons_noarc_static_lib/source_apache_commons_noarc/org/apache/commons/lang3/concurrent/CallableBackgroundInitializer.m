//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "org/apache/commons/lang3/concurrent/BackgroundInitializer.h"
#include "org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.h"

@interface OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer () {
 @public
  id<JavaUtilConcurrentCallable> callable_;
}

- (void)checkCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)call;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer, callable_, id<JavaUtilConcurrentCallable>)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_checkCallableWithJavaUtilConcurrentCallable_(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *self, id<JavaUtilConcurrentCallable> call);

@implementation OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)call {
  OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(self, call);
  return self;
}

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)call
             withJavaUtilConcurrentExecutorService:(id<JavaUtilConcurrentExecutorService>)exec {
  OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(self, call, exec);
  return self;
}

- (id)initialize__ {
  return [((id<JavaUtilConcurrentCallable>) nil_chk(callable_)) call];
}

- (void)checkCallableWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)call {
  OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_checkCallableWithJavaUtilConcurrentCallable_(self, call);
}

- (void)dealloc {
  RELEASE_(callable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x4, 4, -1, 5, 6, -1, -1 },
    { NULL, "V", 0x2, 7, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(initWithJavaUtilConcurrentCallable:withJavaUtilConcurrentExecutorService:);
  methods[2].selector = @selector(initialize__);
  methods[3].selector = @selector(checkCallableWithJavaUtilConcurrentCallable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<TT;>;)V", "LJavaUtilConcurrentCallable;LJavaUtilConcurrentExecutorService;", "(Ljava/util/concurrent/Callable<TT;>;Ljava/util/concurrent/ExecutorService;)V", "initialize", "LJavaLangException;", "()TT;", "checkCallable", "Ljava/util/concurrent/Callable<TT;>;", "<T:Ljava/lang/Object;>Lorg/apache/commons/lang3/concurrent/BackgroundInitializer<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer = { "CallableBackgroundInitializer", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 9, -1 };
  return &_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer;
}

@end

void OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *self, id<JavaUtilConcurrentCallable> call) {
  OrgApacheCommonsLang3ConcurrentBackgroundInitializer_init(self);
  OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_checkCallableWithJavaUtilConcurrentCallable_(self, call);
  JreStrongAssign(&self->callable_, call);
}

OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *new_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> call) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer, initWithJavaUtilConcurrentCallable_, call)
}

OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *create_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> call) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer, initWithJavaUtilConcurrentCallable_, call)
}

void OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *self, id<JavaUtilConcurrentCallable> call, id<JavaUtilConcurrentExecutorService> exec) {
  OrgApacheCommonsLang3ConcurrentBackgroundInitializer_initWithJavaUtilConcurrentExecutorService_(self, exec);
  OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_checkCallableWithJavaUtilConcurrentCallable_(self, call);
  JreStrongAssign(&self->callable_, call);
}

OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *new_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentCallable> call, id<JavaUtilConcurrentExecutorService> exec) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer, initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_, call, exec)
}

OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *create_OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_(id<JavaUtilConcurrentCallable> call, id<JavaUtilConcurrentExecutorService> exec) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer, initWithJavaUtilConcurrentCallable_withJavaUtilConcurrentExecutorService_, call, exec)
}

void OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer_checkCallableWithJavaUtilConcurrentCallable_(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer *self, id<JavaUtilConcurrentCallable> call) {
  if (call == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Callable must not be null!");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentCallableBackgroundInitializer)
