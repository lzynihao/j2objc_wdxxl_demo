//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/reflect/TypeLiteral.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/util/Map.h"
#include "org/apache/commons/lang3/Validate.h"
#include "org/apache/commons/lang3/reflect/TypeLiteral.h"
#include "org/apache/commons/lang3/reflect/TypeUtils.h"

@interface OrgApacheCommonsLang3ReflectTypeLiteral () {
 @public
  NSString *toString_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeLiteral, toString_, NSString *)

inline id<JavaLangReflectTypeVariable> OrgApacheCommonsLang3ReflectTypeLiteral_get_T(void);
static id<JavaLangReflectTypeVariable> OrgApacheCommonsLang3ReflectTypeLiteral_T;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ReflectTypeLiteral, T, id<JavaLangReflectTypeVariable>)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ReflectTypeLiteral)

@implementation OrgApacheCommonsLang3ReflectTypeLiteral

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ReflectTypeLiteral_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return true;
  }
  if ([obj isKindOfClass:[OrgApacheCommonsLang3ReflectTypeLiteral class]] == false) {
    return false;
  }
  OrgApacheCommonsLang3ReflectTypeLiteral *other = (OrgApacheCommonsLang3ReflectTypeLiteral *) cast_chk(obj, [OrgApacheCommonsLang3ReflectTypeLiteral class]);
  return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_(value_, ((OrgApacheCommonsLang3ReflectTypeLiteral *) nil_chk(other))->value_);
}

- (NSUInteger)hash {
  return (JreLShift32(37, 4)) | ((jint) [((id<JavaLangReflectType>) nil_chk(value_)) hash]);
}

- (NSString *)description {
  return toString_;
}

- (id<JavaLangReflectType>)getType {
  return value_;
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(toString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "T", "LJavaLangReflectTypeVariable;", .constantValue.asLong = 0, 0x1a, -1, 4, 5, -1 },
    { "value_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "toString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "hashCode", "toString", &OrgApacheCommonsLang3ReflectTypeLiteral_T, "Ljava/lang/reflect/TypeVariable<Ljava/lang/Class<Lorg/apache/commons/lang3/reflect/TypeLiteral;>;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/reflect/Typed<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeLiteral = { "TypeLiteral", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x401, 5, 3, -1, -1, -1, 6, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeLiteral;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ReflectTypeLiteral class]) {
    JreStrongAssign(&OrgApacheCommonsLang3ReflectTypeLiteral_T, IOSObjectArray_Get(nil_chk([OrgApacheCommonsLang3ReflectTypeLiteral_class_() getTypeParameters]), 0));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ReflectTypeLiteral)
  }
}

@end

void OrgApacheCommonsLang3ReflectTypeLiteral_init(OrgApacheCommonsLang3ReflectTypeLiteral *self) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_([((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_([self java_getClass], OrgApacheCommonsLang3ReflectTypeLiteral_class_()))) getWithId:OrgApacheCommonsLang3ReflectTypeLiteral_T], @"%s does not assign type parameter %s", [IOSObjectArray arrayWithObjects:(id[]){ [self java_getClass], OrgApacheCommonsLang3ReflectTypeUtils_toLongStringWithJavaLangReflectTypeVariable_(OrgApacheCommonsLang3ReflectTypeLiteral_T) } count:2 type:NSObject_class_()]));
  JreStrongAssign(&self->toString_, NSString_java_formatWithNSString_withNSObjectArray_(@"%s<%s>", [IOSObjectArray arrayWithObjects:(id[]){ [OrgApacheCommonsLang3ReflectTypeLiteral_class_() getSimpleName], OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(self->value_) } count:2 type:NSObject_class_()]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectTypeLiteral)
