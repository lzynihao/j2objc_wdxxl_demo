//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/text/StrBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Readable.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/nio/CharBuffer.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/stream/IntStream.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/ObjectUtils.h"
#include "org/apache/commons/lang3/SystemUtils.h"
#include "org/apache/commons/lang3/text/StrBuilder.h"
#include "org/apache/commons/lang3/text/StrMatcher.h"
#include "org/apache/commons/lang3/text/StrTokenizer.h"

@interface OrgApacheCommonsLang3TextStrBuilder () {
 @public
  NSString *newLine_;
  NSString *nullText_;
}

- (void)deleteImplWithInt:(jint)startIndex
                  withInt:(jint)endIndex
                  withInt:(jint)len;

- (void)replaceImplWithInt:(jint)startIndex
                   withInt:(jint)endIndex
                   withInt:(jint)removeLen
              withNSString:(NSString *)insertStr
                   withInt:(jint)insertLen;

- (OrgApacheCommonsLang3TextStrBuilder *)replaceImplWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                                                               withNSString:(NSString *)replaceStr
                                                                                    withInt:(jint)from
                                                                                    withInt:(jint)to
                                                                                    withInt:(jint)replaceCount;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrBuilder, newLine_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrBuilder, nullText_, NSString *)

inline jlong OrgApacheCommonsLang3TextStrBuilder_get_serialVersionUID(void);
#define OrgApacheCommonsLang3TextStrBuilder_serialVersionUID 7628716375283629643LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TextStrBuilder, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(OrgApacheCommonsLang3TextStrBuilder *self, jint startIndex, jint endIndex, jint len);

__attribute__((unused)) static void OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(OrgApacheCommonsLang3TextStrBuilder *self, jint startIndex, jint endIndex, jint removeLen, NSString *insertStr, jint insertLen);

__attribute__((unused)) static OrgApacheCommonsLang3TextStrBuilder *OrgApacheCommonsLang3TextStrBuilder_replaceImplWithOrgApacheCommonsLang3TextStrMatcher_withNSString_withInt_withInt_withInt_(OrgApacheCommonsLang3TextStrBuilder *self, OrgApacheCommonsLang3TextStrMatcher *matcher, NSString *replaceStr, jint from, jint to, jint replaceCount);

@interface OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer () {
 @public
  OrgApacheCommonsLang3TextStrBuilder *this$0_;
}

@end

@interface OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader () {
 @public
  OrgApacheCommonsLang3TextStrBuilder *this$0_;
  jint pos_;
  jint mark_;
}

@end

@interface OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter () {
 @public
  OrgApacheCommonsLang3TextStrBuilder *this$0_;
}

@end

@implementation OrgApacheCommonsLang3TextStrBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextStrBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialCapacity {
  OrgApacheCommonsLang3TextStrBuilder_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithNSString:(NSString *)str {
  OrgApacheCommonsLang3TextStrBuilder_initWithNSString_(self, str);
  return self;
}

- (NSString *)getNewLineText {
  return newLine_;
}

- (OrgApacheCommonsLang3TextStrBuilder *)setNewLineTextWithNSString:(NSString *)newLine {
  JreStrongAssign(&self->newLine_, newLine);
  return self;
}

- (NSString *)getNullText {
  return nullText_;
}

- (OrgApacheCommonsLang3TextStrBuilder *)setNullTextWithNSString:(NSString *)nullText {
  if (nullText != nil && [nullText java_isEmpty]) {
    nullText = nil;
  }
  JreStrongAssign(&self->nullText_, nullText);
  return self;
}

- (jint)java_length {
  return size_;
}

- (OrgApacheCommonsLang3TextStrBuilder *)setLengthWithInt:(jint)length {
  if (length < 0) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(length);
  }
  if (length < size_) {
    size_ = length;
  }
  else if (length > size_) {
    [self ensureCapacityWithInt:length];
    jint oldEnd = size_;
    jint newEnd = length;
    size_ = length;
    for (jint i = oldEnd; i < newEnd; i++) {
      *IOSCharArray_GetRef(nil_chk(buffer_), i) = 0x0000;
    }
  }
  return self;
}

- (jint)capacity {
  return ((IOSCharArray *) nil_chk(buffer_))->size_;
}

- (OrgApacheCommonsLang3TextStrBuilder *)ensureCapacityWithInt:(jint)capacity {
  if (capacity > ((IOSCharArray *) nil_chk(buffer_))->size_) {
    IOSCharArray *old = buffer_;
    JreStrongAssignAndConsume(&buffer_, [IOSCharArray newArrayWithLength:capacity * 2]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(old, 0, buffer_, 0, size_);
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)minimizeCapacity {
  if (((IOSCharArray *) nil_chk(buffer_))->size_ > [self java_length]) {
    IOSCharArray *old = buffer_;
    JreStrongAssignAndConsume(&buffer_, [IOSCharArray newArrayWithLength:[self java_length]]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(old, 0, buffer_, 0, size_);
  }
  return self;
}

- (jint)size {
  return size_;
}

- (jboolean)isEmpty {
  return size_ == 0;
}

- (OrgApacheCommonsLang3TextStrBuilder *)clear {
  size_ = 0;
  return self;
}

- (jchar)charAtWithInt:(jint)index {
  if (index < 0 || index >= [self java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(index);
  }
  return IOSCharArray_Get(nil_chk(buffer_), index);
}

- (OrgApacheCommonsLang3TextStrBuilder *)setCharAtWithInt:(jint)index
                                                 withChar:(jchar)ch {
  if (index < 0 || index >= [self java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(index);
  }
  *IOSCharArray_GetRef(nil_chk(buffer_), index) = ch;
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteCharAtWithInt:(jint)index {
  if (index < 0 || index >= size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(index);
  }
  OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, index, index + 1, 1);
  return self;
}

- (IOSCharArray *)toCharArray {
  if (size_ == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_CHAR_ARRAY);
  }
  IOSCharArray *chars = [IOSCharArray arrayWithLength:size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, 0, chars, 0, size_);
  return chars;
}

- (IOSCharArray *)toCharArrayWithInt:(jint)startIndex
                             withInt:(jint)endIndex {
  endIndex = [self validateRangeWithInt:startIndex withInt:endIndex];
  jint len = endIndex - startIndex;
  if (len == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_CHAR_ARRAY);
  }
  IOSCharArray *chars = [IOSCharArray arrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, startIndex, chars, 0, len);
  return chars;
}

- (IOSCharArray *)getCharsWithCharArray:(IOSCharArray *)destination {
  jint len = [self java_length];
  if (destination == nil || destination->size_ < len) {
    destination = [IOSCharArray arrayWithLength:len];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, 0, destination, 0, len);
  return destination;
}

- (void)getCharsWithInt:(jint)startIndex
                withInt:(jint)endIndex
          withCharArray:(IOSCharArray *)destination
                withInt:(jint)destinationIndex {
  if (startIndex < 0) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(startIndex);
  }
  if (endIndex < 0 || endIndex > [self java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(endIndex);
  }
  if (startIndex > endIndex) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"end < start");
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, startIndex, destination, destinationIndex, endIndex - startIndex);
}

- (jint)readFromWithJavaLangReadable:(id<JavaLangReadable>)readable {
  jint oldSize = size_;
  if ([readable isKindOfClass:[JavaIoReader class]]) {
    JavaIoReader *r = (JavaIoReader *) cast_chk(readable, [JavaIoReader class]);
    [self ensureCapacityWithInt:size_ + 1];
    jint read;
    while ((read = [((JavaIoReader *) nil_chk(r)) readWithCharArray:buffer_ withInt:size_ withInt:((IOSCharArray *) nil_chk(buffer_))->size_ - size_]) != -1) {
      size_ += read;
      [self ensureCapacityWithInt:size_ + 1];
    }
  }
  else if ([readable isKindOfClass:[JavaNioCharBuffer class]]) {
    JavaNioCharBuffer *cb = (JavaNioCharBuffer *) cast_chk(readable, [JavaNioCharBuffer class]);
    jint remaining = [((JavaNioCharBuffer *) nil_chk(cb)) remaining];
    [self ensureCapacityWithInt:size_ + remaining];
    [cb getWithCharArray:buffer_ withInt:size_ withInt:remaining];
    size_ += remaining;
  }
  else {
    while (true) {
      [self ensureCapacityWithInt:size_ + 1];
      JavaNioCharBuffer *buf = JavaNioCharBuffer_wrapWithCharArray_withInt_withInt_(buffer_, size_, ((IOSCharArray *) nil_chk(buffer_))->size_ - size_);
      jint read = [((id<JavaLangReadable>) nil_chk(readable)) readWithJavaNioCharBuffer:buf];
      if (read == -1) {
        break;
      }
      size_ += read;
    }
  }
  return size_ - oldSize;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendNewLine {
  if (newLine_ == nil) {
    [self appendWithNSString:JreLoadStatic(OrgApacheCommonsLang3SystemUtils, LINE_SEPARATOR)];
    return self;
  }
  return [self appendWithNSString:newLine_];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendNull {
  if (nullText_ == nil) {
    return self;
  }
  return [self appendWithNSString:nullText_];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithId:(id)obj {
  if (obj == nil) {
    return [self appendNull];
  }
  if ([JavaLangCharSequence_class_() isInstance:obj]) {
    return [self appendWithJavaLangCharSequence:(id<JavaLangCharSequence>) cast_check(obj, JavaLangCharSequence_class_())];
  }
  return [self appendWithNSString:[obj description]];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq {
  if (seq == nil) {
    return [self appendNull];
  }
  if ([seq isKindOfClass:[OrgApacheCommonsLang3TextStrBuilder class]]) {
    return [self appendWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *) cast_chk(seq, [OrgApacheCommonsLang3TextStrBuilder class])];
  }
  if ([seq isKindOfClass:[JavaLangStringBuilder class]]) {
    return [self appendWithJavaLangStringBuilder:(JavaLangStringBuilder *) cast_chk(seq, [JavaLangStringBuilder class])];
  }
  if ([seq isKindOfClass:[JavaLangStringBuffer class]]) {
    return [self appendWithJavaLangStringBuffer:(JavaLangStringBuffer *) cast_chk(seq, [JavaLangStringBuffer class])];
  }
  if ([seq isKindOfClass:[JavaNioCharBuffer class]]) {
    return [self appendWithJavaNioCharBuffer:(JavaNioCharBuffer *) cast_chk(seq, [JavaNioCharBuffer class])];
  }
  return [self appendWithNSString:[seq description]];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                                                withInt:(jint)startIndex
                                                                withInt:(jint)length {
  if (seq == nil) {
    return [self appendNull];
  }
  return [self appendWithNSString:[seq description] withInt:startIndex withInt:length];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithNSString:(NSString *)str {
  if (str == nil) {
    return [self appendNull];
  }
  jint strLen = [str java_length];
  if (strLen > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + strLen];
    [str java_getChars:0 sourceEnd:strLen destination:buffer_ destinationBegin:len];
    size_ += strLen;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithNSString:(NSString *)str
                                                    withInt:(jint)startIndex
                                                    withInt:(jint)length {
  if (str == nil) {
    return [self appendNull];
  }
  if (startIndex < 0 || startIndex > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"startIndex must be valid");
  }
  if (length < 0 || (startIndex + length) > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"length must be valid");
  }
  if (length > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    [str java_getChars:startIndex sourceEnd:startIndex + length destination:buffer_ destinationBegin:len];
    size_ += length;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)objs {
  return [self appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(format, objs)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaNioCharBuffer:(JavaNioCharBuffer *)buf {
  if (buf == nil) {
    return [self appendNull];
  }
  if ([buf hasArray]) {
    jint length = [buf remaining];
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([buf array], [buf arrayOffset] + [buf position], buffer_, len, length);
    size_ += length;
  }
  else {
    [self appendWithNSString:[buf description]];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaNioCharBuffer:(JavaNioCharBuffer *)buf
                                                             withInt:(jint)startIndex
                                                             withInt:(jint)length {
  if (buf == nil) {
    return [self appendNull];
  }
  if ([buf hasArray]) {
    jint totalLength = [buf remaining];
    if (startIndex < 0 || startIndex > totalLength) {
      @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"startIndex must be valid");
    }
    if (length < 0 || (startIndex + length) > totalLength) {
      @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"length must be valid");
    }
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([buf array], [buf arrayOffset] + [buf position] + startIndex, buffer_, len, length);
    size_ += length;
  }
  else {
    [self appendWithNSString:[buf description] withInt:startIndex withInt:length];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaLangStringBuffer:(JavaLangStringBuffer *)str {
  if (str == nil) {
    return [self appendNull];
  }
  jint strLen = [str java_length];
  if (strLen > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + strLen];
    [str getCharsWithInt:0 withInt:strLen withCharArray:buffer_ withInt:len];
    size_ += strLen;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaLangStringBuffer:(JavaLangStringBuffer *)str
                                                                withInt:(jint)startIndex
                                                                withInt:(jint)length {
  if (str == nil) {
    return [self appendNull];
  }
  if (startIndex < 0 || startIndex > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"startIndex must be valid");
  }
  if (length < 0 || (startIndex + length) > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"length must be valid");
  }
  if (length > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    [str getCharsWithInt:startIndex withInt:startIndex + length withCharArray:buffer_ withInt:len];
    size_ += length;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaLangStringBuilder:(JavaLangStringBuilder *)str {
  if (str == nil) {
    return [self appendNull];
  }
  jint strLen = [str java_length];
  if (strLen > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + strLen];
    [str getCharsWithInt:0 withInt:strLen withCharArray:buffer_ withInt:len];
    size_ += strLen;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithJavaLangStringBuilder:(JavaLangStringBuilder *)str
                                                                 withInt:(jint)startIndex
                                                                 withInt:(jint)length {
  if (str == nil) {
    return [self appendNull];
  }
  if (startIndex < 0 || startIndex > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"startIndex must be valid");
  }
  if (length < 0 || (startIndex + length) > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"length must be valid");
  }
  if (length > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    [str getCharsWithInt:startIndex withInt:startIndex + length withCharArray:buffer_ withInt:len];
    size_ += length;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)str {
  if (str == nil) {
    return [self appendNull];
  }
  jint strLen = [str java_length];
  if (strLen > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + strLen];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(str->buffer_, 0, buffer_, len, strLen);
    size_ += strLen;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)str
                                                                               withInt:(jint)startIndex
                                                                               withInt:(jint)length {
  if (str == nil) {
    return [self appendNull];
  }
  if (startIndex < 0 || startIndex > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"startIndex must be valid");
  }
  if (length < 0 || (startIndex + length) > [str java_length]) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"length must be valid");
  }
  if (length > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    [str getCharsWithInt:startIndex withInt:startIndex + length withCharArray:buffer_ withInt:len];
    size_ += length;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithCharArray:(IOSCharArray *)chars {
  if (chars == nil) {
    return [self appendNull];
  }
  jint strLen = chars->size_;
  if (strLen > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + strLen];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chars, 0, buffer_, len, strLen);
    size_ += strLen;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithCharArray:(IOSCharArray *)chars
                                                     withInt:(jint)startIndex
                                                     withInt:(jint)length {
  if (chars == nil) {
    return [self appendNull];
  }
  if (startIndex < 0 || startIndex > chars->size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid startIndex: ", length));
  }
  if (length < 0 || (startIndex + length) > chars->size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid length: ", length));
  }
  if (length > 0) {
    jint len = [self java_length];
    [self ensureCapacityWithInt:len + length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chars, startIndex, buffer_, len, length);
    size_ += length;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithBoolean:(jboolean)value {
  if (value) {
    [self ensureCapacityWithInt:size_ + 4];
    *IOSCharArray_GetRef(nil_chk(buffer_), size_++) = 't';
    *IOSCharArray_GetRef(buffer_, size_++) = 'r';
    *IOSCharArray_GetRef(buffer_, size_++) = 'u';
    *IOSCharArray_GetRef(buffer_, size_++) = 'e';
  }
  else {
    [self ensureCapacityWithInt:size_ + 5];
    *IOSCharArray_GetRef(nil_chk(buffer_), size_++) = 'f';
    *IOSCharArray_GetRef(buffer_, size_++) = 'a';
    *IOSCharArray_GetRef(buffer_, size_++) = 'l';
    *IOSCharArray_GetRef(buffer_, size_++) = 's';
    *IOSCharArray_GetRef(buffer_, size_++) = 'e';
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithChar:(jchar)ch {
  jint len = [self java_length];
  [self ensureCapacityWithInt:len + 1];
  *IOSCharArray_GetRef(nil_chk(buffer_), size_++) = ch;
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithInt:(jint)value {
  return [self appendWithNSString:NSString_java_valueOfInt_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithLong:(jlong)value {
  return [self appendWithNSString:NSString_java_valueOfLong_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithFloat:(jfloat)value {
  return [self appendWithNSString:NSString_java_valueOfFloat_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithDouble:(jdouble)value {
  return [self appendWithNSString:NSString_java_valueOfDouble_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithId:(id)obj {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithId:obj])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithNSString:(NSString *)str {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithNSString:str])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithNSString:(NSString *)str
                                                      withInt:(jint)startIndex
                                                      withInt:(jint)length {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithNSString:str withInt:startIndex withInt:length])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithNSString:(NSString *)format
                                            withNSObjectArray:(IOSObjectArray *)objs {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithNSString:format withNSObjectArray:objs])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithJavaLangStringBuffer:(JavaLangStringBuffer *)str {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithJavaLangStringBuffer:str])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithJavaLangStringBuilder:(JavaLangStringBuilder *)str {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithJavaLangStringBuilder:str])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithJavaLangStringBuilder:(JavaLangStringBuilder *)str
                                                                   withInt:(jint)startIndex
                                                                   withInt:(jint)length {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithJavaLangStringBuilder:str withInt:startIndex withInt:length])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithJavaLangStringBuffer:(JavaLangStringBuffer *)str
                                                                  withInt:(jint)startIndex
                                                                  withInt:(jint)length {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithJavaLangStringBuffer:str withInt:startIndex withInt:length])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)str {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithOrgApacheCommonsLang3TextStrBuilder:str])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)str
                                                                                 withInt:(jint)startIndex
                                                                                 withInt:(jint)length {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithOrgApacheCommonsLang3TextStrBuilder:str withInt:startIndex withInt:length])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithCharArray:(IOSCharArray *)chars {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithCharArray:chars])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithCharArray:(IOSCharArray *)chars
                                                       withInt:(jint)startIndex
                                                       withInt:(jint)length {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithCharArray:chars withInt:startIndex withInt:length])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithBoolean:(jboolean)value {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithBoolean:value])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithChar:(jchar)ch {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithChar:ch])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithInt:(jint)value {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithInt:value])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithLong:(jlong)value {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithLong:value])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithFloat:(jfloat)value {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithFloat:value])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendlnWithDouble:(jdouble)value {
  return [((OrgApacheCommonsLang3TextStrBuilder *) nil_chk([self appendWithDouble:value])) appendNewLine];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendAllWithNSObjectArray:(IOSObjectArray *)array {
  if (array != nil && array->size_ > 0) {
    {
      IOSObjectArray *a__ = array;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id element = *b__++;
        [self appendWithId:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendAllWithJavaLangIterable:(id<JavaLangIterable>)iterable {
  if (iterable != nil) {
    for (id __strong o in iterable) {
      [self appendWithId:o];
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendAllWithJavaUtilIterator:(id<JavaUtilIterator>)it {
  if (it != nil) {
    while ([it hasNext]) {
      [self appendWithId:[it next]];
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithSeparatorsWithNSObjectArray:(IOSObjectArray *)array
                                                                  withNSString:(NSString *)separator {
  if (array != nil && array->size_ > 0) {
    NSString *sep = OrgApacheCommonsLang3ObjectUtils_toStringWithId_(separator);
    [self appendWithId:IOSObjectArray_Get(array, 0)];
    for (jint i = 1; i < array->size_; i++) {
      [self appendWithNSString:sep];
      [self appendWithId:IOSObjectArray_Get(array, i)];
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithSeparatorsWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                                                     withNSString:(NSString *)separator {
  if (iterable != nil) {
    NSString *sep = OrgApacheCommonsLang3ObjectUtils_toStringWithId_(separator);
    id<JavaUtilIterator> it = [iterable iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      [self appendWithId:[it next]];
      if ([it hasNext]) {
        [self appendWithNSString:sep];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendWithSeparatorsWithJavaUtilIterator:(id<JavaUtilIterator>)it
                                                                     withNSString:(NSString *)separator {
  if (it != nil) {
    NSString *sep = OrgApacheCommonsLang3ObjectUtils_toStringWithId_(separator);
    while ([it hasNext]) {
      [self appendWithId:[it next]];
      if ([it hasNext]) {
        [self appendWithNSString:sep];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendSeparatorWithNSString:(NSString *)separator {
  return [self appendSeparatorWithNSString:separator withNSString:nil];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendSeparatorWithNSString:(NSString *)standard
                                                        withNSString:(NSString *)defaultIfEmpty {
  NSString *str = [self isEmpty] ? defaultIfEmpty : standard;
  if (str != nil) {
    [self appendWithNSString:str];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendSeparatorWithChar:(jchar)separator {
  if ([self size] > 0) {
    [self appendWithChar:separator];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendSeparatorWithChar:(jchar)standard
                                                        withChar:(jchar)defaultIfEmpty {
  if ([self size] > 0) {
    [self appendWithChar:standard];
  }
  else {
    [self appendWithChar:defaultIfEmpty];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendSeparatorWithNSString:(NSString *)separator
                                                             withInt:(jint)loopIndex {
  if (separator != nil && loopIndex > 0) {
    [self appendWithNSString:separator];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendSeparatorWithChar:(jchar)separator
                                                         withInt:(jint)loopIndex {
  if (loopIndex > 0) {
    [self appendWithChar:separator];
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendPaddingWithInt:(jint)length
                                                     withChar:(jchar)padChar {
  if (length >= 0) {
    [self ensureCapacityWithInt:size_ + length];
    for (jint i = 0; i < length; i++) {
      *IOSCharArray_GetRef(nil_chk(buffer_), size_++) = padChar;
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendFixedWidthPadLeftWithId:(id)obj
                                                               withInt:(jint)width
                                                              withChar:(jchar)padChar {
  if (width > 0) {
    [self ensureCapacityWithInt:size_ + width];
    NSString *str = (obj == nil ? [self getNullText] : [obj description]);
    if (str == nil) {
      str = @"";
    }
    jint strLen = [str java_length];
    if (strLen >= width) {
      [str java_getChars:strLen - width sourceEnd:strLen destination:buffer_ destinationBegin:size_];
    }
    else {
      jint padLen = width - strLen;
      for (jint i = 0; i < padLen; i++) {
        *IOSCharArray_GetRef(nil_chk(buffer_), size_ + i) = padChar;
      }
      [str java_getChars:0 sourceEnd:strLen destination:buffer_ destinationBegin:size_ + padLen];
    }
    size_ += width;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendFixedWidthPadLeftWithInt:(jint)value
                                                                withInt:(jint)width
                                                               withChar:(jchar)padChar {
  return [self appendFixedWidthPadLeftWithId:NSString_java_valueOfInt_(value) withInt:width withChar:padChar];
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendFixedWidthPadRightWithId:(id)obj
                                                                withInt:(jint)width
                                                               withChar:(jchar)padChar {
  if (width > 0) {
    [self ensureCapacityWithInt:size_ + width];
    NSString *str = (obj == nil ? [self getNullText] : [obj description]);
    if (str == nil) {
      str = @"";
    }
    jint strLen = [str java_length];
    if (strLen >= width) {
      [str java_getChars:0 sourceEnd:width destination:buffer_ destinationBegin:size_];
    }
    else {
      jint padLen = width - strLen;
      [str java_getChars:0 sourceEnd:strLen destination:buffer_ destinationBegin:size_];
      for (jint i = 0; i < padLen; i++) {
        *IOSCharArray_GetRef(nil_chk(buffer_), size_ + strLen + i) = padChar;
      }
    }
    size_ += width;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)appendFixedWidthPadRightWithInt:(jint)value
                                                                 withInt:(jint)width
                                                                withChar:(jchar)padChar {
  return [self appendFixedWidthPadRightWithId:NSString_java_valueOfInt_(value) withInt:width withChar:padChar];
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                                withId:(id)obj {
  if (obj == nil) {
    return [self insertWithInt:index withNSString:nullText_];
  }
  return [self insertWithInt:index withNSString:[obj description]];
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                          withNSString:(NSString *)str {
  [self validateIndexWithInt:index];
  if (str == nil) {
    str = nullText_;
  }
  if (str != nil) {
    jint strLen = [str java_length];
    if (strLen > 0) {
      jint newSize = size_ + strLen;
      [self ensureCapacityWithInt:newSize];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, index, buffer_, index + strLen, size_ - index);
      size_ = newSize;
      [str java_getChars:0 sourceEnd:strLen destination:buffer_ destinationBegin:index];
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                         withCharArray:(IOSCharArray *)chars {
  [self validateIndexWithInt:index];
  if (chars == nil) {
    return [self insertWithInt:index withNSString:nullText_];
  }
  jint len = chars->size_;
  if (len > 0) {
    [self ensureCapacityWithInt:size_ + len];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, index, buffer_, index + len, size_ - index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chars, 0, buffer_, index, len);
    size_ += len;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                         withCharArray:(IOSCharArray *)chars
                                               withInt:(jint)offset
                                               withInt:(jint)length {
  [self validateIndexWithInt:index];
  if (chars == nil) {
    return [self insertWithInt:index withNSString:nullText_];
  }
  if (offset < 0 || offset > chars->size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid offset: ", offset));
  }
  if (length < 0 || offset + length > chars->size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"Invalid length: ", length));
  }
  if (length > 0) {
    [self ensureCapacityWithInt:size_ + length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, index, buffer_, index + length, size_ - index);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chars, offset, buffer_, index, length);
    size_ += length;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                           withBoolean:(jboolean)value {
  [self validateIndexWithInt:index];
  if (value) {
    [self ensureCapacityWithInt:size_ + 4];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, index, buffer_, index + 4, size_ - index);
    *IOSCharArray_GetRef(nil_chk(buffer_), index++) = 't';
    *IOSCharArray_GetRef(buffer_, index++) = 'r';
    *IOSCharArray_GetRef(buffer_, index++) = 'u';
    *IOSCharArray_GetRef(buffer_, index) = 'e';
    size_ += 4;
  }
  else {
    [self ensureCapacityWithInt:size_ + 5];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, index, buffer_, index + 5, size_ - index);
    *IOSCharArray_GetRef(nil_chk(buffer_), index++) = 'f';
    *IOSCharArray_GetRef(buffer_, index++) = 'a';
    *IOSCharArray_GetRef(buffer_, index++) = 'l';
    *IOSCharArray_GetRef(buffer_, index++) = 's';
    *IOSCharArray_GetRef(buffer_, index) = 'e';
    size_ += 5;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                              withChar:(jchar)value {
  [self validateIndexWithInt:index];
  [self ensureCapacityWithInt:size_ + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, index, buffer_, index + 1, size_ - index);
  *IOSCharArray_GetRef(nil_chk(buffer_), index) = value;
  size_++;
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                               withInt:(jint)value {
  return [self insertWithInt:index withNSString:NSString_java_valueOfInt_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                              withLong:(jlong)value {
  return [self insertWithInt:index withNSString:NSString_java_valueOfLong_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                             withFloat:(jfloat)value {
  return [self insertWithInt:index withNSString:NSString_java_valueOfFloat_(value)];
}

- (OrgApacheCommonsLang3TextStrBuilder *)insertWithInt:(jint)index
                                            withDouble:(jdouble)value {
  return [self insertWithInt:index withNSString:NSString_java_valueOfDouble_(value)];
}

- (void)deleteImplWithInt:(jint)startIndex
                  withInt:(jint)endIndex
                  withInt:(jint)len {
  OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, startIndex, endIndex, len);
}

- (OrgApacheCommonsLang3TextStrBuilder *)delete__WithInt:(jint)startIndex
                                                 withInt:(jint)endIndex {
  endIndex = [self validateRangeWithInt:startIndex withInt:endIndex];
  jint len = endIndex - startIndex;
  if (len > 0) {
    OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, startIndex, endIndex, len);
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteAllWithChar:(jchar)ch {
  for (jint i = 0; i < size_; i++) {
    if (IOSCharArray_Get(nil_chk(buffer_), i) == ch) {
      jint start = i;
      while (++i < size_) {
        if (IOSCharArray_Get(buffer_, i) != ch) {
          break;
        }
      }
      jint len = i - start;
      OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, start, i, len);
      i -= len;
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteFirstWithChar:(jchar)ch {
  for (jint i = 0; i < size_; i++) {
    if (IOSCharArray_Get(nil_chk(buffer_), i) == ch) {
      OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, i, i + 1, 1);
      break;
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteAllWithNSString:(NSString *)str {
  jint len = (str == nil ? 0 : [str java_length]);
  if (len > 0) {
    jint index = [self indexOfWithNSString:str withInt:0];
    while (index >= 0) {
      OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, index, index + len, len);
      index = [self indexOfWithNSString:str withInt:index];
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteFirstWithNSString:(NSString *)str {
  jint len = (str == nil ? 0 : [str java_length]);
  if (len > 0) {
    jint index = [self indexOfWithNSString:str withInt:0];
    if (index >= 0) {
      OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(self, index, index + len, len);
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteAllWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher {
  return [self replaceWithOrgApacheCommonsLang3TextStrMatcher:matcher withNSString:nil withInt:0 withInt:size_ withInt:-1];
}

- (OrgApacheCommonsLang3TextStrBuilder *)deleteFirstWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher {
  return [self replaceWithOrgApacheCommonsLang3TextStrMatcher:matcher withNSString:nil withInt:0 withInt:size_ withInt:1];
}

- (void)replaceImplWithInt:(jint)startIndex
                   withInt:(jint)endIndex
                   withInt:(jint)removeLen
              withNSString:(NSString *)insertStr
                   withInt:(jint)insertLen {
  OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(self, startIndex, endIndex, removeLen, insertStr, insertLen);
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceWithInt:(jint)startIndex
                                                withInt:(jint)endIndex
                                           withNSString:(NSString *)replaceStr {
  endIndex = [self validateRangeWithInt:startIndex withInt:endIndex];
  jint insertLen = (replaceStr == nil ? 0 : [replaceStr java_length]);
  OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(self, startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceAllWithChar:(jchar)search
                                                   withChar:(jchar)replace {
  if (search != replace) {
    for (jint i = 0; i < size_; i++) {
      if (IOSCharArray_Get(nil_chk(buffer_), i) == search) {
        *IOSCharArray_GetRef(buffer_, i) = replace;
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceFirstWithChar:(jchar)search
                                                     withChar:(jchar)replace {
  if (search != replace) {
    for (jint i = 0; i < size_; i++) {
      if (IOSCharArray_Get(nil_chk(buffer_), i) == search) {
        *IOSCharArray_GetRef(buffer_, i) = replace;
        break;
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceAllWithNSString:(NSString *)searchStr
                                                   withNSString:(NSString *)replaceStr {
  jint searchLen = (searchStr == nil ? 0 : [searchStr java_length]);
  if (searchLen > 0) {
    jint replaceLen = (replaceStr == nil ? 0 : [replaceStr java_length]);
    jint index = [self indexOfWithNSString:searchStr withInt:0];
    while (index >= 0) {
      OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(self, index, index + searchLen, searchLen, replaceStr, replaceLen);
      index = [self indexOfWithNSString:searchStr withInt:index + replaceLen];
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceFirstWithNSString:(NSString *)searchStr
                                                     withNSString:(NSString *)replaceStr {
  jint searchLen = (searchStr == nil ? 0 : [searchStr java_length]);
  if (searchLen > 0) {
    jint index = [self indexOfWithNSString:searchStr withInt:0];
    if (index >= 0) {
      jint replaceLen = (replaceStr == nil ? 0 : [replaceStr java_length]);
      OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(self, index, index + searchLen, searchLen, replaceStr, replaceLen);
    }
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceAllWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                                                              withNSString:(NSString *)replaceStr {
  return [self replaceWithOrgApacheCommonsLang3TextStrMatcher:matcher withNSString:replaceStr withInt:0 withInt:size_ withInt:-1];
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceFirstWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                                                                withNSString:(NSString *)replaceStr {
  return [self replaceWithOrgApacheCommonsLang3TextStrMatcher:matcher withNSString:replaceStr withInt:0 withInt:size_ withInt:1];
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                                                           withNSString:(NSString *)replaceStr
                                                                                withInt:(jint)startIndex
                                                                                withInt:(jint)endIndex
                                                                                withInt:(jint)replaceCount {
  endIndex = [self validateRangeWithInt:startIndex withInt:endIndex];
  return OrgApacheCommonsLang3TextStrBuilder_replaceImplWithOrgApacheCommonsLang3TextStrMatcher_withNSString_withInt_withInt_withInt_(self, matcher, replaceStr, startIndex, endIndex, replaceCount);
}

- (OrgApacheCommonsLang3TextStrBuilder *)replaceImplWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                                                               withNSString:(NSString *)replaceStr
                                                                                    withInt:(jint)from
                                                                                    withInt:(jint)to
                                                                                    withInt:(jint)replaceCount {
  return OrgApacheCommonsLang3TextStrBuilder_replaceImplWithOrgApacheCommonsLang3TextStrMatcher_withNSString_withInt_withInt_withInt_(self, matcher, replaceStr, from, to, replaceCount);
}

- (OrgApacheCommonsLang3TextStrBuilder *)reverse {
  if (size_ == 0) {
    return self;
  }
  jint half = size_ / 2;
  IOSCharArray *buf = buffer_;
  for (jint leftIdx = 0, rightIdx = size_ - 1; leftIdx < half; leftIdx++, rightIdx--) {
    jchar swap = IOSCharArray_Get(nil_chk(buf), leftIdx);
    *IOSCharArray_GetRef(buf, leftIdx) = IOSCharArray_Get(buf, rightIdx);
    *IOSCharArray_GetRef(buf, rightIdx) = swap;
  }
  return self;
}

- (OrgApacheCommonsLang3TextStrBuilder *)trim {
  if (size_ == 0) {
    return self;
  }
  jint len = size_;
  IOSCharArray *buf = buffer_;
  jint pos = 0;
  while (pos < len && IOSCharArray_Get(nil_chk(buf), pos) <= ' ') {
    pos++;
  }
  while (pos < len && IOSCharArray_Get(nil_chk(buf), len - 1) <= ' ') {
    len--;
  }
  if (len < size_) {
    [self delete__WithInt:len withInt:size_];
  }
  if (pos > 0) {
    [self delete__WithInt:0 withInt:pos];
  }
  return self;
}

- (jboolean)startsWithWithNSString:(NSString *)str {
  if (str == nil) {
    return false;
  }
  jint len = [str java_length];
  if (len == 0) {
    return true;
  }
  if (len > size_) {
    return false;
  }
  for (jint i = 0; i < len; i++) {
    if (IOSCharArray_Get(nil_chk(buffer_), i) != [str charAtWithInt:i]) {
      return false;
    }
  }
  return true;
}

- (jboolean)endsWithWithNSString:(NSString *)str {
  if (str == nil) {
    return false;
  }
  jint len = [str java_length];
  if (len == 0) {
    return true;
  }
  if (len > size_) {
    return false;
  }
  jint pos = size_ - len;
  for (jint i = 0; i < len; i++, pos++) {
    if (IOSCharArray_Get(nil_chk(buffer_), pos) != [str charAtWithInt:i]) {
      return false;
    }
  }
  return true;
}

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)startIndex
                                         to:(jint)endIndex {
  if (startIndex < 0) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(startIndex);
  }
  if (endIndex > size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(endIndex);
  }
  if (startIndex > endIndex) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(endIndex - startIndex);
  }
  return [self substringWithInt:startIndex withInt:endIndex];
}

- (NSString *)substringWithInt:(jint)start {
  return [self substringWithInt:start withInt:size_];
}

- (NSString *)substringWithInt:(jint)startIndex
                       withInt:(jint)endIndex {
  endIndex = [self validateRangeWithInt:startIndex withInt:endIndex];
  return [NSString java_stringWithCharacters:buffer_ offset:startIndex length:endIndex - startIndex];
}

- (NSString *)leftStringWithInt:(jint)length {
  if (length <= 0) {
    return @"";
  }
  else if (length >= size_) {
    return [NSString java_stringWithCharacters:buffer_ offset:0 length:size_];
  }
  else {
    return [NSString java_stringWithCharacters:buffer_ offset:0 length:length];
  }
}

- (NSString *)rightStringWithInt:(jint)length {
  if (length <= 0) {
    return @"";
  }
  else if (length >= size_) {
    return [NSString java_stringWithCharacters:buffer_ offset:0 length:size_];
  }
  else {
    return [NSString java_stringWithCharacters:buffer_ offset:size_ - length length:length];
  }
}

- (NSString *)midStringWithInt:(jint)index
                       withInt:(jint)length {
  if (index < 0) {
    index = 0;
  }
  if (length <= 0 || index >= size_) {
    return @"";
  }
  if (size_ <= index + length) {
    return [NSString java_stringWithCharacters:buffer_ offset:index length:size_ - index];
  }
  return [NSString java_stringWithCharacters:buffer_ offset:index length:length];
}

- (jboolean)containsWithChar:(jchar)ch {
  IOSCharArray *thisBuf = buffer_;
  for (jint i = 0; i < self->size_; i++) {
    if (IOSCharArray_Get(nil_chk(thisBuf), i) == ch) {
      return true;
    }
  }
  return false;
}

- (jboolean)containsWithNSString:(NSString *)str {
  return [self indexOfWithNSString:str withInt:0] >= 0;
}

- (jboolean)containsWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher {
  return [self indexOfWithOrgApacheCommonsLang3TextStrMatcher:matcher withInt:0] >= 0;
}

- (jint)indexOfWithChar:(jchar)ch {
  return [self indexOfWithChar:ch withInt:0];
}

- (jint)indexOfWithChar:(jchar)ch
                withInt:(jint)startIndex {
  startIndex = (startIndex < 0 ? 0 : startIndex);
  if (startIndex >= size_) {
    return -1;
  }
  IOSCharArray *thisBuf = buffer_;
  for (jint i = startIndex; i < size_; i++) {
    if (IOSCharArray_Get(nil_chk(thisBuf), i) == ch) {
      return i;
    }
  }
  return -1;
}

- (jint)indexOfWithNSString:(NSString *)str {
  return [self indexOfWithNSString:str withInt:0];
}

- (jint)indexOfWithNSString:(NSString *)str
                    withInt:(jint)startIndex {
  startIndex = (startIndex < 0 ? 0 : startIndex);
  if (str == nil || startIndex >= size_) {
    return -1;
  }
  jint strLen = [str java_length];
  if (strLen == 1) {
    return [self indexOfWithChar:[str charAtWithInt:0] withInt:startIndex];
  }
  if (strLen == 0) {
    return startIndex;
  }
  if (strLen > size_) {
    return -1;
  }
  IOSCharArray *thisBuf = buffer_;
  jint len = size_ - strLen + 1;
  for (jint i = startIndex; i < len; i++) {
    {
      for (jint j = 0; j < strLen; j++) {
        if ([str charAtWithInt:j] != IOSCharArray_Get(nil_chk(thisBuf), i + j)) {
          goto continue_outer;
        }
      }
      return i;
    }
    continue_outer: ;
  }
  return -1;
}

- (jint)indexOfWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher {
  return [self indexOfWithOrgApacheCommonsLang3TextStrMatcher:matcher withInt:0];
}

- (jint)indexOfWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                               withInt:(jint)startIndex {
  startIndex = (startIndex < 0 ? 0 : startIndex);
  if (matcher == nil || startIndex >= size_) {
    return -1;
  }
  jint len = size_;
  IOSCharArray *buf = buffer_;
  for (jint i = startIndex; i < len; i++) {
    if ([matcher isMatchWithCharArray:buf withInt:i withInt:startIndex withInt:len] > 0) {
      return i;
    }
  }
  return -1;
}

- (jint)lastIndexOfWithChar:(jchar)ch {
  return [self lastIndexOfWithChar:ch withInt:size_ - 1];
}

- (jint)lastIndexOfWithChar:(jchar)ch
                    withInt:(jint)startIndex {
  startIndex = (startIndex >= size_ ? size_ - 1 : startIndex);
  if (startIndex < 0) {
    return -1;
  }
  for (jint i = startIndex; i >= 0; i--) {
    if (IOSCharArray_Get(nil_chk(buffer_), i) == ch) {
      return i;
    }
  }
  return -1;
}

- (jint)lastIndexOfWithNSString:(NSString *)str {
  return [self lastIndexOfWithNSString:str withInt:size_ - 1];
}

- (jint)lastIndexOfWithNSString:(NSString *)str
                        withInt:(jint)startIndex {
  startIndex = (startIndex >= size_ ? size_ - 1 : startIndex);
  if (str == nil || startIndex < 0) {
    return -1;
  }
  jint strLen = [str java_length];
  if (strLen > 0 && strLen <= size_) {
    if (strLen == 1) {
      return [self lastIndexOfWithChar:[str charAtWithInt:0] withInt:startIndex];
    }
    for (jint i = startIndex - strLen + 1; i >= 0; i--) {
      {
        for (jint j = 0; j < strLen; j++) {
          if ([str charAtWithInt:j] != IOSCharArray_Get(nil_chk(buffer_), i + j)) {
            goto continue_outer;
          }
        }
        return i;
      }
      continue_outer: ;
    }
  }
  else if (strLen == 0) {
    return startIndex;
  }
  return -1;
}

- (jint)lastIndexOfWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher {
  return [self lastIndexOfWithOrgApacheCommonsLang3TextStrMatcher:matcher withInt:size_];
}

- (jint)lastIndexOfWithOrgApacheCommonsLang3TextStrMatcher:(OrgApacheCommonsLang3TextStrMatcher *)matcher
                                                   withInt:(jint)startIndex {
  startIndex = (startIndex >= size_ ? size_ - 1 : startIndex);
  if (matcher == nil || startIndex < 0) {
    return -1;
  }
  IOSCharArray *buf = buffer_;
  jint endIndex = startIndex + 1;
  for (jint i = startIndex; i >= 0; i--) {
    if ([matcher isMatchWithCharArray:buf withInt:i withInt:0 withInt:endIndex] > 0) {
      return i;
    }
  }
  return -1;
}

- (OrgApacheCommonsLang3TextStrTokenizer *)asTokenizer {
  return create_OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer_initWithOrgApacheCommonsLang3TextStrBuilder_(self);
}

- (JavaIoReader *)asReader {
  return create_OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader_initWithOrgApacheCommonsLang3TextStrBuilder_(self);
}

- (JavaIoWriter *)asWriter {
  return create_OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter_initWithOrgApacheCommonsLang3TextStrBuilder_(self);
}

- (void)appendToWithJavaLangAppendable:(id<JavaLangAppendable>)appendable {
  if ([appendable isKindOfClass:[JavaIoWriter class]]) {
    [((JavaIoWriter *) nil_chk(((JavaIoWriter *) cast_chk(appendable, [JavaIoWriter class])))) writeWithCharArray:buffer_ withInt:0 withInt:size_];
  }
  else if ([appendable isKindOfClass:[JavaLangStringBuilder class]]) {
    [((JavaLangStringBuilder *) nil_chk(((JavaLangStringBuilder *) cast_chk(appendable, [JavaLangStringBuilder class])))) appendWithCharArray:buffer_ withInt:0 withInt:size_];
  }
  else if ([appendable isKindOfClass:[JavaLangStringBuffer class]]) {
    [((JavaLangStringBuffer *) nil_chk(((JavaLangStringBuffer *) cast_chk(appendable, [JavaLangStringBuffer class])))) appendWithCharArray:buffer_ withInt:0 withInt:size_];
  }
  else if ([appendable isKindOfClass:[JavaNioCharBuffer class]]) {
    [((JavaNioCharBuffer *) nil_chk(((JavaNioCharBuffer *) cast_chk(appendable, [JavaNioCharBuffer class])))) putWithCharArray:buffer_ withInt:0 withInt:size_];
  }
  else {
    [((id<JavaLangAppendable>) nil_chk(appendable)) appendWithJavaLangCharSequence:self];
  }
}

- (jboolean)equalsIgnoreCaseWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)other {
  if (self == other) {
    return true;
  }
  if (self->size_ != ((OrgApacheCommonsLang3TextStrBuilder *) nil_chk(other))->size_) {
    return false;
  }
  IOSCharArray *thisBuf = self->buffer_;
  IOSCharArray *otherBuf = other->buffer_;
  for (jint i = size_ - 1; i >= 0; i--) {
    jchar c1 = IOSCharArray_Get(nil_chk(thisBuf), i);
    jchar c2 = IOSCharArray_Get(nil_chk(otherBuf), i);
    if (c1 != c2 && JavaLangCharacter_toUpperCaseWithChar_(c1) != JavaLangCharacter_toUpperCaseWithChar_(c2)) {
      return false;
    }
  }
  return true;
}

- (jboolean)equalsWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)other {
  if (self == other) {
    return true;
  }
  if (self->size_ != ((OrgApacheCommonsLang3TextStrBuilder *) nil_chk(other))->size_) {
    return false;
  }
  IOSCharArray *thisBuf = self->buffer_;
  IOSCharArray *otherBuf = other->buffer_;
  for (jint i = size_ - 1; i >= 0; i--) {
    if (IOSCharArray_Get(nil_chk(thisBuf), i) != IOSCharArray_Get(nil_chk(otherBuf), i)) {
      return false;
    }
  }
  return true;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgApacheCommonsLang3TextStrBuilder class]]) {
    return [self equalsWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *) cast_chk(obj, [OrgApacheCommonsLang3TextStrBuilder class])];
  }
  return false;
}

- (NSUInteger)hash {
  IOSCharArray *buf = buffer_;
  jint hash_ = 0;
  for (jint i = size_ - 1; i >= 0; i--) {
    hash_ = 31 * hash_ + IOSCharArray_Get(nil_chk(buf), i);
  }
  return hash_;
}

- (NSString *)description {
  return [NSString java_stringWithCharacters:buffer_ offset:0 length:size_];
}

- (JavaLangStringBuffer *)toStringBuffer {
  return [create_JavaLangStringBuffer_initWithInt_(size_) appendWithCharArray:buffer_ withInt:0 withInt:size_];
}

- (JavaLangStringBuilder *)toStringBuilder {
  return [create_JavaLangStringBuilder_initWithInt_(size_) appendWithCharArray:buffer_ withInt:0 withInt:size_];
}

- (NSString *)build {
  return [self description];
}

- (jint)validateRangeWithInt:(jint)startIndex
                     withInt:(jint)endIndex {
  if (startIndex < 0) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(startIndex);
  }
  if (endIndex > size_) {
    endIndex = size_;
  }
  if (startIndex > endIndex) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithNSString_(@"end < start");
  }
  return endIndex;
}

- (void)validateIndexWithInt:(jint)index {
  if (index < 0 || index > size_) {
    @throw create_JavaLangStringIndexOutOfBoundsException_initWithInt_(index);
  }
}

- (id<JavaUtilStreamIntStream>)chars {
  return JavaLangCharSequence_chars(self);
}

- (id<JavaUtilStreamIntStream>)codePoints {
  return JavaLangCharSequence_codePoints(self);
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(newLine_);
  RELEASE_(nullText_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 23, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x81, 19, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 25, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 26, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 27, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 28, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 29, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 30, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 31, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 32, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 14, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 34, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 36, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 37, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 19, 38, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 23, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x81, 39, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 27, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 29, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 30, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 28, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 31, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 32, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 14, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 34, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 36, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 37, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 39, 38, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x81, 40, 41, -1, 42, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 40, 43, -1, 44, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 40, 45, -1, 46, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 47, 49, -1, 50, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 47, 51, -1, 52, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 53, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 53, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 53, 55, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 53, 56, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 53, 57, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 58, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 59, 61, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 62, 60, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 62, 61, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 65, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 66, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 67, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 68, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 12, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 69, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 70, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 63, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 73, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 74, 12, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 75, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 76, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 75, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 76, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 75, 77, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 79, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 80, 81, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 82, 55, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 83, 55, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 82, 54, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 83, 54, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 82, 84, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 83, 84, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, 80, 85, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x2, 78, 85, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 86, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 87, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 88, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 89, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 89, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 90, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 91, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 92, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 93, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 93, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 93, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 57, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 56, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 94, 95, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 57, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 56, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 77, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 96, 95, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrTokenizer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 98, 18, -1, -1, -1 },
    { NULL, "Z", 0x1, 99, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 100, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 100, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 101, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 102, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 103, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 104, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(getNewLineText);
  methods[4].selector = @selector(setNewLineTextWithNSString:);
  methods[5].selector = @selector(getNullText);
  methods[6].selector = @selector(setNullTextWithNSString:);
  methods[7].selector = @selector(java_length);
  methods[8].selector = @selector(setLengthWithInt:);
  methods[9].selector = @selector(capacity);
  methods[10].selector = @selector(ensureCapacityWithInt:);
  methods[11].selector = @selector(minimizeCapacity);
  methods[12].selector = @selector(size);
  methods[13].selector = @selector(isEmpty);
  methods[14].selector = @selector(clear);
  methods[15].selector = @selector(charAtWithInt:);
  methods[16].selector = @selector(setCharAtWithInt:withChar:);
  methods[17].selector = @selector(deleteCharAtWithInt:);
  methods[18].selector = @selector(toCharArray);
  methods[19].selector = @selector(toCharArrayWithInt:withInt:);
  methods[20].selector = @selector(getCharsWithCharArray:);
  methods[21].selector = @selector(getCharsWithInt:withInt:withCharArray:withInt:);
  methods[22].selector = @selector(readFromWithJavaLangReadable:);
  methods[23].selector = @selector(appendNewLine);
  methods[24].selector = @selector(appendNull);
  methods[25].selector = @selector(appendWithId:);
  methods[26].selector = @selector(appendWithJavaLangCharSequence:);
  methods[27].selector = @selector(appendWithJavaLangCharSequence:withInt:withInt:);
  methods[28].selector = @selector(appendWithNSString:);
  methods[29].selector = @selector(appendWithNSString:withInt:withInt:);
  methods[30].selector = @selector(appendWithNSString:withNSObjectArray:);
  methods[31].selector = @selector(appendWithJavaNioCharBuffer:);
  methods[32].selector = @selector(appendWithJavaNioCharBuffer:withInt:withInt:);
  methods[33].selector = @selector(appendWithJavaLangStringBuffer:);
  methods[34].selector = @selector(appendWithJavaLangStringBuffer:withInt:withInt:);
  methods[35].selector = @selector(appendWithJavaLangStringBuilder:);
  methods[36].selector = @selector(appendWithJavaLangStringBuilder:withInt:withInt:);
  methods[37].selector = @selector(appendWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[38].selector = @selector(appendWithOrgApacheCommonsLang3TextStrBuilder:withInt:withInt:);
  methods[39].selector = @selector(appendWithCharArray:);
  methods[40].selector = @selector(appendWithCharArray:withInt:withInt:);
  methods[41].selector = @selector(appendWithBoolean:);
  methods[42].selector = @selector(appendWithChar:);
  methods[43].selector = @selector(appendWithInt:);
  methods[44].selector = @selector(appendWithLong:);
  methods[45].selector = @selector(appendWithFloat:);
  methods[46].selector = @selector(appendWithDouble:);
  methods[47].selector = @selector(appendlnWithId:);
  methods[48].selector = @selector(appendlnWithNSString:);
  methods[49].selector = @selector(appendlnWithNSString:withInt:withInt:);
  methods[50].selector = @selector(appendlnWithNSString:withNSObjectArray:);
  methods[51].selector = @selector(appendlnWithJavaLangStringBuffer:);
  methods[52].selector = @selector(appendlnWithJavaLangStringBuilder:);
  methods[53].selector = @selector(appendlnWithJavaLangStringBuilder:withInt:withInt:);
  methods[54].selector = @selector(appendlnWithJavaLangStringBuffer:withInt:withInt:);
  methods[55].selector = @selector(appendlnWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[56].selector = @selector(appendlnWithOrgApacheCommonsLang3TextStrBuilder:withInt:withInt:);
  methods[57].selector = @selector(appendlnWithCharArray:);
  methods[58].selector = @selector(appendlnWithCharArray:withInt:withInt:);
  methods[59].selector = @selector(appendlnWithBoolean:);
  methods[60].selector = @selector(appendlnWithChar:);
  methods[61].selector = @selector(appendlnWithInt:);
  methods[62].selector = @selector(appendlnWithLong:);
  methods[63].selector = @selector(appendlnWithFloat:);
  methods[64].selector = @selector(appendlnWithDouble:);
  methods[65].selector = @selector(appendAllWithNSObjectArray:);
  methods[66].selector = @selector(appendAllWithJavaLangIterable:);
  methods[67].selector = @selector(appendAllWithJavaUtilIterator:);
  methods[68].selector = @selector(appendWithSeparatorsWithNSObjectArray:withNSString:);
  methods[69].selector = @selector(appendWithSeparatorsWithJavaLangIterable:withNSString:);
  methods[70].selector = @selector(appendWithSeparatorsWithJavaUtilIterator:withNSString:);
  methods[71].selector = @selector(appendSeparatorWithNSString:);
  methods[72].selector = @selector(appendSeparatorWithNSString:withNSString:);
  methods[73].selector = @selector(appendSeparatorWithChar:);
  methods[74].selector = @selector(appendSeparatorWithChar:withChar:);
  methods[75].selector = @selector(appendSeparatorWithNSString:withInt:);
  methods[76].selector = @selector(appendSeparatorWithChar:withInt:);
  methods[77].selector = @selector(appendPaddingWithInt:withChar:);
  methods[78].selector = @selector(appendFixedWidthPadLeftWithId:withInt:withChar:);
  methods[79].selector = @selector(appendFixedWidthPadLeftWithInt:withInt:withChar:);
  methods[80].selector = @selector(appendFixedWidthPadRightWithId:withInt:withChar:);
  methods[81].selector = @selector(appendFixedWidthPadRightWithInt:withInt:withChar:);
  methods[82].selector = @selector(insertWithInt:withId:);
  methods[83].selector = @selector(insertWithInt:withNSString:);
  methods[84].selector = @selector(insertWithInt:withCharArray:);
  methods[85].selector = @selector(insertWithInt:withCharArray:withInt:withInt:);
  methods[86].selector = @selector(insertWithInt:withBoolean:);
  methods[87].selector = @selector(insertWithInt:withChar:);
  methods[88].selector = @selector(insertWithInt:withInt:);
  methods[89].selector = @selector(insertWithInt:withLong:);
  methods[90].selector = @selector(insertWithInt:withFloat:);
  methods[91].selector = @selector(insertWithInt:withDouble:);
  methods[92].selector = @selector(deleteImplWithInt:withInt:withInt:);
  methods[93].selector = @selector(delete__WithInt:withInt:);
  methods[94].selector = @selector(deleteAllWithChar:);
  methods[95].selector = @selector(deleteFirstWithChar:);
  methods[96].selector = @selector(deleteAllWithNSString:);
  methods[97].selector = @selector(deleteFirstWithNSString:);
  methods[98].selector = @selector(deleteAllWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[99].selector = @selector(deleteFirstWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[100].selector = @selector(replaceImplWithInt:withInt:withInt:withNSString:withInt:);
  methods[101].selector = @selector(replaceWithInt:withInt:withNSString:);
  methods[102].selector = @selector(replaceAllWithChar:withChar:);
  methods[103].selector = @selector(replaceFirstWithChar:withChar:);
  methods[104].selector = @selector(replaceAllWithNSString:withNSString:);
  methods[105].selector = @selector(replaceFirstWithNSString:withNSString:);
  methods[106].selector = @selector(replaceAllWithOrgApacheCommonsLang3TextStrMatcher:withNSString:);
  methods[107].selector = @selector(replaceFirstWithOrgApacheCommonsLang3TextStrMatcher:withNSString:);
  methods[108].selector = @selector(replaceWithOrgApacheCommonsLang3TextStrMatcher:withNSString:withInt:withInt:withInt:);
  methods[109].selector = @selector(replaceImplWithOrgApacheCommonsLang3TextStrMatcher:withNSString:withInt:withInt:withInt:);
  methods[110].selector = @selector(reverse);
  methods[111].selector = @selector(trim);
  methods[112].selector = @selector(startsWithWithNSString:);
  methods[113].selector = @selector(endsWithWithNSString:);
  methods[114].selector = @selector(subSequenceFrom:to:);
  methods[115].selector = @selector(substringWithInt:);
  methods[116].selector = @selector(substringWithInt:withInt:);
  methods[117].selector = @selector(leftStringWithInt:);
  methods[118].selector = @selector(rightStringWithInt:);
  methods[119].selector = @selector(midStringWithInt:withInt:);
  methods[120].selector = @selector(containsWithChar:);
  methods[121].selector = @selector(containsWithNSString:);
  methods[122].selector = @selector(containsWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[123].selector = @selector(indexOfWithChar:);
  methods[124].selector = @selector(indexOfWithChar:withInt:);
  methods[125].selector = @selector(indexOfWithNSString:);
  methods[126].selector = @selector(indexOfWithNSString:withInt:);
  methods[127].selector = @selector(indexOfWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[128].selector = @selector(indexOfWithOrgApacheCommonsLang3TextStrMatcher:withInt:);
  methods[129].selector = @selector(lastIndexOfWithChar:);
  methods[130].selector = @selector(lastIndexOfWithChar:withInt:);
  methods[131].selector = @selector(lastIndexOfWithNSString:);
  methods[132].selector = @selector(lastIndexOfWithNSString:withInt:);
  methods[133].selector = @selector(lastIndexOfWithOrgApacheCommonsLang3TextStrMatcher:);
  methods[134].selector = @selector(lastIndexOfWithOrgApacheCommonsLang3TextStrMatcher:withInt:);
  methods[135].selector = @selector(asTokenizer);
  methods[136].selector = @selector(asReader);
  methods[137].selector = @selector(asWriter);
  methods[138].selector = @selector(appendToWithJavaLangAppendable:);
  methods[139].selector = @selector(equalsIgnoreCaseWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[140].selector = @selector(equalsWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[141].selector = @selector(isEqual:);
  methods[142].selector = @selector(hash);
  methods[143].selector = @selector(description);
  methods[144].selector = @selector(toStringBuffer);
  methods[145].selector = @selector(toStringBuilder);
  methods[146].selector = @selector(build);
  methods[147].selector = @selector(validateRangeWithInt:withInt:);
  methods[148].selector = @selector(validateIndexWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CAPACITY", "I", .constantValue.asInt = OrgApacheCommonsLang3TextStrBuilder_CAPACITY, 0x18, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3TextStrBuilder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "newLine_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nullText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LNSString;", "setNewLineText", "setNullText", "length", "setLength", "ensureCapacity", "charAt", "setCharAt", "IC", "deleteCharAt", "toCharArray", "II", "getChars", "[C", "II[CI", "readFrom", "LJavaLangReadable;", "LJavaIoIOException;", "append", "LNSObject;", "LJavaLangCharSequence;", "LJavaLangCharSequence;II", "LNSString;II", "LNSString;[LNSObject;", "LJavaNioCharBuffer;", "LJavaNioCharBuffer;II", "LJavaLangStringBuffer;", "LJavaLangStringBuffer;II", "LJavaLangStringBuilder;", "LJavaLangStringBuilder;II", "LOrgApacheCommonsLang3TextStrBuilder;", "LOrgApacheCommonsLang3TextStrBuilder;II", "[CII", "Z", "C", "J", "F", "D", "appendln", "appendAll", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Lorg/apache/commons/lang3/text/StrBuilder;", "LJavaLangIterable;", "(Ljava/lang/Iterable<*>;)Lorg/apache/commons/lang3/text/StrBuilder;", "LJavaUtilIterator;", "(Ljava/util/Iterator<*>;)Lorg/apache/commons/lang3/text/StrBuilder;", "appendWithSeparators", "[LNSObject;LNSString;", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<*>;Ljava/lang/String;)Lorg/apache/commons/lang3/text/StrBuilder;", "LJavaUtilIterator;LNSString;", "(Ljava/util/Iterator<*>;Ljava/lang/String;)Lorg/apache/commons/lang3/text/StrBuilder;", "appendSeparator", "LNSString;LNSString;", "CC", "LNSString;I", "CI", "appendPadding", "appendFixedWidthPadLeft", "LNSObject;IC", "IIC", "appendFixedWidthPadRight", "insert", "ILNSObject;", "ILNSString;", "I[C", "I[CII", "IZ", "IJ", "IF", "ID", "deleteImpl", "III", "delete", "deleteAll", "deleteFirst", "LOrgApacheCommonsLang3TextStrMatcher;", "replaceImpl", "IIILNSString;I", "replace", "IILNSString;", "replaceAll", "replaceFirst", "LOrgApacheCommonsLang3TextStrMatcher;LNSString;", "LOrgApacheCommonsLang3TextStrMatcher;LNSString;III", "startsWith", "endsWith", "subSequence", "substring", "leftString", "rightString", "midString", "contains", "indexOf", "LOrgApacheCommonsLang3TextStrMatcher;I", "lastIndexOf", "appendTo", "LJavaLangAppendable;", "equalsIgnoreCase", "equals", "hashCode", "toString", "validateRange", "validateIndex", "LOrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer;LOrgApacheCommonsLang3TextStrBuilder_StrBuilderReader;LOrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter;", "Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Ljava/io/Serializable;Lorg/apache/commons/lang3/builder/Builder<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrBuilder = { "StrBuilder", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x1, 149, 6, -1, 105, -1, 106, -1 };
  return &_OrgApacheCommonsLang3TextStrBuilder;
}

@end

void OrgApacheCommonsLang3TextStrBuilder_init(OrgApacheCommonsLang3TextStrBuilder *self) {
  OrgApacheCommonsLang3TextStrBuilder_initWithInt_(self, OrgApacheCommonsLang3TextStrBuilder_CAPACITY);
}

OrgApacheCommonsLang3TextStrBuilder *new_OrgApacheCommonsLang3TextStrBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrBuilder, init)
}

OrgApacheCommonsLang3TextStrBuilder *create_OrgApacheCommonsLang3TextStrBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrBuilder, init)
}

void OrgApacheCommonsLang3TextStrBuilder_initWithInt_(OrgApacheCommonsLang3TextStrBuilder *self, jint initialCapacity) {
  NSObject_init(self);
  if (initialCapacity <= 0) {
    initialCapacity = OrgApacheCommonsLang3TextStrBuilder_CAPACITY;
  }
  JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:initialCapacity]);
}

OrgApacheCommonsLang3TextStrBuilder *new_OrgApacheCommonsLang3TextStrBuilder_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrBuilder, initWithInt_, initialCapacity)
}

OrgApacheCommonsLang3TextStrBuilder *create_OrgApacheCommonsLang3TextStrBuilder_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrBuilder, initWithInt_, initialCapacity)
}

void OrgApacheCommonsLang3TextStrBuilder_initWithNSString_(OrgApacheCommonsLang3TextStrBuilder *self, NSString *str) {
  NSObject_init(self);
  if (str == nil) {
    JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:OrgApacheCommonsLang3TextStrBuilder_CAPACITY]);
  }
  else {
    JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:[str java_length] + OrgApacheCommonsLang3TextStrBuilder_CAPACITY]);
    [self appendWithNSString:str];
  }
}

OrgApacheCommonsLang3TextStrBuilder *new_OrgApacheCommonsLang3TextStrBuilder_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrBuilder, initWithNSString_, str)
}

OrgApacheCommonsLang3TextStrBuilder *create_OrgApacheCommonsLang3TextStrBuilder_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrBuilder, initWithNSString_, str)
}

void OrgApacheCommonsLang3TextStrBuilder_deleteImplWithInt_withInt_withInt_(OrgApacheCommonsLang3TextStrBuilder *self, jint startIndex, jint endIndex, jint len) {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, endIndex, self->buffer_, startIndex, self->size_ - endIndex);
  self->size_ -= len;
}

void OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(OrgApacheCommonsLang3TextStrBuilder *self, jint startIndex, jint endIndex, jint removeLen, NSString *insertStr, jint insertLen) {
  jint newSize = self->size_ - removeLen + insertLen;
  if (insertLen != removeLen) {
    [self ensureCapacityWithInt:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, endIndex, self->buffer_, startIndex + insertLen, self->size_ - endIndex);
    self->size_ = newSize;
  }
  if (insertLen > 0) {
    [((NSString *) nil_chk(insertStr)) java_getChars:0 sourceEnd:insertLen destination:self->buffer_ destinationBegin:startIndex];
  }
}

OrgApacheCommonsLang3TextStrBuilder *OrgApacheCommonsLang3TextStrBuilder_replaceImplWithOrgApacheCommonsLang3TextStrMatcher_withNSString_withInt_withInt_withInt_(OrgApacheCommonsLang3TextStrBuilder *self, OrgApacheCommonsLang3TextStrMatcher *matcher, NSString *replaceStr, jint from, jint to, jint replaceCount) {
  if (matcher == nil || self->size_ == 0) {
    return self;
  }
  jint replaceLen = (replaceStr == nil ? 0 : [replaceStr java_length]);
  IOSCharArray *buf = self->buffer_;
  for (jint i = from; i < to && replaceCount != 0; i++) {
    jint removeLen = [matcher isMatchWithCharArray:buf withInt:i withInt:from withInt:to];
    if (removeLen > 0) {
      OrgApacheCommonsLang3TextStrBuilder_replaceImplWithInt_withInt_withInt_withNSString_withInt_(self, i, i + removeLen, removeLen, replaceStr, replaceLen);
      to = to - removeLen + replaceLen;
      i = i + replaceLen - 1;
      if (replaceCount > 0) {
        replaceCount--;
      }
    }
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrBuilder)

@implementation OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer

- (instancetype)initWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)outer$ {
  OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer_initWithOrgApacheCommonsLang3TextStrBuilder_(self, outer$);
  return self;
}

- (id<JavaUtilList>)tokenizeWithCharArray:(IOSCharArray *)chars
                                  withInt:(jint)offset
                                  withInt:(jint)count {
  if (chars == nil) {
    return [super tokenizeWithCharArray:this$0_->buffer_ withInt:0 withInt:[this$0_ size]];
  }
  return [super tokenizeWithCharArray:chars withInt:offset withInt:count];
}

- (NSString *)getContent {
  NSString *str = [super getContent];
  if (str == nil) {
    return [this$0_ description];
  }
  return str;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[1].selector = @selector(tokenizeWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(getContent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheCommonsLang3TextStrBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "tokenize", "[CII", "([CII)Ljava/util/List<Ljava/lang/String;>;", "LOrgApacheCommonsLang3TextStrBuilder;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer = { "StrBuilderTokenizer", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x0, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer;
}

@end

void OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer *self, OrgApacheCommonsLang3TextStrBuilder *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheCommonsLang3TextStrTokenizer_init(self);
}

OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer *new_OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer, initWithOrgApacheCommonsLang3TextStrBuilder_, outer$)
}

OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer *create_OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer, initWithOrgApacheCommonsLang3TextStrBuilder_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrBuilder_StrBuilderTokenizer)

@implementation OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader

- (instancetype)initWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)outer$ {
  OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader_initWithOrgApacheCommonsLang3TextStrBuilder_(self, outer$);
  return self;
}

- (void)close {
}

- (jint)read {
  if ([self ready] == false) {
    return -1;
  }
  return [this$0_ charAtWithInt:pos_++];
}

- (jint)readWithCharArray:(IOSCharArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (off < 0 || len < 0 || off > ((IOSCharArray *) nil_chk(b))->size_ || (off + len) > b->size_ || (off + len) < 0) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  if (len == 0) {
    return 0;
  }
  if (pos_ >= [this$0_ size]) {
    return -1;
  }
  if (pos_ + len > [this$0_ size]) {
    len = [this$0_ size] - pos_;
  }
  [this$0_ getCharsWithInt:pos_ withInt:pos_ + len withCharArray:b withInt:off];
  pos_ += len;
  return len;
}

- (jlong)skipWithLong:(jlong)n {
  if (pos_ + n > [this$0_ size]) {
    n = [this$0_ size] - pos_;
  }
  if (n < 0) {
    return 0;
  }
  pos_ += n;
  return n;
}

- (jboolean)ready {
  return pos_ < [this$0_ size];
}

- (jboolean)markSupported {
  return true;
}

- (void)markWithInt:(jint)readAheadLimit {
  mark_ = pos_;
}

- (void)reset {
  pos_ = mark_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[4].selector = @selector(skipWithLong:);
  methods[5].selector = @selector(ready);
  methods[6].selector = @selector(markSupported);
  methods[7].selector = @selector(markWithInt:);
  methods[8].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheCommonsLang3TextStrBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mark_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "[CII", "skip", "J", "mark", "I", "LOrgApacheCommonsLang3TextStrBuilder;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader = { "StrBuilderReader", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x0, 9, 3, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader;
}

@end

void OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader *self, OrgApacheCommonsLang3TextStrBuilder *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaIoReader_init(self);
}

OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader *new_OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader, initWithOrgApacheCommonsLang3TextStrBuilder_, outer$)
}

OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader *create_OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader, initWithOrgApacheCommonsLang3TextStrBuilder_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrBuilder_StrBuilderReader)

@implementation OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter

- (instancetype)initWithOrgApacheCommonsLang3TextStrBuilder:(OrgApacheCommonsLang3TextStrBuilder *)outer$ {
  OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter_initWithOrgApacheCommonsLang3TextStrBuilder_(self, outer$);
  return self;
}

- (void)close {
}

- (void)flush {
}

- (void)writeWithInt:(jint)c {
  [this$0_ appendWithChar:(jchar) c];
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf {
  [this$0_ appendWithCharArray:cbuf];
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  [this$0_ appendWithCharArray:cbuf withInt:off withInt:len];
}

- (void)writeWithNSString:(NSString *)str {
  [this$0_ appendWithNSString:str];
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)off
                  withInt:(jint)len {
  [this$0_ appendWithNSString:str withInt:off withInt:len];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TextStrBuilder:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(writeWithInt:);
  methods[4].selector = @selector(writeWithCharArray:);
  methods[5].selector = @selector(writeWithCharArray:withInt:withInt:);
  methods[6].selector = @selector(writeWithNSString:);
  methods[7].selector = @selector(writeWithNSString:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheCommonsLang3TextStrBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "I", "[C", "[CII", "LNSString;", "LNSString;II", "LOrgApacheCommonsLang3TextStrBuilder;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter = { "StrBuilderWriter", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x0, 8, 1, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter;
}

@end

void OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter *self, OrgApacheCommonsLang3TextStrBuilder *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaIoWriter_init(self);
}

OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter *new_OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter, initWithOrgApacheCommonsLang3TextStrBuilder_, outer$)
}

OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter *create_OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter_initWithOrgApacheCommonsLang3TextStrBuilder_(OrgApacheCommonsLang3TextStrBuilder *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter, initWithOrgApacheCommonsLang3TextStrBuilder_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrBuilder_StrBuilderWriter)
