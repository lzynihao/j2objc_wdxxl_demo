//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/tuple/MutableTriple.java
//

#include "J2ObjC_source.h"
#include "org/apache/commons/lang3/tuple/MutableTriple.h"
#include "org/apache/commons/lang3/tuple/Triple.h"

inline jlong OrgApacheCommonsLang3TupleMutableTriple_get_serialVersionUID(void);
#define OrgApacheCommonsLang3TupleMutableTriple_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TupleMutableTriple, serialVersionUID, jlong)

@implementation OrgApacheCommonsLang3TupleMutableTriple

+ (OrgApacheCommonsLang3TupleMutableTriple *)ofWithId:(id)left
                                               withId:(id)middle
                                               withId:(id)right {
  return OrgApacheCommonsLang3TupleMutableTriple_ofWithId_withId_withId_(left, middle, right);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TupleMutableTriple_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithId:(id)left
                    withId:(id)middle
                    withId:(id)right {
  OrgApacheCommonsLang3TupleMutableTriple_initWithId_withId_withId_(self, left, middle, right);
  return self;
}

- (id)getLeft {
  return left_;
}

- (void)setLeftWithId:(id)left {
  JreStrongAssign(&self->left_, left);
}

- (id)getMiddle {
  return middle_;
}

- (void)setMiddleWithId:(id)middle {
  JreStrongAssign(&self->middle_, middle);
}

- (id)getRight {
  return right_;
}

- (void)setRightWithId:(id)right {
  JreStrongAssign(&self->right_, right);
}

- (void)dealloc {
  RELEASE_(left_);
  RELEASE_(middle_);
  RELEASE_(right_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsLang3TupleMutableTriple;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 6, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 6, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ofWithId:withId:withId:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithId:withId:withId:);
  methods[3].selector = @selector(getLeft);
  methods[4].selector = @selector(setLeftWithId:);
  methods[5].selector = @selector(getMiddle);
  methods[6].selector = @selector(setMiddleWithId:);
  methods[7].selector = @selector(getRight);
  methods[8].selector = @selector(setRightWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3TupleMutableTriple_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "left_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 14, -1 },
    { "middle_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 15, -1 },
    { "right_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "of", "LNSObject;LNSObject;LNSObject;", "<L:Ljava/lang/Object;M:Ljava/lang/Object;R:Ljava/lang/Object;>(TL;TM;TR;)Lorg/apache/commons/lang3/tuple/MutableTriple<TL;TM;TR;>;", "(TL;TM;TR;)V", "()TL;", "setLeft", "LNSObject;", "(TL;)V", "()TM;", "setMiddle", "(TM;)V", "()TR;", "setRight", "(TR;)V", "TL;", "TM;", "TR;", "<L:Ljava/lang/Object;M:Ljava/lang/Object;R:Ljava/lang/Object;>Lorg/apache/commons/lang3/tuple/Triple<TL;TM;TR;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TupleMutableTriple = { "MutableTriple", "org.apache.commons.lang3.tuple", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, 17, -1 };
  return &_OrgApacheCommonsLang3TupleMutableTriple;
}

@end

OrgApacheCommonsLang3TupleMutableTriple *OrgApacheCommonsLang3TupleMutableTriple_ofWithId_withId_withId_(id left, id middle, id right) {
  OrgApacheCommonsLang3TupleMutableTriple_initialize();
  return create_OrgApacheCommonsLang3TupleMutableTriple_initWithId_withId_withId_(left, middle, right);
}

void OrgApacheCommonsLang3TupleMutableTriple_init(OrgApacheCommonsLang3TupleMutableTriple *self) {
  OrgApacheCommonsLang3TupleTriple_init(self);
}

OrgApacheCommonsLang3TupleMutableTriple *new_OrgApacheCommonsLang3TupleMutableTriple_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TupleMutableTriple, init)
}

OrgApacheCommonsLang3TupleMutableTriple *create_OrgApacheCommonsLang3TupleMutableTriple_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TupleMutableTriple, init)
}

void OrgApacheCommonsLang3TupleMutableTriple_initWithId_withId_withId_(OrgApacheCommonsLang3TupleMutableTriple *self, id left, id middle, id right) {
  OrgApacheCommonsLang3TupleTriple_init(self);
  JreStrongAssign(&self->left_, left);
  JreStrongAssign(&self->middle_, middle);
  JreStrongAssign(&self->right_, right);
}

OrgApacheCommonsLang3TupleMutableTriple *new_OrgApacheCommonsLang3TupleMutableTriple_initWithId_withId_withId_(id left, id middle, id right) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TupleMutableTriple, initWithId_withId_withId_, left, middle, right)
}

OrgApacheCommonsLang3TupleMutableTriple *create_OrgApacheCommonsLang3TupleMutableTriple_initWithId_withId_withId_(id left, id middle, id right) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TupleMutableTriple, initWithId_withId_withId_, left, middle, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TupleMutableTriple)
