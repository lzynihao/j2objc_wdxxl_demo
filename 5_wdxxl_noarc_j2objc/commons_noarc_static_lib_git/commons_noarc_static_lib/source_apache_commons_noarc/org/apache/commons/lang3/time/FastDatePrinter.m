//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/time/FastDatePrinter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormatSymbols.h"
#include "java/text/FieldPosition.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "org/apache/commons/lang3/time/FastDatePrinter.h"

@interface OrgApacheCommonsLang3TimeFastDatePrinter () {
 @public
  NSString *mPattern_;
  JavaUtilTimeZone *mTimeZone_;
  JavaUtilLocale *mLocale_;
  IOSObjectArray *mRules_;
  jint mMaxLengthEstimate_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (NSString *)applyRulesToStringWithJavaUtilCalendar:(JavaUtilCalendar *)c;

- (JavaUtilGregorianCalendar *)newCalendar OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

+ (void)appendDigitsWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                     withInt:(jint)value;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter, mPattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter, mTimeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter, mLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter, mRules_, IOSObjectArray *)

inline jlong OrgApacheCommonsLang3TimeFastDatePrinter_get_serialVersionUID(void);
#define OrgApacheCommonsLang3TimeFastDatePrinter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDatePrinter, serialVersionUID, jlong)

inline id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFastDatePrinter_get_cTimeZoneDisplayCache(void);
static id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFastDatePrinter_cTimeZoneDisplayCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter, cTimeZoneDisplayCache, id<JavaUtilConcurrentConcurrentMap>)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_init__(OrgApacheCommonsLang3TimeFastDatePrinter *self);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3TimeFastDatePrinter_applyRulesToStringWithJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDatePrinter *self, JavaUtilCalendar *c);

__attribute__((unused)) static JavaUtilGregorianCalendar *OrgApacheCommonsLang3TimeFastDatePrinter_newCalendar(OrgApacheCommonsLang3TimeFastDatePrinter *self);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_readObjectWithJavaIoObjectInputStream_(OrgApacheCommonsLang3TimeFastDatePrinter *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value);

@interface OrgApacheCommonsLang3TimeFastDatePrinter_Rule : NSObject

@end

@interface OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule : NSObject

@end

@interface OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_Rule > {
 @public
  jchar mValue_;
}

- (instancetype)initWithChar:(jchar)value;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral *self, jchar value);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral *new_OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(jchar value) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral *create_OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(jchar value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_Rule > {
 @public
  NSString *mValue_;
}

- (instancetype)initWithNSString:(NSString *)value;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral, mValue_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral *self, NSString *value);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral *new_OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral *create_OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TextField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_Rule > {
 @public
  jint mField_;
  IOSObjectArray *mValues_;
}

- (instancetype)initWithInt:(jint)field
          withNSStringArray:(IOSObjectArray *)values;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TextField)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TextField, mValues_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(OrgApacheCommonsLang3TimeFastDatePrinter_TextField *self, jint field, IOSObjectArray *values);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TextField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(jint field, IOSObjectArray *values) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TextField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(jint field, IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TextField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule > {
 @public
  jint mField_;
}

- (instancetype)initWithInt:(jint)field;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *new_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *create_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(jint field);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *self, JavaLangStringBuffer *buffer, jint value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule >

- (instancetype)init;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField)

inline OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_get_INSTANCE(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField, INSTANCE, OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *self);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *new_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *create_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init(void);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *self, JavaLangStringBuffer *buffer, jint value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule > {
 @public
  jint mField_;
  jint mSize_;
}

- (instancetype)initWithInt:(jint)field
                    withInt:(jint)size;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *self, jint field, jint size);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *new_OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(jint field, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *create_OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(jint field, jint size);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *self, JavaLangStringBuffer *buffer, jint value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule > {
 @public
  jint mField_;
}

- (instancetype)initWithInt:(jint)field;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(jint field);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *self, JavaLangStringBuffer *buffer, jint value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule >

- (instancetype)init;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField)

inline OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_get_INSTANCE(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField, INSTANCE, OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *self);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init(void);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *self, JavaLangStringBuffer *buffer, jint value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule >

- (instancetype)init;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField)

inline OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_get_INSTANCE(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField, INSTANCE, OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *self);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init(void);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *self, JavaLangStringBuffer *buffer, jint value);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule > {
 @public
  id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> mRule_;
}

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule:(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)rule;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField, mRule_, id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField *self, id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule > {
 @public
  id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> mRule_;
}

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule:(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)rule;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField, mRule_, id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField *self, id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_Rule > {
 @public
  JavaUtilLocale *mLocale_;
  jint mStyle_;
  NSString *mStandard_;
  NSString *mDaylight_;
}

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                 withInt:(jint)style;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule, mLocale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule, mStandard_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule, mDaylight_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule *self, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint style);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule *new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint style) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule *create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint style);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_Rule > {
 @public
  jboolean mColon_;
  jboolean mISO8601_;
}

- (instancetype)initWithBoolean:(jboolean)colon
                    withBoolean:(jboolean)iso8601;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule)

inline OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_get_INSTANCE_COLON(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_COLON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, INSTANCE_COLON, OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *)

inline OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_get_INSTANCE_NO_COLON(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_NO_COLON;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, INSTANCE_NO_COLON, OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *)

inline OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_get_INSTANCE_ISO_8601(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_ISO_8601;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, INSTANCE_ISO_8601, OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *self, jboolean colon, jboolean iso8601);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(jboolean colon, jboolean iso8601) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(jboolean colon, jboolean iso8601);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule : NSObject < OrgApacheCommonsLang3TimeFastDatePrinter_Rule > {
 @public
  jint length_;
}

+ (OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *)getRuleWithInt:(jint)tokenLen;

- (instancetype)initWithInt:(jint)length;

- (jint)estimateLength;

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule)

inline OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_get_ISO8601_HOURS(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule, ISO8601_HOURS, OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *)

inline OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_get_ISO8601_HOURS_MINUTES(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_MINUTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule, ISO8601_HOURS_MINUTES, OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *)

inline OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_get_ISO8601_HOURS_COLON_MINUTES(void);
static OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_COLON_MINUTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule, ISO8601_HOURS_COLON_MINUTES, OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *)

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_getRuleWithInt_(jint tokenLen);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *self, jint length);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *new_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(jint length) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *create_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule)

@interface OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey : NSObject {
 @public
  JavaUtilTimeZone *mTimeZone_;
  jint mStyle_;
  JavaUtilLocale *mLocale_;
}

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                             withBoolean:(jboolean)daylight_
                                 withInt:(jint)style
                      withJavaUtilLocale:(JavaUtilLocale *)locale;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey, mTimeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey, mLocale_, JavaUtilLocale *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *self, JavaUtilTimeZone *timeZone, jboolean daylight_, jint style, JavaUtilLocale *locale);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(JavaUtilTimeZone *timeZone, jboolean daylight_, jint style, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(JavaUtilTimeZone *timeZone, jboolean daylight_, jint style, JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDatePrinter)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDatePrinter_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(self, pattern, timeZone, locale);
  return self;
}

- (void)init__ {
  OrgApacheCommonsLang3TimeFastDatePrinter_init__(self);
}

- (id<JavaUtilList>)parsePattern {
  JavaTextDateFormatSymbols *symbols = create_JavaTextDateFormatSymbols_initWithJavaUtilLocale_(mLocale_);
  id<JavaUtilList> rules = create_JavaUtilArrayList_init();
  IOSObjectArray *ERAs = [symbols getEras];
  IOSObjectArray *months = [symbols getMonths];
  IOSObjectArray *shortMonths = [symbols getShortMonths];
  IOSObjectArray *weekdays = [symbols getWeekdays];
  IOSObjectArray *shortWeekdays = [symbols getShortWeekdays];
  IOSObjectArray *AmPmStrings = [symbols getAmPmStrings];
  jint length = [((NSString *) nil_chk(mPattern_)) java_length];
  IOSIntArray *indexRef = [IOSIntArray arrayWithLength:1];
  for (jint i = 0; i < length; i++) {
    *IOSIntArray_GetRef(indexRef, 0) = i;
    NSString *token = [self parseTokenWithNSString:mPattern_ withIntArray:indexRef];
    i = IOSIntArray_Get(indexRef, 0);
    jint tokenLen = [((NSString *) nil_chk(token)) java_length];
    if (tokenLen == 0) {
      break;
    }
    id<OrgApacheCommonsLang3TimeFastDatePrinter_Rule> rule;
    jchar c = [token charAtWithInt:0];
    {
      NSString *sub;
      switch (c) {
        case 'G':
        rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(JavaUtilCalendar_ERA, ERAs);
        break;
        case 'y':
        if (tokenLen == 2) {
          rule = JreLoadStatic(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField, INSTANCE);
        }
        else {
          rule = [self selectNumberRuleWithInt:JavaUtilCalendar_YEAR withInt:tokenLen < 4 ? 4 : tokenLen];
        }
        break;
        case 'M':
        if (tokenLen >= 4) {
          rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(JavaUtilCalendar_MONTH, months);
        }
        else if (tokenLen == 3) {
          rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(JavaUtilCalendar_MONTH, shortMonths);
        }
        else if (tokenLen == 2) {
          rule = JreLoadStatic(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField, INSTANCE);
        }
        else {
          rule = JreLoadStatic(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField, INSTANCE);
        }
        break;
        case 'd':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:tokenLen];
        break;
        case 'h':
        rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_([self selectNumberRuleWithInt:JavaUtilCalendar_HOUR withInt:tokenLen]);
        break;
        case 'H':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:tokenLen];
        break;
        case 'm':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_MINUTE withInt:tokenLen];
        break;
        case 's':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_SECOND withInt:tokenLen];
        break;
        case 'S':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_MILLISECOND withInt:tokenLen];
        break;
        case 'E':
        rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(JavaUtilCalendar_DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
        break;
        case 'D':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_DAY_OF_YEAR withInt:tokenLen];
        break;
        case 'F':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH withInt:tokenLen];
        break;
        case 'w':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_WEEK_OF_YEAR withInt:tokenLen];
        break;
        case 'W':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_WEEK_OF_MONTH withInt:tokenLen];
        break;
        case 'a':
        rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(JavaUtilCalendar_AM_PM, AmPmStrings);
        break;
        case 'k':
        rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_([self selectNumberRuleWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:tokenLen]);
        break;
        case 'K':
        rule = [self selectNumberRuleWithInt:JavaUtilCalendar_HOUR withInt:tokenLen];
        break;
        case 'X':
        rule = OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_getRuleWithInt_(tokenLen);
        break;
        case 'z':
        if (tokenLen >= 4) {
          rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(mTimeZone_, mLocale_, JavaUtilTimeZone_LONG);
        }
        else {
          rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(mTimeZone_, mLocale_, JavaUtilTimeZone_SHORT);
        }
        break;
        case 'Z':
        if (tokenLen == 1) {
          rule = JreLoadStatic(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, INSTANCE_NO_COLON);
        }
        else if (tokenLen == 2) {
          rule = JreLoadStatic(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, INSTANCE_ISO_8601);
        }
        else {
          rule = JreLoadStatic(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, INSTANCE_COLON);
        }
        break;
        case '\'':
        sub = [token java_substring:1];
        if ([((NSString *) nil_chk(sub)) java_length] == 1) {
          rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_([sub charAtWithInt:0]);
        }
        else {
          rule = create_OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(sub);
        }
        break;
        default:
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal pattern component: ", token));
      }
    }
    [rules addWithId:rule];
  }
  return rules;
}

- (NSString *)parseTokenWithNSString:(NSString *)pattern
                        withIntArray:(IOSIntArray *)indexRef {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  jint i = IOSIntArray_Get(nil_chk(indexRef), 0);
  jint length = [((NSString *) nil_chk(pattern)) java_length];
  jchar c = [pattern charAtWithInt:i];
  if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
    [buf appendWithChar:c];
    while (i + 1 < length) {
      jchar peek = [pattern charAtWithInt:i + 1];
      if (peek == c) {
        [buf appendWithChar:c];
        i++;
      }
      else {
        break;
      }
    }
  }
  else {
    [buf appendWithChar:'\''];
    jboolean inLiteral = false;
    for (; i < length; i++) {
      c = [pattern charAtWithInt:i];
      if (c == '\'') {
        if (i + 1 < length && [pattern charAtWithInt:i + 1] == '\'') {
          i++;
          [buf appendWithChar:c];
        }
        else {
          inLiteral = !inLiteral;
        }
      }
      else if (!inLiteral && ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))) {
        i--;
        break;
      }
      else {
        [buf appendWithChar:c];
      }
    }
  }
  *IOSIntArray_GetRef(indexRef, 0) = i;
  return [buf description];
}

- (id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)selectNumberRuleWithInt:(jint)field
                                                                           withInt:(jint)padding {
  switch (padding) {
    case 1:
    return create_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(field);
    case 2:
    return create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(field);
    default:
    return create_OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(field, padding);
  }
}

- (JavaLangStringBuffer *)formatWithId:(id)obj
              withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
             withJavaTextFieldPosition:(JavaTextFieldPosition *)pos {
  if ([obj isKindOfClass:[JavaUtilDate class]]) {
    return [self formatWithJavaUtilDate:(JavaUtilDate *) cast_chk(obj, [JavaUtilDate class]) withJavaLangStringBuffer:toAppendTo];
  }
  else if ([obj isKindOfClass:[JavaUtilCalendar class]]) {
    return [self formatWithJavaUtilCalendar:(JavaUtilCalendar *) cast_chk(obj, [JavaUtilCalendar class]) withJavaLangStringBuffer:toAppendTo];
  }
  else if ([obj isKindOfClass:[JavaLangLong class]]) {
    return [self formatWithLong:[((JavaLangLong *) nil_chk(((JavaLangLong *) cast_chk(obj, [JavaLangLong class])))) longLongValue] withJavaLangStringBuffer:toAppendTo];
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown class: ", (obj == nil ? @"<null>" : [[obj java_getClass] getName])));
  }
}

- (NSString *)formatWithLong:(jlong)millis {
  JavaUtilCalendar *c = OrgApacheCommonsLang3TimeFastDatePrinter_newCalendar(self);
  [((JavaUtilCalendar *) nil_chk(c)) setTimeInMillisWithLong:millis];
  return OrgApacheCommonsLang3TimeFastDatePrinter_applyRulesToStringWithJavaUtilCalendar_(self, c);
}

- (NSString *)applyRulesToStringWithJavaUtilCalendar:(JavaUtilCalendar *)c {
  return OrgApacheCommonsLang3TimeFastDatePrinter_applyRulesToStringWithJavaUtilCalendar_(self, c);
}

- (JavaUtilGregorianCalendar *)newCalendar {
  return OrgApacheCommonsLang3TimeFastDatePrinter_newCalendar(self);
}

- (NSString *)formatWithJavaUtilDate:(JavaUtilDate *)date {
  JavaUtilCalendar *c = OrgApacheCommonsLang3TimeFastDatePrinter_newCalendar(self);
  [((JavaUtilCalendar *) nil_chk(c)) setTimeWithJavaUtilDate:date];
  return OrgApacheCommonsLang3TimeFastDatePrinter_applyRulesToStringWithJavaUtilCalendar_(self, c);
}

- (NSString *)formatWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return [((JavaLangStringBuffer *) nil_chk([self formatWithJavaUtilCalendar:calendar withJavaLangStringBuffer:create_JavaLangStringBuffer_initWithInt_(mMaxLengthEstimate_)])) description];
}

- (JavaLangStringBuffer *)formatWithLong:(jlong)millis
                withJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  return [self formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(millis) withJavaLangStringBuffer:buf];
}

- (JavaLangStringBuffer *)formatWithJavaUtilDate:(JavaUtilDate *)date
                        withJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  JavaUtilCalendar *c = OrgApacheCommonsLang3TimeFastDatePrinter_newCalendar(self);
  [((JavaUtilCalendar *) nil_chk(c)) setTimeWithJavaUtilDate:date];
  return [self applyRulesWithJavaUtilCalendar:c withJavaLangStringBuffer:buf];
}

- (JavaLangStringBuffer *)formatWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                            withJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  return [self applyRulesWithJavaUtilCalendar:calendar withJavaLangStringBuffer:buf];
}

- (JavaLangStringBuffer *)applyRulesWithJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                withJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  {
    IOSObjectArray *a__ = mRules_;
    id<OrgApacheCommonsLang3TimeFastDatePrinter_Rule> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<OrgApacheCommonsLang3TimeFastDatePrinter_Rule> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<OrgApacheCommonsLang3TimeFastDatePrinter_Rule> rule = *b__++;
      [((id<OrgApacheCommonsLang3TimeFastDatePrinter_Rule>) nil_chk(rule)) appendToWithJavaLangStringBuffer:buf withJavaUtilCalendar:calendar];
    }
  }
  return buf;
}

- (NSString *)getPattern {
  return mPattern_;
}

- (JavaUtilTimeZone *)getTimeZone {
  return mTimeZone_;
}

- (JavaUtilLocale *)getLocale {
  return mLocale_;
}

- (jint)getMaxLengthEstimate {
  return mMaxLengthEstimate_;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgApacheCommonsLang3TimeFastDatePrinter class]] == false) {
    return false;
  }
  OrgApacheCommonsLang3TimeFastDatePrinter *other = (OrgApacheCommonsLang3TimeFastDatePrinter *) cast_chk(obj, [OrgApacheCommonsLang3TimeFastDatePrinter class]);
  return [((NSString *) nil_chk(mPattern_)) isEqual:((OrgApacheCommonsLang3TimeFastDatePrinter *) nil_chk(other))->mPattern_] && [((JavaUtilTimeZone *) nil_chk(mTimeZone_)) isEqual:other->mTimeZone_] && [((JavaUtilLocale *) nil_chk(mLocale_)) isEqual:other->mLocale_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(mPattern_)) hash]) + 13 * (((jint) [((JavaUtilTimeZone *) nil_chk(mTimeZone_)) hash]) + 13 * ((jint) [((JavaUtilLocale *) nil_chk(mLocale_)) hash]));
}

- (NSString *)description {
  return JreStrcat("$$C@C$C", @"FastDatePrinter[", mPattern_, ',', mLocale_, ',', [((JavaUtilTimeZone *) nil_chk(mTimeZone_)) getID], ']');
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgApacheCommonsLang3TimeFastDatePrinter_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

+ (void)appendDigitsWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                     withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, value);
}

+ (NSString *)getTimeZoneDisplayWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                                         withBoolean:(jboolean)daylight_
                                             withInt:(jint)style
                                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFastDatePrinter_getTimeZoneDisplayWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(tz, daylight_, style, locale);
}

- (void)dealloc {
  RELEASE_(mPattern_);
  RELEASE_(mTimeZone_);
  RELEASE_(mLocale_);
  RELEASE_(mRules_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilGregorianCalendar;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 11, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 7, 13, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 7, 14, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 7, 15, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x4, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 23, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(parsePattern);
  methods[3].selector = @selector(parseTokenWithNSString:withIntArray:);
  methods[4].selector = @selector(selectNumberRuleWithInt:withInt:);
  methods[5].selector = @selector(formatWithId:withJavaLangStringBuffer:withJavaTextFieldPosition:);
  methods[6].selector = @selector(formatWithLong:);
  methods[7].selector = @selector(applyRulesToStringWithJavaUtilCalendar:);
  methods[8].selector = @selector(newCalendar);
  methods[9].selector = @selector(formatWithJavaUtilDate:);
  methods[10].selector = @selector(formatWithJavaUtilCalendar:);
  methods[11].selector = @selector(formatWithLong:withJavaLangStringBuffer:);
  methods[12].selector = @selector(formatWithJavaUtilDate:withJavaLangStringBuffer:);
  methods[13].selector = @selector(formatWithJavaUtilCalendar:withJavaLangStringBuffer:);
  methods[14].selector = @selector(applyRulesWithJavaUtilCalendar:withJavaLangStringBuffer:);
  methods[15].selector = @selector(getPattern);
  methods[16].selector = @selector(getTimeZone);
  methods[17].selector = @selector(getLocale);
  methods[18].selector = @selector(getMaxLengthEstimate);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(hash);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[23].selector = @selector(appendDigitsWithJavaLangStringBuffer:withInt:);
  methods[24].selector = @selector(getTimeZoneDisplayWithJavaUtilTimeZone:withBoolean:withInt:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeFastDatePrinter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "FULL", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDatePrinter_FULL, 0x19, -1, -1, -1, -1 },
    { "LONG", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDatePrinter_LONG, 0x19, -1, -1, -1, -1 },
    { "MEDIUM", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDatePrinter_MEDIUM, 0x19, -1, -1, -1, -1 },
    { "SHORT", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDatePrinter_SHORT, 0x19, -1, -1, -1, -1 },
    { "mPattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTimeZone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLocale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mRules_", "[LOrgApacheCommonsLang3TimeFastDatePrinter_Rule;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "mMaxLengthEstimate_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "cTimeZoneDisplayCache", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 28, 29, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilTimeZone;LJavaUtilLocale;", "init", "()Ljava/util/List<Lorg/apache/commons/lang3/time/FastDatePrinter$Rule;>;", "parseToken", "LNSString;[I", "selectNumberRule", "II", "format", "LNSObject;LJavaLangStringBuffer;LJavaTextFieldPosition;", "J", "applyRulesToString", "LJavaUtilCalendar;", "LJavaUtilDate;", "JLJavaLangStringBuffer;", "LJavaUtilDate;LJavaLangStringBuffer;", "LJavaUtilCalendar;LJavaLangStringBuffer;", "applyRules", "equals", "LNSObject;", "hashCode", "toString", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "appendDigits", "LJavaLangStringBuffer;I", "getTimeZoneDisplay", "LJavaUtilTimeZone;ZILJavaUtilLocale;", &OrgApacheCommonsLang3TimeFastDatePrinter_cTimeZoneDisplayCache, "Ljava/util/concurrent/ConcurrentMap<Lorg/apache/commons/lang3/time/FastDatePrinter$TimeZoneDisplayKey;Ljava/lang/String;>;", "LOrgApacheCommonsLang3TimeFastDatePrinter_Rule;LOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;LOrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral;LOrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral;LOrgApacheCommonsLang3TimeFastDatePrinter_TextField;LOrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField;LOrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField;LOrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField;LOrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField;LOrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField;LOrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField;LOrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField;LOrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField;LOrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule;LOrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule;LOrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule;LOrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter = { "FastDatePrinter", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x1, 25, 11, -1, 30, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDatePrinter class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_cTimeZoneDisplayCache, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(7));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDatePrinter)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDatePrinter *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreStrongAssign(&self->mPattern_, pattern);
  JreStrongAssign(&self->mTimeZone_, timeZone);
  JreStrongAssign(&self->mLocale_, locale);
  OrgApacheCommonsLang3TimeFastDatePrinter_init__(self);
}

OrgApacheCommonsLang3TimeFastDatePrinter *new_OrgApacheCommonsLang3TimeFastDatePrinter_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_, pattern, timeZone, locale)
}

OrgApacheCommonsLang3TimeFastDatePrinter *create_OrgApacheCommonsLang3TimeFastDatePrinter_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_, pattern, timeZone, locale)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_init__(OrgApacheCommonsLang3TimeFastDatePrinter *self) {
  id<JavaUtilList> rulesList = [self parsePattern];
  JreStrongAssign(&self->mRules_, [((id<JavaUtilList>) nil_chk(rulesList)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[rulesList size] type:OrgApacheCommonsLang3TimeFastDatePrinter_Rule_class_()]]);
  jint len = 0;
  for (jint i = ((IOSObjectArray *) nil_chk(self->mRules_))->size_; --i >= 0; ) {
    len += [((id<OrgApacheCommonsLang3TimeFastDatePrinter_Rule>) nil_chk(IOSObjectArray_Get(nil_chk(self->mRules_), i))) estimateLength];
  }
  self->mMaxLengthEstimate_ = len;
}

NSString *OrgApacheCommonsLang3TimeFastDatePrinter_applyRulesToStringWithJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDatePrinter *self, JavaUtilCalendar *c) {
  return [((JavaLangStringBuffer *) nil_chk([self applyRulesWithJavaUtilCalendar:c withJavaLangStringBuffer:create_JavaLangStringBuffer_initWithInt_(self->mMaxLengthEstimate_)])) description];
}

JavaUtilGregorianCalendar *OrgApacheCommonsLang3TimeFastDatePrinter_newCalendar(OrgApacheCommonsLang3TimeFastDatePrinter *self) {
  return create_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(self->mTimeZone_, self->mLocale_);
}

void OrgApacheCommonsLang3TimeFastDatePrinter_readObjectWithJavaIoObjectInputStream_(OrgApacheCommonsLang3TimeFastDatePrinter *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  OrgApacheCommonsLang3TimeFastDatePrinter_init__(self);
}

void OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(JavaLangStringBuffer *buffer, jint value) {
  OrgApacheCommonsLang3TimeFastDatePrinter_initialize();
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:(jchar) (value / 10 + '0')];
  [buffer appendWithChar:(jchar) (value % 10 + '0')];
}

NSString *OrgApacheCommonsLang3TimeFastDatePrinter_getTimeZoneDisplayWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(JavaUtilTimeZone *tz, jboolean daylight_, jint style, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDatePrinter_initialize();
  OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *key = create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(tz, daylight_, style, locale);
  NSString *value = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgApacheCommonsLang3TimeFastDatePrinter_cTimeZoneDisplayCache)) getWithId:key];
  if (value == nil) {
    value = [((JavaUtilTimeZone *) nil_chk(tz)) getDisplayNameWithBoolean:daylight_ withInt:style withJavaUtilLocale:locale];
    NSString *prior = [OrgApacheCommonsLang3TimeFastDatePrinter_cTimeZoneDisplayCache putIfAbsentWithId:key withId:value];
    if (prior != nil) {
      value = prior;
    }
  }
  return value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_Rule

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(estimateLength);
  methods[1].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_Rule = { "Rule", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x60a, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_Rule;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_Rule)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "appendTo", "LJavaLangStringBuffer;I", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule = { "NumberRule", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x60a, 1, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral

- (instancetype)initWithChar:(jchar)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(self, value);
  return self;
}

- (jint)estimateLength {
  return 1;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:mValue_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mValue_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "C", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral = { "CharacterLiteral", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral *self, jchar value) {
  NSObject_init(self);
  self->mValue_ = value;
}

OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral *new_OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(jchar value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral, initWithChar_, value)
}

OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral *create_OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral_initWithChar_(jchar value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral, initWithChar_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_CharacterLiteral)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral

- (instancetype)initWithNSString:(NSString *)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(self, value);
  return self;
}

- (jint)estimateLength {
  return [((NSString *) nil_chk(mValue_)) java_length];
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:mValue_];
}

- (void)dealloc {
  RELEASE_(mValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mValue_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral = { "StringLiteral", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral *self, NSString *value) {
  NSObject_init(self);
  JreStrongAssign(&self->mValue_, value);
}

OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral *new_OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral, initWithNSString_, value)
}

OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral *create_OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_StringLiteral)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TextField

- (instancetype)initWithInt:(jint)field
          withNSStringArray:(IOSObjectArray *)values {
  OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(self, field, values);
  return self;
}

- (jint)estimateLength {
  jint max = 0;
  for (jint i = ((IOSObjectArray *) nil_chk(mValues_))->size_; --i >= 0; ) {
    jint len = [((NSString *) nil_chk(IOSObjectArray_Get(mValues_, i))) java_length];
    if (len > max) {
      max = len;
    }
  }
  return max;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:IOSObjectArray_Get(nil_chk(mValues_), [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:mField_])];
}

- (void)dealloc {
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withNSStringArray:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mField_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mValues_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[LNSString;", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TextField = { "TextField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 2, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TextField;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(OrgApacheCommonsLang3TimeFastDatePrinter_TextField *self, jint field, IOSObjectArray *values) {
  NSObject_init(self);
  self->mField_ = field;
  JreStrongAssign(&self->mValues_, values);
}

OrgApacheCommonsLang3TimeFastDatePrinter_TextField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(jint field, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TextField, initWithInt_withNSStringArray_, field, values)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TextField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TextField_initWithInt_withNSStringArray_(jint field, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TextField, initWithInt_withNSStringArray_, field, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TextField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(self, field);
  return self;
}

- (jint)estimateLength {
  return 4;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:mField_]);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mField_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField = { "UnpaddedNumberField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *self, jint field) {
  NSObject_init(self);
  self->mField_ = field;
}

OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *new_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *create_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField, initWithInt_, field)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField *self, JavaLangStringBuffer *buffer, jint value) {
  if (value < 10) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:(jchar) (value + '0')];
  }
  else if (value < 100) {
    OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, value);
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithInt:value];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedNumberField)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)estimateLength {
  return 2;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MONTH] + 1);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", &OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_INSTANCE, "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField = { "UnpaddedMonthField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_INSTANCE, new_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *new_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField, init)
}

OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *create_OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField, init)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField *self, JavaLangStringBuffer *buffer, jint value) {
  if (value < 10) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:(jchar) (value + '0')];
  }
  else {
    OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, value);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_UnpaddedMonthField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField

- (instancetype)initWithInt:(jint)field
                    withInt:(jint)size {
  OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(self, field, size);
  return self;
}

- (jint)estimateLength {
  return mSize_;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:mField_]);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mField_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField = { "PaddedNumberField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *self, jint field, jint size) {
  NSObject_init(self);
  if (size < 3) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  self->mField_ = field;
  self->mSize_ = size;
}

OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *new_OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(jint field, jint size) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField, initWithInt_withInt_, field, size)
}

OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *create_OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_initWithInt_withInt_(jint field, jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField, initWithInt_withInt_, field, size)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField *self, JavaLangStringBuffer *buffer, jint value) {
  for (jint digit = 0; digit < self->mSize_; ++digit) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'0'];
  }
  jint index = [((JavaLangStringBuffer *) nil_chk(buffer)) java_length];
  for (; value > 0; value /= 10) {
    [buffer setCharAtWithInt:--index withChar:(jchar) ('0' + value % 10)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_PaddedNumberField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(self, field);
  return self;
}

- (jint)estimateLength {
  return 2;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:mField_]);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mField_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField = { "TwoDigitNumberField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *self, jint field) {
  NSObject_init(self);
  self->mField_ = field;
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField, initWithInt_, field)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField *self, JavaLangStringBuffer *buffer, jint value) {
  if (value < 100) {
    OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, value);
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithInt:value];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitNumberField)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)estimateLength {
  return 2;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_YEAR] % 100);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", &OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_INSTANCE, "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField = { "TwoDigitYearField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_INSTANCE, new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField, init)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField, init)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField *self, JavaLangStringBuffer *buffer, jint value) {
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitYearField)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)estimateLength {
  return 2;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MONTH] + 1);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_appendToWithJavaLangStringBuffer_withInt_(self, buffer, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", &OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_INSTANCE, "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField = { "TwoDigitMonthField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_INSTANCE, new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField, init)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField, init)
}

void OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField_appendToWithJavaLangStringBuffer_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField *self, JavaLangStringBuffer *buffer, jint value) {
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TwoDigitMonthField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule:(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)rule {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(self, rule);
  return self;
}

- (jint)estimateLength {
  return [((id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>) nil_chk(mRule_)) estimateLength];
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  jint value = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_HOUR];
  if (value == 0) {
    value = [calendar getLeastMaximumWithInt:JavaUtilCalendar_HOUR] + 1;
  }
  [((id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>) nil_chk(mRule_)) appendToWithJavaLangStringBuffer:buffer withInt:value];
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  [((id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>) nil_chk(mRule_)) appendToWithJavaLangStringBuffer:buffer withInt:value];
}

- (void)dealloc {
  RELEASE_(mRule_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRule_", "LOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField = { "TwelveHourField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField *self, id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) {
  NSObject_init(self);
  JreStrongAssign(&self->mRule_, rule);
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField, initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_, rule)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField, initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_, rule)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TwelveHourField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule:(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>)rule {
  OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(self, rule);
  return self;
}

- (jint)estimateLength {
  return [((id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>) nil_chk(mRule_)) estimateLength];
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  jint value = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
  if (value == 0) {
    value = [calendar getMaximumWithInt:JavaUtilCalendar_HOUR_OF_DAY] + 1;
  }
  [((id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>) nil_chk(mRule_)) appendToWithJavaLangStringBuffer:buffer withInt:value];
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                                 withInt:(jint)value {
  [((id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule>) nil_chk(mRule_)) appendToWithJavaLangStringBuffer:buffer withInt:value];
}

- (void)dealloc {
  RELEASE_(mRule_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRule_", "LOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule;", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LJavaLangStringBuffer;I", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField = { "TwentyFourHourField", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField *self, id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) {
  NSObject_init(self);
  JreStrongAssign(&self->mRule_, rule);
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField *new_OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField, initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_, rule)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField *create_OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField_initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_(id<OrgApacheCommonsLang3TimeFastDatePrinter_NumberRule> rule) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField, initWithOrgApacheCommonsLang3TimeFastDatePrinter_NumberRule_, rule)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TwentyFourHourField)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                      withJavaUtilLocale:(JavaUtilLocale *)locale
                                 withInt:(jint)style {
  OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(self, timeZone, locale, style);
  return self;
}

- (jint)estimateLength {
  return JavaLangMath_maxWithInt_withInt_([((NSString *) nil_chk(mStandard_)) java_length], [((NSString *) nil_chk(mDaylight_)) java_length]);
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  JavaUtilTimeZone *zone = [((JavaUtilCalendar *) nil_chk(calendar)) getTimeZone];
  if ([calendar getWithInt:JavaUtilCalendar_DST_OFFSET] != 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:OrgApacheCommonsLang3TimeFastDatePrinter_getTimeZoneDisplayWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(zone, true, mStyle_, mLocale_)];
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:OrgApacheCommonsLang3TimeFastDatePrinter_getTimeZoneDisplayWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(zone, false, mStyle_, mLocale_)];
  }
}

- (void)dealloc {
  RELEASE_(mLocale_);
  RELEASE_(mStandard_);
  RELEASE_(mDaylight_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilTimeZone:withJavaUtilLocale:withInt:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLocale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mStyle_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mStandard_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDaylight_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilTimeZone;LJavaUtilLocale;I", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule = { "TimeZoneNameRule", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 4, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule *self, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint style) {
  NSObject_init(self);
  JreStrongAssign(&self->mLocale_, locale);
  self->mStyle_ = style;
  JreStrongAssign(&self->mStandard_, OrgApacheCommonsLang3TimeFastDatePrinter_getTimeZoneDisplayWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(timeZone, false, style, locale));
  JreStrongAssign(&self->mDaylight_, OrgApacheCommonsLang3TimeFastDatePrinter_getTimeZoneDisplayWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(timeZone, true, style, locale));
}

OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule *new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint style) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule, initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_, timeZone, locale, style)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule *create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule_initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_(JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, jint style) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule, initWithJavaUtilTimeZone_withJavaUtilLocale_withInt_, timeZone, locale, style)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNameRule)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule

- (instancetype)initWithBoolean:(jboolean)colon
                    withBoolean:(jboolean)iso8601 {
  OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(self, colon, iso8601);
  return self;
}

- (jint)estimateLength {
  return 5;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  if (mISO8601_ && [((NSString *) nil_chk([((JavaUtilTimeZone *) nil_chk([((JavaUtilCalendar *) nil_chk(calendar)) getTimeZone])) getID])) isEqual:@"UTC"]) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@"Z"];
    return;
  }
  jint offset = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_ZONE_OFFSET] + [calendar getWithInt:JavaUtilCalendar_DST_OFFSET];
  if (offset < 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'-'];
    offset = -offset;
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'+'];
  }
  jint hours = offset / (60 * 60 * 1000);
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, hours);
  if (mColon_) {
    [buffer appendWithChar:':'];
  }
  jint minutes = offset / (60 * 1000) - 60 * hours;
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, minutes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withBoolean:);
  methods[1].selector = @selector(estimateLength);
  methods[2].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE_COLON", "LOrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "INSTANCE_NO_COLON", "LOrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
    { "INSTANCE_ISO_8601", "LOrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule;", .constantValue.asLong = 0, 0x18, -1, 5, -1, -1 },
    { "mColon_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mISO8601_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZ", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", &OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_COLON, &OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_NO_COLON, &OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_ISO_8601, "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule = { "TimeZoneNumberRule", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 5, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_COLON, new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(true, false));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_NO_COLON, new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(false, false));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_INSTANCE_ISO_8601, new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(true, true));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *self, jboolean colon, jboolean iso8601) {
  NSObject_init(self);
  self->mColon_ = colon;
  self->mISO8601_ = iso8601;
}

OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(jboolean colon, jboolean iso8601) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, initWithBoolean_withBoolean_, colon, iso8601)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule *create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule_initWithBoolean_withBoolean_(jboolean colon, jboolean iso8601) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule, initWithBoolean_withBoolean_, colon, iso8601)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneNumberRule)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule

+ (OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *)getRuleWithInt:(jint)tokenLen {
  return OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_getRuleWithInt_(tokenLen);
}

- (instancetype)initWithInt:(jint)length {
  OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(self, length);
  return self;
}

- (jint)estimateLength {
  return length_;
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
                    withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  jint zoneOffset = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_ZONE_OFFSET];
  if (zoneOffset == 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:@"Z"];
    return;
  }
  jint offset = zoneOffset + [calendar getWithInt:JavaUtilCalendar_DST_OFFSET];
  if (offset < 0) {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'-'];
    offset = -offset;
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithChar:'+'];
  }
  jint hours = offset / (60 * 60 * 1000);
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, hours);
  if (length_ < 5) {
    return;
  }
  if (length_ == 6) {
    [buffer appendWithChar:':'];
  }
  jint minutes = offset / (60 * 1000) - 60 * hours;
  OrgApacheCommonsLang3TimeFastDatePrinter_appendDigitsWithJavaLangStringBuffer_withInt_(buffer, minutes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getRuleWithInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(estimateLength);
  methods[3].selector = @selector(appendToWithJavaLangStringBuffer:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ISO8601_HOURS", "LOrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
    { "ISO8601_HOURS_MINUTES", "LOrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule;", .constantValue.asLong = 0, 0x18, -1, 5, -1, -1 },
    { "ISO8601_HOURS_COLON_MINUTES", "LOrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getRule", "I", "appendTo", "LJavaLangStringBuffer;LJavaUtilCalendar;", &OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS, &OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_MINUTES, &OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_COLON_MINUTES, "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule = { "Iso8601_Rule", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 4, 7, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS, new_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(3));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_MINUTES, new_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(5));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_COLON_MINUTES, new_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(6));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule)
  }
}

@end

OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_getRuleWithInt_(jint tokenLen) {
  OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initialize();
  switch (tokenLen) {
    case 1:
    return OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS;
    case 2:
    return OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_MINUTES;
    case 3:
    return OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_ISO8601_HOURS_COLON_MINUTES;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid number of X");
  }
}

void OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *self, jint length) {
  NSObject_init(self);
  self->length_ = length;
}

OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *new_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(jint length) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule, initWithInt_, length)
}

OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule *create_OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule_initWithInt_(jint length) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule, initWithInt_, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_Iso8601_Rule)

@implementation OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                             withBoolean:(jboolean)daylight_
                                 withInt:(jint)style
                      withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(self, timeZone, daylight_, style, locale);
  return self;
}

- (NSUInteger)hash {
  return (mStyle_ * 31 + ((jint) [((JavaUtilLocale *) nil_chk(mLocale_)) hash])) * 31 + ((jint) [((JavaUtilTimeZone *) nil_chk(mTimeZone_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if ([obj isKindOfClass:[OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey class]]) {
    OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *other = (OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *) cast_chk(obj, [OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey class]);
    return [((JavaUtilTimeZone *) nil_chk(mTimeZone_)) isEqual:((OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *) nil_chk(other))->mTimeZone_] && mStyle_ == other->mStyle_ && [((JavaUtilLocale *) nil_chk(mLocale_)) isEqual:other->mLocale_];
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mTimeZone_);
  RELEASE_(mLocale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilTimeZone:withBoolean:withInt:withJavaUtilLocale:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTimeZone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mStyle_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLocale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilTimeZone;ZILJavaUtilLocale;", "hashCode", "equals", "LNSObject;", "LOrgApacheCommonsLang3TimeFastDatePrinter;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey = { "TimeZoneDisplayKey", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 3, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey;
}

@end

void OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *self, JavaUtilTimeZone *timeZone, jboolean daylight_, jint style, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreStrongAssign(&self->mTimeZone_, timeZone);
  if (daylight_) {
    self->mStyle_ = style | -0x7fffffff - 1;
  }
  else {
    self->mStyle_ = style;
  }
  JreStrongAssign(&self->mLocale_, locale);
}

OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *new_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(JavaUtilTimeZone *timeZone, jboolean daylight_, jint style, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey, initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_, timeZone, daylight_, style, locale)
}

OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey *create_OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey_initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_(JavaUtilTimeZone *timeZone, jboolean daylight_, jint style, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey, initWithJavaUtilTimeZone_withBoolean_withInt_withJavaUtilLocale_, timeZone, daylight_, style, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDatePrinter_TimeZoneDisplayKey)
