//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/text/WordUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/commons/lang3/StringUtils.h"
#include "org/apache/commons/lang3/SystemUtils.h"
#include "org/apache/commons/lang3/text/WordUtils.h"

@interface OrgApacheCommonsLang3TextWordUtils ()

+ (jboolean)isDelimiterWithChar:(jchar)ch
                  withCharArray:(IOSCharArray *)delimiters;

@end

__attribute__((unused)) static jboolean OrgApacheCommonsLang3TextWordUtils_isDelimiterWithChar_withCharArray_(jchar ch, IOSCharArray *delimiters);

@implementation OrgApacheCommonsLang3TextWordUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextWordUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)wrapWithNSString:(NSString *)str
                       withInt:(jint)wrapLength {
  return OrgApacheCommonsLang3TextWordUtils_wrapWithNSString_withInt_(str, wrapLength);
}

+ (NSString *)wrapWithNSString:(NSString *)str
                       withInt:(jint)wrapLength
                  withNSString:(NSString *)newLineStr
                   withBoolean:(jboolean)wrapLongWords {
  return OrgApacheCommonsLang3TextWordUtils_wrapWithNSString_withInt_withNSString_withBoolean_(str, wrapLength, newLineStr, wrapLongWords);
}

+ (NSString *)capitalizeWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3TextWordUtils_capitalizeWithNSString_(str);
}

+ (NSString *)capitalizeWithNSString:(NSString *)str
                       withCharArray:(IOSCharArray *)delimiters {
  return OrgApacheCommonsLang3TextWordUtils_capitalizeWithNSString_withCharArray_(str, delimiters);
}

+ (NSString *)capitalizeFullyWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3TextWordUtils_capitalizeFullyWithNSString_(str);
}

+ (NSString *)capitalizeFullyWithNSString:(NSString *)str
                            withCharArray:(IOSCharArray *)delimiters {
  return OrgApacheCommonsLang3TextWordUtils_capitalizeFullyWithNSString_withCharArray_(str, delimiters);
}

+ (NSString *)uncapitalizeWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3TextWordUtils_uncapitalizeWithNSString_(str);
}

+ (NSString *)uncapitalizeWithNSString:(NSString *)str
                         withCharArray:(IOSCharArray *)delimiters {
  return OrgApacheCommonsLang3TextWordUtils_uncapitalizeWithNSString_withCharArray_(str, delimiters);
}

+ (NSString *)swapCaseWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3TextWordUtils_swapCaseWithNSString_(str);
}

+ (NSString *)initialsWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3TextWordUtils_initialsWithNSString_(str);
}

+ (NSString *)initialsWithNSString:(NSString *)str
                     withCharArray:(IOSCharArray *)delimiters {
  return OrgApacheCommonsLang3TextWordUtils_initialsWithNSString_withCharArray_(str, delimiters);
}

+ (jboolean)isDelimiterWithChar:(jchar)ch
                  withCharArray:(IOSCharArray *)delimiters {
  return OrgApacheCommonsLang3TextWordUtils_isDelimiterWithChar_withCharArray_(ch, delimiters);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 7, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 9, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(wrapWithNSString:withInt:);
  methods[2].selector = @selector(wrapWithNSString:withInt:withNSString:withBoolean:);
  methods[3].selector = @selector(capitalizeWithNSString:);
  methods[4].selector = @selector(capitalizeWithNSString:withCharArray:);
  methods[5].selector = @selector(capitalizeFullyWithNSString:);
  methods[6].selector = @selector(capitalizeFullyWithNSString:withCharArray:);
  methods[7].selector = @selector(uncapitalizeWithNSString:);
  methods[8].selector = @selector(uncapitalizeWithNSString:withCharArray:);
  methods[9].selector = @selector(swapCaseWithNSString:);
  methods[10].selector = @selector(initialsWithNSString:);
  methods[11].selector = @selector(initialsWithNSString:withCharArray:);
  methods[12].selector = @selector(isDelimiterWithChar:withCharArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "wrap", "LNSString;I", "LNSString;ILNSString;Z", "capitalize", "LNSString;", "LNSString;[C", "capitalizeFully", "uncapitalize", "swapCase", "initials", "isDelimiter", "C[C" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextWordUtils = { "WordUtils", "org.apache.commons.lang3.text", ptrTable, methods, NULL, 7, 0x1, 13, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextWordUtils;
}

@end

void OrgApacheCommonsLang3TextWordUtils_init(OrgApacheCommonsLang3TextWordUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TextWordUtils *new_OrgApacheCommonsLang3TextWordUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextWordUtils, init)
}

OrgApacheCommonsLang3TextWordUtils *create_OrgApacheCommonsLang3TextWordUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextWordUtils, init)
}

NSString *OrgApacheCommonsLang3TextWordUtils_wrapWithNSString_withInt_(NSString *str, jint wrapLength) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  return OrgApacheCommonsLang3TextWordUtils_wrapWithNSString_withInt_withNSString_withBoolean_(str, wrapLength, nil, false);
}

NSString *OrgApacheCommonsLang3TextWordUtils_wrapWithNSString_withInt_withNSString_withBoolean_(NSString *str, jint wrapLength, NSString *newLineStr, jboolean wrapLongWords) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (newLineStr == nil) {
    newLineStr = JreLoadStatic(OrgApacheCommonsLang3SystemUtils, LINE_SEPARATOR);
  }
  if (wrapLength < 1) {
    wrapLength = 1;
  }
  jint inputLineLength = [str java_length];
  jint offset = 0;
  JavaLangStringBuilder *wrappedLine = create_JavaLangStringBuilder_initWithInt_(inputLineLength + 32);
  while (offset < inputLineLength) {
    if ([str charAtWithInt:offset] == ' ') {
      offset++;
      continue;
    }
    if (inputLineLength - offset <= wrapLength) {
      break;
    }
    jint spaceToWrapAt = [str java_lastIndexOf:' ' fromIndex:wrapLength + offset];
    if (spaceToWrapAt >= offset) {
      [wrappedLine appendWithNSString:[str java_substring:offset endIndex:spaceToWrapAt]];
      [wrappedLine appendWithNSString:newLineStr];
      offset = spaceToWrapAt + 1;
    }
    else {
      if (wrapLongWords) {
        [wrappedLine appendWithNSString:[str java_substring:offset endIndex:wrapLength + offset]];
        [wrappedLine appendWithNSString:newLineStr];
        offset += wrapLength;
      }
      else {
        spaceToWrapAt = [str java_indexOf:' ' fromIndex:wrapLength + offset];
        if (spaceToWrapAt >= 0) {
          [wrappedLine appendWithNSString:[str java_substring:offset endIndex:spaceToWrapAt]];
          [wrappedLine appendWithNSString:newLineStr];
          offset = spaceToWrapAt + 1;
        }
        else {
          [wrappedLine appendWithNSString:[str java_substring:offset]];
          offset = inputLineLength;
        }
      }
    }
  }
  [wrappedLine appendWithNSString:[str java_substring:offset]];
  return [wrappedLine description];
}

NSString *OrgApacheCommonsLang3TextWordUtils_capitalizeWithNSString_(NSString *str) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  return OrgApacheCommonsLang3TextWordUtils_capitalizeWithNSString_withCharArray_(str, nil);
}

NSString *OrgApacheCommonsLang3TextWordUtils_capitalizeWithNSString_withCharArray_(NSString *str, IOSCharArray *delimiters) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  jint delimLen = delimiters == nil ? -1 : delimiters->size_;
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || delimLen == 0) {
    return str;
  }
  IOSCharArray *buffer = [((NSString *) nil_chk(str)) java_toCharArray];
  jboolean capitalizeNext = true;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(buffer))->size_; i++) {
    jchar ch = IOSCharArray_Get(buffer, i);
    if (OrgApacheCommonsLang3TextWordUtils_isDelimiterWithChar_withCharArray_(ch, delimiters)) {
      capitalizeNext = true;
    }
    else if (capitalizeNext) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toTitleCaseWithChar_(ch);
      capitalizeNext = false;
    }
  }
  return [NSString java_stringWithCharacters:buffer];
}

NSString *OrgApacheCommonsLang3TextWordUtils_capitalizeFullyWithNSString_(NSString *str) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  return OrgApacheCommonsLang3TextWordUtils_capitalizeFullyWithNSString_withCharArray_(str, nil);
}

NSString *OrgApacheCommonsLang3TextWordUtils_capitalizeFullyWithNSString_withCharArray_(NSString *str, IOSCharArray *delimiters) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  jint delimLen = delimiters == nil ? -1 : delimiters->size_;
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || delimLen == 0) {
    return str;
  }
  str = [((NSString *) nil_chk(str)) lowercaseString];
  return OrgApacheCommonsLang3TextWordUtils_capitalizeWithNSString_withCharArray_(str, delimiters);
}

NSString *OrgApacheCommonsLang3TextWordUtils_uncapitalizeWithNSString_(NSString *str) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  return OrgApacheCommonsLang3TextWordUtils_uncapitalizeWithNSString_withCharArray_(str, nil);
}

NSString *OrgApacheCommonsLang3TextWordUtils_uncapitalizeWithNSString_withCharArray_(NSString *str, IOSCharArray *delimiters) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  jint delimLen = delimiters == nil ? -1 : delimiters->size_;
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || delimLen == 0) {
    return str;
  }
  IOSCharArray *buffer = [((NSString *) nil_chk(str)) java_toCharArray];
  jboolean uncapitalizeNext = true;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(buffer))->size_; i++) {
    jchar ch = IOSCharArray_Get(buffer, i);
    if (OrgApacheCommonsLang3TextWordUtils_isDelimiterWithChar_withCharArray_(ch, delimiters)) {
      uncapitalizeNext = true;
    }
    else if (uncapitalizeNext) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toLowerCaseWithChar_(ch);
      uncapitalizeNext = false;
    }
  }
  return [NSString java_stringWithCharacters:buffer];
}

NSString *OrgApacheCommonsLang3TextWordUtils_swapCaseWithNSString_(NSString *str) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  IOSCharArray *buffer = [((NSString *) nil_chk(str)) java_toCharArray];
  jboolean whitespace = true;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(buffer))->size_; i++) {
    jchar ch = IOSCharArray_Get(buffer, i);
    if (JavaLangCharacter_isUpperCaseWithChar_(ch)) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toLowerCaseWithChar_(ch);
      whitespace = false;
    }
    else if (JavaLangCharacter_isTitleCaseWithChar_(ch)) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toLowerCaseWithChar_(ch);
      whitespace = false;
    }
    else if (JavaLangCharacter_isLowerCaseWithChar_(ch)) {
      if (whitespace) {
        *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toTitleCaseWithChar_(ch);
        whitespace = false;
      }
      else {
        *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toUpperCaseWithChar_(ch);
      }
    }
    else {
      whitespace = JavaLangCharacter_isWhitespaceWithChar_(ch);
    }
  }
  return [NSString java_stringWithCharacters:buffer];
}

NSString *OrgApacheCommonsLang3TextWordUtils_initialsWithNSString_(NSString *str) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  return OrgApacheCommonsLang3TextWordUtils_initialsWithNSString_withCharArray_(str, nil);
}

NSString *OrgApacheCommonsLang3TextWordUtils_initialsWithNSString_withCharArray_(NSString *str, IOSCharArray *delimiters) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  if (delimiters != nil && delimiters->size_ == 0) {
    return @"";
  }
  jint strLen = [((NSString *) nil_chk(str)) java_length];
  IOSCharArray *buf = [IOSCharArray arrayWithLength:strLen / 2 + 1];
  jint count = 0;
  jboolean lastWasGap = true;
  for (jint i = 0; i < strLen; i++) {
    jchar ch = [str charAtWithInt:i];
    if (OrgApacheCommonsLang3TextWordUtils_isDelimiterWithChar_withCharArray_(ch, delimiters)) {
      lastWasGap = true;
    }
    else if (lastWasGap) {
      *IOSCharArray_GetRef(buf, count++) = ch;
      lastWasGap = false;
    }
    else {
      continue;
    }
  }
  return [NSString java_stringWithCharacters:buf offset:0 length:count];
}

jboolean OrgApacheCommonsLang3TextWordUtils_isDelimiterWithChar_withCharArray_(jchar ch, IOSCharArray *delimiters) {
  OrgApacheCommonsLang3TextWordUtils_initialize();
  if (delimiters == nil) {
    return JavaLangCharacter_isWhitespaceWithChar_(ch);
  }
  {
    IOSCharArray *a__ = delimiters;
    jchar const *b__ = a__->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar delimiter = *b__++;
      if (ch == delimiter) {
        return true;
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextWordUtils)
