//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "org/apache/commons/lang3/text/translate/AggregateTranslator.h"
#include "org/apache/commons/lang3/text/translate/CharSequenceTranslator.h"

__attribute__((unused)) static void OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_translateWithJavaLangCharSequence_withJavaIoWriter_(OrgApacheCommonsLang3TextTranslateCharSequenceTranslator *self, id<JavaLangCharSequence> input, JavaIoWriter *outArg);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TextTranslateCharSequenceTranslator)

IOSCharArray *OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_HEX_DIGITS;

@implementation OrgApacheCommonsLang3TextTranslateCharSequenceTranslator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)translateWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                  withInt:(jint)index
                         withJavaIoWriter:(JavaIoWriter *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)translateWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  if (input == nil) {
    return nil;
  }
  @try {
    JavaIoStringWriter *writer = create_JavaIoStringWriter_initWithInt_([input java_length] * 2);
    OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_translateWithJavaLangCharSequence_withJavaIoWriter_(self, input, writer);
    return [writer description];
  }
  @catch (JavaIoIOException *ioe) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(ioe);
  }
}

- (void)translateWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                         withJavaIoWriter:(JavaIoWriter *)outArg {
  OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_translateWithJavaLangCharSequence_withJavaIoWriter_(self, input, outArg);
}

- (OrgApacheCommonsLang3TextTranslateCharSequenceTranslator *)withWithOrgApacheCommonsLang3TextTranslateCharSequenceTranslatorArray:(IOSObjectArray *)translators {
  IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(translators))->size_ + 1 type:OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_class_()];
  IOSObjectArray_Set(newArray, 0, self);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(translators, 0, newArray, 1, translators->size_);
  return create_OrgApacheCommonsLang3TextTranslateAggregateTranslator_initWithOrgApacheCommonsLang3TextTranslateCharSequenceTranslatorArray_(newArray);
}

+ (NSString *)hexWithInt:(jint)codepoint {
  return OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_hexWithInt_(codepoint);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 4, 2, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextTranslateCharSequenceTranslator;", 0x91, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(translateWithJavaLangCharSequence:withInt:withJavaIoWriter:);
  methods[2].selector = @selector(translateWithJavaLangCharSequence:);
  methods[3].selector = @selector(translateWithJavaLangCharSequence:withJavaIoWriter:);
  methods[4].selector = @selector(withWithOrgApacheCommonsLang3TextTranslateCharSequenceTranslatorArray:);
  methods[5].selector = @selector(hexWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "translate", "LJavaLangCharSequence;ILJavaIoWriter;", "LJavaIoIOException;", "LJavaLangCharSequence;", "LJavaLangCharSequence;LJavaIoWriter;", "with", "[LOrgApacheCommonsLang3TextTranslateCharSequenceTranslator;", "hex", "I", &OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_HEX_DIGITS };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextTranslateCharSequenceTranslator = { "CharSequenceTranslator", "org.apache.commons.lang3.text.translate", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextTranslateCharSequenceTranslator;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TextTranslateCharSequenceTranslator class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_HEX_DIGITS, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TextTranslateCharSequenceTranslator)
  }
}

@end

void OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_init(OrgApacheCommonsLang3TextTranslateCharSequenceTranslator *self) {
  NSObject_init(self);
}

void OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_translateWithJavaLangCharSequence_withJavaIoWriter_(OrgApacheCommonsLang3TextTranslateCharSequenceTranslator *self, id<JavaLangCharSequence> input, JavaIoWriter *outArg) {
  if (outArg == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The Writer must not be null");
  }
  if (input == nil) {
    return;
  }
  jint pos = 0;
  jint len = [input java_length];
  while (pos < len) {
    jint consumed = [self translateWithJavaLangCharSequence:input withInt:pos withJavaIoWriter:outArg];
    if (consumed == 0) {
      jchar c1 = [input charAtWithInt:pos];
      [outArg writeWithInt:c1];
      pos++;
      if (JavaLangCharacter_isHighSurrogateWithChar_(c1) && pos < len) {
        jchar c2 = [input charAtWithInt:pos];
        if (JavaLangCharacter_isLowSurrogateWithChar_(c2)) {
          [outArg writeWithInt:c2];
          pos++;
        }
      }
      continue;
    }
    for (jint pt = 0; pt < consumed; pt++) {
      pos += JavaLangCharacter_charCountWithInt_(JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(input, pos));
    }
  }
}

NSString *OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_hexWithInt_(jint codepoint) {
  OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_initialize();
  return [((NSString *) nil_chk(JavaLangInteger_toHexStringWithInt_(codepoint))) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextTranslateCharSequenceTranslator)
