//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/text/translate/UnicodeUnescaper.java
//

#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "org/apache/commons/lang3/text/translate/CharSequenceTranslator.h"
#include "org/apache/commons/lang3/text/translate/UnicodeUnescaper.h"

@implementation OrgApacheCommonsLang3TextTranslateUnicodeUnescaper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextTranslateUnicodeUnescaper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)translateWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                  withInt:(jint)index
                         withJavaIoWriter:(JavaIoWriter *)outArg {
  if ([((id<JavaLangCharSequence>) nil_chk(input)) charAtWithInt:index] == '\\' && index + 1 < [input java_length] && [input charAtWithInt:index + 1] == 'u') {
    jint i = 2;
    while (index + i < [input java_length] && [input charAtWithInt:index + i] == 'u') {
      i++;
    }
    if (index + i < [input java_length] && [input charAtWithInt:index + i] == '+') {
      i++;
    }
    if (index + i + 4 <= [input java_length]) {
      id<JavaLangCharSequence> unicode = [input subSequenceFrom:index + i to:index + i + 4];
      @try {
        jint value = JavaLangInteger_parseIntWithNSString_withInt_([((id<JavaLangCharSequence>) nil_chk(unicode)) description], 16);
        [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:(jchar) value];
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Unable to parse unicode value: ", unicode), nfe);
      }
      return i + 4;
    }
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Less than 4 hex digits in unicode value: '", [input subSequenceFrom:index to:[input java_length]], @"' due to end of CharSequence"));
  }
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(translateWithJavaLangCharSequence:withInt:withJavaIoWriter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translate", "LJavaLangCharSequence;ILJavaIoWriter;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextTranslateUnicodeUnescaper = { "UnicodeUnescaper", "org.apache.commons.lang3.text.translate", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextTranslateUnicodeUnescaper;
}

@end

void OrgApacheCommonsLang3TextTranslateUnicodeUnescaper_init(OrgApacheCommonsLang3TextTranslateUnicodeUnescaper *self) {
  OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_init(self);
}

OrgApacheCommonsLang3TextTranslateUnicodeUnescaper *new_OrgApacheCommonsLang3TextTranslateUnicodeUnescaper_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextTranslateUnicodeUnescaper, init)
}

OrgApacheCommonsLang3TextTranslateUnicodeUnescaper *create_OrgApacheCommonsLang3TextTranslateUnicodeUnescaper_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextTranslateUnicodeUnescaper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextTranslateUnicodeUnescaper)
