//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/text/StrMatcher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/lang3/StringUtils.h"
#include "org/apache/commons/lang3/text/StrMatcher.h"

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_COMMA_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_COMMA_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, COMMA_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_TAB_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_TAB_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, TAB_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_SPACE_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_SPACE_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, SPACE_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_SPLIT_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_SPLIT_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, SPLIT_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_TRIM_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_TRIM_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, TRIM_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_SINGLE_QUOTE_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_SINGLE_QUOTE_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, SINGLE_QUOTE_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_DOUBLE_QUOTE_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_DOUBLE_QUOTE_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, DOUBLE_QUOTE_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_QUOTE_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_QUOTE_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, QUOTE_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

inline OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_get_NONE_MATCHER(void);
static OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TextStrMatcher, NONE_MATCHER, OrgApacheCommonsLang3TextStrMatcher *)

@interface OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher () {
 @public
  IOSCharArray *chars_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher, chars_, IOSCharArray *)

@interface OrgApacheCommonsLang3TextStrMatcher_CharMatcher () {
 @public
  jchar ch_;
}

@end

@interface OrgApacheCommonsLang3TextStrMatcher_StringMatcher () {
 @public
  IOSCharArray *chars_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextStrMatcher_StringMatcher, chars_, IOSCharArray *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TextStrMatcher)

@implementation OrgApacheCommonsLang3TextStrMatcher

+ (OrgApacheCommonsLang3TextStrMatcher *)commaMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_commaMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)tabMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_tabMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)spaceMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_spaceMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)splitMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_splitMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)trimMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_trimMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)singleQuoteMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_singleQuoteMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)doubleQuoteMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_doubleQuoteMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)quoteMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_quoteMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)noneMatcher {
  return OrgApacheCommonsLang3TextStrMatcher_noneMatcher();
}

+ (OrgApacheCommonsLang3TextStrMatcher *)charMatcherWithChar:(jchar)ch {
  return OrgApacheCommonsLang3TextStrMatcher_charMatcherWithChar_(ch);
}

+ (OrgApacheCommonsLang3TextStrMatcher *)charSetMatcherWithCharArray:(IOSCharArray *)chars {
  return OrgApacheCommonsLang3TextStrMatcher_charSetMatcherWithCharArray_(chars);
}

+ (OrgApacheCommonsLang3TextStrMatcher *)charSetMatcherWithNSString:(NSString *)chars {
  return OrgApacheCommonsLang3TextStrMatcher_charSetMatcherWithNSString_(chars);
}

+ (OrgApacheCommonsLang3TextStrMatcher *)stringMatcherWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3TextStrMatcher_stringMatcherWithNSString_(str);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextStrMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos
                     withInt:(jint)bufferStart
                     withInt:(jint)bufferEnd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos {
  return [self isMatchWithCharArray:buffer withInt:pos withInt:0 withInt:((IOSCharArray *) nil_chk(buffer))->size_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x89, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TextStrMatcher;", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(commaMatcher);
  methods[1].selector = @selector(tabMatcher);
  methods[2].selector = @selector(spaceMatcher);
  methods[3].selector = @selector(splitMatcher);
  methods[4].selector = @selector(trimMatcher);
  methods[5].selector = @selector(singleQuoteMatcher);
  methods[6].selector = @selector(doubleQuoteMatcher);
  methods[7].selector = @selector(quoteMatcher);
  methods[8].selector = @selector(noneMatcher);
  methods[9].selector = @selector(charMatcherWithChar:);
  methods[10].selector = @selector(charSetMatcherWithCharArray:);
  methods[11].selector = @selector(charSetMatcherWithNSString:);
  methods[12].selector = @selector(stringMatcherWithNSString:);
  methods[13].selector = @selector(init);
  methods[14].selector = @selector(isMatchWithCharArray:withInt:withInt:withInt:);
  methods[15].selector = @selector(isMatchWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMMA_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "TAB_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "SPACE_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "SPLIT_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "TRIM_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "SINGLE_QUOTE_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "DOUBLE_QUOTE_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "QUOTE_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "NONE_MATCHER", "LOrgApacheCommonsLang3TextStrMatcher;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "charMatcher", "C", "charSetMatcher", "[C", "LNSString;", "stringMatcher", "isMatch", "[CIII", "[CI", &OrgApacheCommonsLang3TextStrMatcher_COMMA_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_TAB_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_SPACE_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_SPLIT_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_TRIM_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_SINGLE_QUOTE_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_DOUBLE_QUOTE_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_QUOTE_MATCHER, &OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER, "LOrgApacheCommonsLang3TextStrMatcher_CharSetMatcher;LOrgApacheCommonsLang3TextStrMatcher_CharMatcher;LOrgApacheCommonsLang3TextStrMatcher_StringMatcher;LOrgApacheCommonsLang3TextStrMatcher_NoMatcher;LOrgApacheCommonsLang3TextStrMatcher_TrimMatcher;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrMatcher = { "StrMatcher", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x401, 16, 9, -1, 18, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrMatcher;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TextStrMatcher class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_COMMA_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(','));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_TAB_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(0x0009));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_SPACE_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(' '));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_SPLIT_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_([@" \t\n\x0d\x0c" java_toCharArray]));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_TRIM_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_TrimMatcher_init());
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_SINGLE_QUOTE_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_('\''));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_DOUBLE_QUOTE_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_('"'));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_QUOTE_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_([@"'\"" java_toCharArray]));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER, new_OrgApacheCommonsLang3TextStrMatcher_NoMatcher_init());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TextStrMatcher)
  }
}

@end

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_commaMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_COMMA_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_tabMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_TAB_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_spaceMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_SPACE_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_splitMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_SPLIT_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_trimMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_TRIM_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_singleQuoteMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_SINGLE_QUOTE_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_doubleQuoteMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_DOUBLE_QUOTE_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_quoteMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_QUOTE_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_noneMatcher() {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER;
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_charMatcherWithChar_(jchar ch) {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  return create_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(ch);
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_charSetMatcherWithCharArray_(IOSCharArray *chars) {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  if (chars == nil || chars->size_ == 0) {
    return OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER;
  }
  if (chars->size_ == 1) {
    return create_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(IOSCharArray_Get(chars, 0));
  }
  return create_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_(chars);
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_charSetMatcherWithNSString_(NSString *chars) {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(chars)) {
    return OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER;
  }
  if ([((NSString *) nil_chk(chars)) java_length] == 1) {
    return create_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_([chars charAtWithInt:0]);
  }
  return create_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_([chars java_toCharArray]);
}

OrgApacheCommonsLang3TextStrMatcher *OrgApacheCommonsLang3TextStrMatcher_stringMatcherWithNSString_(NSString *str) {
  OrgApacheCommonsLang3TextStrMatcher_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return OrgApacheCommonsLang3TextStrMatcher_NONE_MATCHER;
  }
  return create_OrgApacheCommonsLang3TextStrMatcher_StringMatcher_initWithNSString_(str);
}

void OrgApacheCommonsLang3TextStrMatcher_init(OrgApacheCommonsLang3TextStrMatcher *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrMatcher)

@implementation OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher

- (instancetype)initWithCharArray:(IOSCharArray *)chars {
  OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_(self, chars);
  return self;
}

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos
                     withInt:(jint)bufferStart
                     withInt:(jint)bufferEnd {
  return JavaUtilArrays_binarySearchWithCharArray_withChar_(chars_, IOSCharArray_Get(nil_chk(buffer), pos)) >= 0 ? 1 : 0;
}

- (void)dealloc {
  RELEASE_(chars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(isMatchWithCharArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "chars_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "isMatch", "[CIII", "LOrgApacheCommonsLang3TextStrMatcher;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher = { "CharSetMatcher", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher;
}

@end

void OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_(OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher *self, IOSCharArray *chars) {
  OrgApacheCommonsLang3TextStrMatcher_init(self);
  JreStrongAssign(&self->chars_, [((IOSCharArray *) nil_chk(chars)) java_clone]);
  JavaUtilArrays_sortWithCharArray_(self->chars_);
}

OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher *new_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_(IOSCharArray *chars) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher, initWithCharArray_, chars)
}

OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher *create_OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher_initWithCharArray_(IOSCharArray *chars) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher, initWithCharArray_, chars)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrMatcher_CharSetMatcher)

@implementation OrgApacheCommonsLang3TextStrMatcher_CharMatcher

- (instancetype)initWithChar:(jchar)ch {
  OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(self, ch);
  return self;
}

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos
                     withInt:(jint)bufferStart
                     withInt:(jint)bufferEnd {
  return ch_ == IOSCharArray_Get(nil_chk(buffer), pos) ? 1 : 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:);
  methods[1].selector = @selector(isMatchWithCharArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ch_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "C", "isMatch", "[CIII", "LOrgApacheCommonsLang3TextStrMatcher;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrMatcher_CharMatcher = { "CharMatcher", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrMatcher_CharMatcher;
}

@end

void OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(OrgApacheCommonsLang3TextStrMatcher_CharMatcher *self, jchar ch) {
  OrgApacheCommonsLang3TextStrMatcher_init(self);
  self->ch_ = ch;
}

OrgApacheCommonsLang3TextStrMatcher_CharMatcher *new_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(jchar ch) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrMatcher_CharMatcher, initWithChar_, ch)
}

OrgApacheCommonsLang3TextStrMatcher_CharMatcher *create_OrgApacheCommonsLang3TextStrMatcher_CharMatcher_initWithChar_(jchar ch) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrMatcher_CharMatcher, initWithChar_, ch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrMatcher_CharMatcher)

@implementation OrgApacheCommonsLang3TextStrMatcher_StringMatcher

- (instancetype)initWithNSString:(NSString *)str {
  OrgApacheCommonsLang3TextStrMatcher_StringMatcher_initWithNSString_(self, str);
  return self;
}

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos
                     withInt:(jint)bufferStart
                     withInt:(jint)bufferEnd {
  jint len = ((IOSCharArray *) nil_chk(chars_))->size_;
  if (pos + len > bufferEnd) {
    return 0;
  }
  for (jint i = 0; i < chars_->size_; i++, pos++) {
    if (IOSCharArray_Get(chars_, i) != IOSCharArray_Get(nil_chk(buffer), pos)) {
      return 0;
    }
  }
  return len;
}

- (void)dealloc {
  RELEASE_(chars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isMatchWithCharArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "chars_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "isMatch", "[CIII", "LOrgApacheCommonsLang3TextStrMatcher;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrMatcher_StringMatcher = { "StringMatcher", "org.apache.commons.lang3.text", ptrTable, methods, fields, 7, 0x18, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrMatcher_StringMatcher;
}

@end

void OrgApacheCommonsLang3TextStrMatcher_StringMatcher_initWithNSString_(OrgApacheCommonsLang3TextStrMatcher_StringMatcher *self, NSString *str) {
  OrgApacheCommonsLang3TextStrMatcher_init(self);
  JreStrongAssign(&self->chars_, [((NSString *) nil_chk(str)) java_toCharArray]);
}

OrgApacheCommonsLang3TextStrMatcher_StringMatcher *new_OrgApacheCommonsLang3TextStrMatcher_StringMatcher_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrMatcher_StringMatcher, initWithNSString_, str)
}

OrgApacheCommonsLang3TextStrMatcher_StringMatcher *create_OrgApacheCommonsLang3TextStrMatcher_StringMatcher_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrMatcher_StringMatcher, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrMatcher_StringMatcher)

@implementation OrgApacheCommonsLang3TextStrMatcher_NoMatcher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextStrMatcher_NoMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos
                     withInt:(jint)bufferStart
                     withInt:(jint)bufferEnd {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isMatchWithCharArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isMatch", "[CIII", "LOrgApacheCommonsLang3TextStrMatcher;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrMatcher_NoMatcher = { "NoMatcher", "org.apache.commons.lang3.text", ptrTable, methods, NULL, 7, 0x18, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrMatcher_NoMatcher;
}

@end

void OrgApacheCommonsLang3TextStrMatcher_NoMatcher_init(OrgApacheCommonsLang3TextStrMatcher_NoMatcher *self) {
  OrgApacheCommonsLang3TextStrMatcher_init(self);
}

OrgApacheCommonsLang3TextStrMatcher_NoMatcher *new_OrgApacheCommonsLang3TextStrMatcher_NoMatcher_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrMatcher_NoMatcher, init)
}

OrgApacheCommonsLang3TextStrMatcher_NoMatcher *create_OrgApacheCommonsLang3TextStrMatcher_NoMatcher_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrMatcher_NoMatcher, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrMatcher_NoMatcher)

@implementation OrgApacheCommonsLang3TextStrMatcher_TrimMatcher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TextStrMatcher_TrimMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)isMatchWithCharArray:(IOSCharArray *)buffer
                     withInt:(jint)pos
                     withInt:(jint)bufferStart
                     withInt:(jint)bufferEnd {
  return IOSCharArray_Get(nil_chk(buffer), pos) <= 32 ? 1 : 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isMatchWithCharArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isMatch", "[CIII", "LOrgApacheCommonsLang3TextStrMatcher;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextStrMatcher_TrimMatcher = { "TrimMatcher", "org.apache.commons.lang3.text", ptrTable, methods, NULL, 7, 0x18, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextStrMatcher_TrimMatcher;
}

@end

void OrgApacheCommonsLang3TextStrMatcher_TrimMatcher_init(OrgApacheCommonsLang3TextStrMatcher_TrimMatcher *self) {
  OrgApacheCommonsLang3TextStrMatcher_init(self);
}

OrgApacheCommonsLang3TextStrMatcher_TrimMatcher *new_OrgApacheCommonsLang3TextStrMatcher_TrimMatcher_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextStrMatcher_TrimMatcher, init)
}

OrgApacheCommonsLang3TextStrMatcher_TrimMatcher *create_OrgApacheCommonsLang3TextStrMatcher_TrimMatcher_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextStrMatcher_TrimMatcher, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextStrMatcher_TrimMatcher)
