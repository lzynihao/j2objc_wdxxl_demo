//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/time/FastDateParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormatSymbols.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TimeZone.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/commons/lang3/time/FastDateParser.h"

@class OrgApacheCommonsLang3TimeFastDateParser_Strategy;

@interface OrgApacheCommonsLang3TimeFastDateParser () {
 @public
  NSString *pattern_;
  JavaUtilTimeZone *timeZone_;
  JavaUtilLocale *locale_;
  jint century_;
  jint startYear_;
  JavaUtilRegexPattern *parsePattern_;
  IOSObjectArray *strategies_;
  NSString *currentFormatField_;
  OrgApacheCommonsLang3TimeFastDateParser_Strategy *nextStrategy_;
}

- (void)init__WithJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

+ (JavaLangStringBuilder *)escapeRegexWithJavaLangStringBuilder:(JavaLangStringBuilder *)regex
                                                   withNSString:(NSString *)value
                                                    withBoolean:(jboolean)unquote;

+ (id<JavaUtilMap>)getDisplayNamesWithInt:(jint)field
                     withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar
                       withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jint)adjustYearWithInt:(jint)twoDigitYear;

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithNSString:(NSString *)formatField
                                                         withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar;

+ (id<JavaUtilConcurrentConcurrentMap>)getCacheWithInt:(jint)field;

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getLocaleSpecificStrategyWithInt:(jint)field
                                                                  withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, timeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, parsePattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, strategies_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, currentFormatField_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, nextStrategy_, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline jlong OrgApacheCommonsLang3TimeFastDateParser_get_serialVersionUID(void);
#define OrgApacheCommonsLang3TimeFastDateParser_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser, serialVersionUID, jlong)

inline JavaUtilRegexPattern *OrgApacheCommonsLang3TimeFastDateParser_get_formatPattern(void);
static JavaUtilRegexPattern *OrgApacheCommonsLang3TimeFastDateParser_formatPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, formatPattern, JavaUtilRegexPattern *)

inline IOSObjectArray *OrgApacheCommonsLang3TimeFastDateParser_get_caches(void);
static IOSObjectArray *OrgApacheCommonsLang3TimeFastDateParser_caches;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, caches, IOSObjectArray *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_ABBREVIATED_YEAR_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, ABBREVIATED_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_NUMBER_MONTH_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, NUMBER_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_LITERAL_YEAR_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, LITERAL_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_WEEK_OF_YEAR_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, WEEK_OF_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_WEEK_OF_MONTH_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, WEEK_OF_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_YEAR_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_MONTH_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_WEEK_IN_MONTH_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_WEEK_IN_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR_OF_DAY_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR_OF_DAY_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR24_OF_DAY_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR24_OF_DAY_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR12_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR12_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_MINUTE_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, MINUTE_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_SECOND_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, SECOND_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_MILLISECOND_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, MILLISECOND_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_ISO_8601_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO_8601_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, ISO_8601_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, JavaUtilCalendar *definingCalendar);

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_readObjectWithJavaIoObjectInputStream_(OrgApacheCommonsLang3TimeFastDateParser *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static JavaLangStringBuilder *OrgApacheCommonsLang3TimeFastDateParser_escapeRegexWithJavaLangStringBuilder_withNSString_withBoolean_(JavaLangStringBuilder *regex, NSString *value, jboolean unquote);

__attribute__((unused)) static id<JavaUtilMap> OrgApacheCommonsLang3TimeFastDateParser_getDisplayNamesWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale);

__attribute__((unused)) static jint OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(OrgApacheCommonsLang3TimeFastDateParser *self, jint twoDigitYear);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, NSString *formatField, JavaUtilCalendar *definingCalendar);

__attribute__((unused)) static id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, jint field, JavaUtilCalendar *definingCalendar);

@interface OrgApacheCommonsLang3TimeFastDateParser_Strategy : NSObject

- (instancetype)init;

- (jboolean)isNumber;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_Strategy)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(OrgApacheCommonsLang3TimeFastDateParser_Strategy *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_Strategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  NSString *formatField_;
}

- (instancetype)initWithNSString:(NSString *)formatField;

- (jboolean)isNumber;

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy, formatField_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *self, NSString *formatField);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  jint field_;
  JavaUtilLocale *locale_;
  id<JavaUtilMap> lKeyValues_;
}

- (instancetype)initWithInt:(jint)field
       withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar
         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, lKeyValues_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *self, jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  jint field_;
}

- (instancetype)initWithInt:(jint)field;

- (jboolean)isNumber;

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

- (jint)modifyWithInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_1 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_1)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_1 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_1 *new_OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_1 *create_OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  NSString *validTimeZoneChars_;
  id<JavaUtilSortedMap> tzNames_;
}

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, validTimeZoneChars_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, tzNames_, id<JavaUtilSortedMap>)

inline jint OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_ID(void);
#define OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, ID, jint)

inline jint OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_LONG_STD(void);
#define OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_STD 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, LONG_STD, jint)

inline jint OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_SHORT_STD(void);
#define OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_STD 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, SHORT_STD, jint)

inline jint OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_LONG_DST(void);
#define OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_DST 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, LONG_DST, jint)

inline jint OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_SHORT_DST(void);
#define OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_DST 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, SHORT_DST, jint)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *self, JavaUtilLocale *locale);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  NSString *pattern_;
}

- (instancetype)initWithNSString:(NSString *)pattern;

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

+ (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithInt:(jint)tokenLen;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, pattern_, NSString *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_get_ISO_8601_1_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_1_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_get_ISO_8601_2_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_2_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_get_ISO_8601_3_STRATEGY(void);
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_3_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *self, NSString *pattern);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(jint tokenLen);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_2 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_2)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_2 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_2 *new_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_2 *create_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_3 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_3)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_3 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_3 *new_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_3 *create_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_4 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_4)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_4 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_4 *new_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_4 *create_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDateParser)

JavaUtilLocale *OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL;

@implementation OrgApacheCommonsLang3TimeFastDateParser

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(self, pattern, timeZone, locale);
  return self;
}

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale
                withJavaUtilDate:(JavaUtilDate *)centuryStart {
  OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(self, pattern, timeZone, locale, centuryStart);
  return self;
}

- (void)init__WithJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(self, definingCalendar);
}

- (NSString *)getPattern {
  return pattern_;
}

- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_;
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (JavaUtilRegexPattern *)getParsePattern {
  return parsePattern_;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgApacheCommonsLang3TimeFastDateParser class]])) {
    return false;
  }
  OrgApacheCommonsLang3TimeFastDateParser *other = (OrgApacheCommonsLang3TimeFastDateParser *) cast_chk(obj, [OrgApacheCommonsLang3TimeFastDateParser class]);
  return [((NSString *) nil_chk(pattern_)) isEqual:((OrgApacheCommonsLang3TimeFastDateParser *) nil_chk(other))->pattern_] && [((JavaUtilTimeZone *) nil_chk(timeZone_)) isEqual:other->timeZone_] && [((JavaUtilLocale *) nil_chk(locale_)) isEqual:other->locale_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(pattern_)) hash]) + 13 * (((jint) [((JavaUtilTimeZone *) nil_chk(timeZone_)) hash]) + 13 * ((jint) [((JavaUtilLocale *) nil_chk(locale_)) hash]));
}

- (NSString *)description {
  return JreStrcat("$$C@C$C", @"FastDateParser[", pattern_, ',', locale_, ',', [((JavaUtilTimeZone *) nil_chk(timeZone_)) getID], ']');
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgApacheCommonsLang3TimeFastDateParser_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (id)parseObjectWithNSString:(NSString *)source {
  return [self parseWithNSString:source];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source {
  JavaUtilDate *date = [self parseWithNSString:source withJavaTextParsePosition:create_JavaTextParsePosition_initWithInt_(0)];
  if (date == nil) {
    if ([((JavaUtilLocale *) nil_chk(locale_)) isEqual:OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL]) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$@$$$$", @"(The ", locale_, @" locale does not support dates before 1868 AD)\nUnparseable date: \"", source, @"\" does not match ", [((JavaUtilRegexPattern *) nil_chk(parsePattern_)) pattern]), 0);
    }
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$$$", @"Unparseable date: \"", source, @"\" does not match ", [((JavaUtilRegexPattern *) nil_chk(parsePattern_)) pattern]), 0);
  }
  return date;
}

- (id)parseObjectWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  return [self parseWithNSString:source withJavaTextParsePosition:pos];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source
          withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  jint offset = [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(parsePattern_)) matcherWithJavaLangCharSequence:[((NSString *) nil_chk(source)) java_substring:offset]];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
    return nil;
  }
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone_, locale_);
  [((JavaUtilCalendar *) nil_chk(cal)) clear];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(strategies_))->size_; ) {
    OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy = IOSObjectArray_Get(strategies_, i++);
    [((OrgApacheCommonsLang3TimeFastDateParser_Strategy *) nil_chk(strategy)) setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:self withJavaUtilCalendar:cal withNSString:[matcher groupWithInt:i]];
  }
  [pos setIndexWithInt:offset + [matcher end]];
  return [cal getTime];
}

+ (JavaLangStringBuilder *)escapeRegexWithJavaLangStringBuilder:(JavaLangStringBuilder *)regex
                                                   withNSString:(NSString *)value
                                                    withBoolean:(jboolean)unquote {
  return OrgApacheCommonsLang3TimeFastDateParser_escapeRegexWithJavaLangStringBuilder_withNSString_withBoolean_(regex, value, unquote);
}

+ (id<JavaUtilMap>)getDisplayNamesWithInt:(jint)field
                     withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar
                       withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFastDateParser_getDisplayNamesWithInt_withJavaUtilCalendar_withJavaUtilLocale_(field, definingCalendar, locale);
}

- (jint)adjustYearWithInt:(jint)twoDigitYear {
  return OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(self, twoDigitYear);
}

- (jboolean)isNextNumber {
  return nextStrategy_ != nil && [nextStrategy_ isNumber];
}

- (jint)getFieldWidth {
  return [((NSString *) nil_chk(currentFormatField_)) java_length];
}

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithNSString:(NSString *)formatField
                                                         withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  return OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithNSString_withJavaUtilCalendar_(self, formatField, definingCalendar);
}

+ (id<JavaUtilConcurrentConcurrentMap>)getCacheWithInt:(jint)field {
  return OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(field);
}

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getLocaleSpecificStrategyWithInt:(jint)field
                                                                  withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, field, definingCalendar);
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(timeZone_);
  RELEASE_(locale_);
  RELEASE_(parsePattern_);
  RELEASE_(strategies_);
  RELEASE_(currentFormatField_);
  RELEASE_(nextStrategy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 10, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 14, 12, 13, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 18, 19, -1, 20, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentConcurrentMap;", 0xa, 25, 22, -1, 26, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", 0x2, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:withJavaUtilDate:);
  methods[2].selector = @selector(init__WithJavaUtilCalendar:);
  methods[3].selector = @selector(getPattern);
  methods[4].selector = @selector(getTimeZone);
  methods[5].selector = @selector(getLocale);
  methods[6].selector = @selector(getParsePattern);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[11].selector = @selector(parseObjectWithNSString:);
  methods[12].selector = @selector(parseWithNSString:);
  methods[13].selector = @selector(parseObjectWithNSString:withJavaTextParsePosition:);
  methods[14].selector = @selector(parseWithNSString:withJavaTextParsePosition:);
  methods[15].selector = @selector(escapeRegexWithJavaLangStringBuilder:withNSString:withBoolean:);
  methods[16].selector = @selector(getDisplayNamesWithInt:withJavaUtilCalendar:withJavaUtilLocale:);
  methods[17].selector = @selector(adjustYearWithInt:);
  methods[18].selector = @selector(isNextNumber);
  methods[19].selector = @selector(getFieldWidth);
  methods[20].selector = @selector(getStrategyWithNSString:withJavaUtilCalendar:);
  methods[21].selector = @selector(getCacheWithInt:);
  methods[22].selector = @selector(getLocaleSpecificStrategyWithInt:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeFastDateParser_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "JAPANESE_IMPERIAL", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeZone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "century_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "startYear_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parsePattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "strategies_", "[LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "currentFormatField_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "nextStrategy_", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "formatPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "caches", "[LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 31, 32, -1 },
    { "ABBREVIATED_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "NUMBER_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "LITERAL_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "WEEK_OF_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "WEEK_OF_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "DAY_OF_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "DAY_OF_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "DAY_OF_WEEK_IN_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "HOUR_OF_DAY_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "HOUR24_OF_DAY_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "HOUR12_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "HOUR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "MINUTE_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "SECOND_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "MILLISECOND_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "ISO_8601_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilTimeZone;LJavaUtilLocale;", "LNSString;LJavaUtilTimeZone;LJavaUtilLocale;LJavaUtilDate;", "init", "LJavaUtilCalendar;", "equals", "LNSObject;", "hashCode", "toString", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "parseObject", "LNSString;", "LJavaTextParseException;", "parse", "LNSString;LJavaTextParsePosition;", "escapeRegex", "LJavaLangStringBuilder;LNSString;Z", "getDisplayNames", "ILJavaUtilCalendar;LJavaUtilLocale;", "(ILjava/util/Calendar;Ljava/util/Locale;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "adjustYear", "I", "getStrategy", "LNSString;LJavaUtilCalendar;", "getCache", "(I)Ljava/util/concurrent/ConcurrentMap<Ljava/util/Locale;Lorg/apache/commons/lang3/time/FastDateParser$Strategy;>;", "getLocaleSpecificStrategy", "ILJavaUtilCalendar;", &OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL, &OrgApacheCommonsLang3TimeFastDateParser_formatPattern, &OrgApacheCommonsLang3TimeFastDateParser_caches, "[Ljava/util/concurrent/ConcurrentMap<Ljava/util/Locale;Lorg/apache/commons/lang3/time/FastDateParser$Strategy;>;", &OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_ISO_8601_STRATEGY, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;LOrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy;LOrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy;LOrgApacheCommonsLang3TimeFastDateParser_NumberStrategy;LOrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy;LOrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser = { "FastDateParser", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x1, 23, 29, -1, 49, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDateParser class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL, new_JavaUtilLocale_initWithNSString_withNSString_withNSString_(@"ja", @"JP", @"JP"));
    JreStrongAssign(&OrgApacheCommonsLang3TimeFastDateParser_formatPattern, JavaUtilRegexPattern_compileWithNSString_(@"D+|E+|F+|G+|H+|K+|M+|S+|W+|X+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++"));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_caches, [IOSObjectArray newArrayWithLength:JavaUtilCalendar_FIELD_COUNT type:JavaUtilConcurrentConcurrentMap_class_()]);
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(JavaUtilCalendar_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(JavaUtilCalendar_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_WEEK_OF_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_WEEK_OF_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_DAY_OF_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_DAY_OF_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_HOUR_OF_DAY));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(JavaUtilCalendar_HOUR_OF_DAY));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(JavaUtilCalendar_HOUR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_HOUR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_MINUTE));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_SECOND));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_MILLISECOND));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO_8601_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}(?::?\\d{2})?))"));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDateParser)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(self, pattern, timeZone, locale, nil);
}

OrgApacheCommonsLang3TimeFastDateParser *new_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_, pattern, timeZone, locale)
}

OrgApacheCommonsLang3TimeFastDateParser *create_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_, pattern, timeZone, locale)
}

void OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(OrgApacheCommonsLang3TimeFastDateParser *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) {
  NSObject_init(self);
  JreStrongAssign(&self->pattern_, pattern);
  JreStrongAssign(&self->timeZone_, timeZone);
  JreStrongAssign(&self->locale_, locale);
  JavaUtilCalendar *definingCalendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone, locale);
  jint centuryStartYear;
  if (centuryStart != nil) {
    [((JavaUtilCalendar *) nil_chk(definingCalendar)) setTimeWithJavaUtilDate:centuryStart];
    centuryStartYear = [definingCalendar getWithInt:JavaUtilCalendar_YEAR];
  }
  else if ([((JavaUtilLocale *) nil_chk(locale)) isEqual:OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL]) {
    centuryStartYear = 0;
  }
  else {
    [((JavaUtilCalendar *) nil_chk(definingCalendar)) setTimeWithJavaUtilDate:create_JavaUtilDate_init()];
    centuryStartYear = [definingCalendar getWithInt:JavaUtilCalendar_YEAR] - 80;
  }
  self->century_ = centuryStartYear / 100 * 100;
  self->startYear_ = centuryStartYear - self->century_;
  OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(self, definingCalendar);
}

OrgApacheCommonsLang3TimeFastDateParser *new_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_, pattern, timeZone, locale, centuryStart)
}

OrgApacheCommonsLang3TimeFastDateParser *create_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_, pattern, timeZone, locale, centuryStart)
}

void OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, JavaUtilCalendar *definingCalendar) {
  JavaLangStringBuilder *regex = create_JavaLangStringBuilder_init();
  id<JavaUtilList> collector = create_JavaUtilArrayList_init();
  JavaUtilRegexMatcher *patternMatcher = [((JavaUtilRegexPattern *) nil_chk(OrgApacheCommonsLang3TimeFastDateParser_formatPattern)) matcherWithJavaLangCharSequence:self->pattern_];
  if (![((JavaUtilRegexMatcher *) nil_chk(patternMatcher)) lookingAt]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$CC", @"Illegal pattern character '", [((NSString *) nil_chk(self->pattern_)) charAtWithInt:[patternMatcher regionStart]], '\''));
  }
  JreStrongAssign(&self->currentFormatField_, [patternMatcher group]);
  OrgApacheCommonsLang3TimeFastDateParser_Strategy *currentStrategy = OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithNSString_withJavaUtilCalendar_(self, self->currentFormatField_, definingCalendar);
  for (; ; ) {
    [patternMatcher regionWithInt:[patternMatcher end] withInt:[patternMatcher regionEnd]];
    if (![patternMatcher lookingAt]) {
      JreStrongAssign(&self->nextStrategy_, nil);
      break;
    }
    NSString *nextFormatField = [patternMatcher group];
    JreStrongAssign(&self->nextStrategy_, OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithNSString_withJavaUtilCalendar_(self, nextFormatField, definingCalendar));
    if ([((OrgApacheCommonsLang3TimeFastDateParser_Strategy *) nil_chk(currentStrategy)) addRegexWithOrgApacheCommonsLang3TimeFastDateParser:self withJavaLangStringBuilder:regex]) {
      [collector addWithId:currentStrategy];
    }
    JreStrongAssign(&self->currentFormatField_, nextFormatField);
    currentStrategy = self->nextStrategy_;
  }
  if ([patternMatcher regionStart] != [patternMatcher regionEnd]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$I", @"Failed to parse \"", self->pattern_, @"\" ; gave up at index ", [patternMatcher regionStart]));
  }
  if ([((OrgApacheCommonsLang3TimeFastDateParser_Strategy *) nil_chk(currentStrategy)) addRegexWithOrgApacheCommonsLang3TimeFastDateParser:self withJavaLangStringBuilder:regex]) {
    [collector addWithId:currentStrategy];
  }
  JreStrongAssign(&self->currentFormatField_, nil);
  JreStrongAssign(&self->strategies_, [collector toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[collector size] type:OrgApacheCommonsLang3TimeFastDateParser_Strategy_class_()]]);
  JreStrongAssign(&self->parsePattern_, JavaUtilRegexPattern_compileWithNSString_([regex description]));
}

void OrgApacheCommonsLang3TimeFastDateParser_readObjectWithJavaIoObjectInputStream_(OrgApacheCommonsLang3TimeFastDateParser *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  JavaUtilCalendar *definingCalendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(self->timeZone_, self->locale_);
  OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(self, definingCalendar);
}

JavaLangStringBuilder *OrgApacheCommonsLang3TimeFastDateParser_escapeRegexWithJavaLangStringBuilder_withNSString_withBoolean_(JavaLangStringBuilder *regex, NSString *value, jboolean unquote) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  [((JavaLangStringBuilder *) nil_chk(regex)) appendWithNSString:@"\\Q"];
  for (jint i = 0; i < [((NSString *) nil_chk(value)) java_length]; ++i) {
    jchar c = [value charAtWithInt:i];
    switch (c) {
      case '\'':
      if (unquote) {
        if (++i == [value java_length]) {
          return regex;
        }
        c = [value charAtWithInt:i];
      }
      break;
      case '\\':
      if (++i == [value java_length]) {
        break;
      }
      [regex appendWithChar:c];
      c = [value charAtWithInt:i];
      if (c == 'E') {
        [regex appendWithNSString:@"E\\\\E\\"];
        c = 'Q';
      }
      break;
      default:
      break;
    }
    [regex appendWithChar:c];
  }
  [regex appendWithNSString:@"\\E"];
  return regex;
}

id<JavaUtilMap> OrgApacheCommonsLang3TimeFastDateParser_getDisplayNamesWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  return [((JavaUtilCalendar *) nil_chk(definingCalendar)) getDisplayNamesWithInt:field withInt:JavaUtilCalendar_ALL_STYLES withJavaUtilLocale:locale];
}

jint OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(OrgApacheCommonsLang3TimeFastDateParser *self, jint twoDigitYear) {
  jint trial = self->century_ + twoDigitYear;
  return twoDigitYear >= self->startYear_ ? trial : trial + 100;
}

OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, NSString *formatField, JavaUtilCalendar *definingCalendar) {
  switch ([((NSString *) nil_chk(formatField)) charAtWithInt:0]) {
    case '\'':
    if ([formatField java_length] > 2) {
      return create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_([formatField java_substring:1 endIndex:[formatField java_length] - 1]);
    }
    default:
    return create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(formatField);
    case 'D':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY;
    case 'E':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_DAY_OF_WEEK, definingCalendar);
    case 'F':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY;
    case 'G':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_ERA, definingCalendar);
    case 'H':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY;
    case 'K':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY;
    case 'M':
    return [formatField java_length] >= 3 ? OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_MONTH, definingCalendar) : OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY;
    case 'S':
    return OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY;
    case 'W':
    return OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY;
    case 'a':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_AM_PM, definingCalendar);
    case 'd':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY;
    case 'h':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY;
    case 'k':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY;
    case 'm':
    return OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY;
    case 's':
    return OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY;
    case 'w':
    return OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY;
    case 'y':
    return [formatField java_length] > 2 ? OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY : OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY;
    case 'X':
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_([formatField java_length]);
    case 'Z':
    if ([formatField isEqual:@"ZZ"]) {
      return OrgApacheCommonsLang3TimeFastDateParser_ISO_8601_STRATEGY;
    }
    case 'z':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_ZONE_OFFSET, definingCalendar);
  }
}

id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  @synchronized(OrgApacheCommonsLang3TimeFastDateParser_caches) {
    if (IOSObjectArray_Get(nil_chk(OrgApacheCommonsLang3TimeFastDateParser_caches), field) == nil) {
      IOSObjectArray_SetAndConsume(OrgApacheCommonsLang3TimeFastDateParser_caches, field, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(3));
    }
    return JreRetainedLocalValue(IOSObjectArray_Get(OrgApacheCommonsLang3TimeFastDateParser_caches, field));
  }
}

OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, jint field, JavaUtilCalendar *definingCalendar) {
  id<JavaUtilConcurrentConcurrentMap> cache = OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(field);
  OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(cache)) getWithId:self->locale_];
  if (strategy == nil) {
    strategy = field == JavaUtilCalendar_ZONE_OFFSET ? create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(self->locale_) : (id) create_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(field, definingCalendar, self->locale_);
    OrgApacheCommonsLang3TimeFastDateParser_Strategy *inCache = [cache putIfAbsentWithId:self->locale_ withId:strategy];
    if (inCache != nil) {
      return inCache;
    }
  }
  return strategy;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser)

@implementation OrgApacheCommonsLang3TimeFastDateParser_Strategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isNumber {
  return false;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
}

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isNumber);
  methods[2].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  methods[3].selector = @selector(addRegexWithOrgApacheCommonsLang3TimeFastDateParser:withJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "addRegex", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaLangStringBuilder;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_Strategy = { "Strategy", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x40a, 4, 0, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_Strategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(OrgApacheCommonsLang3TimeFastDateParser_Strategy *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_Strategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy

- (instancetype)initWithNSString:(NSString *)formatField {
  OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(self, formatField);
  return self;
}

- (jboolean)isNumber {
  jchar c = [((NSString *) nil_chk(formatField_)) charAtWithInt:0];
  if (c == '\'') {
    c = [formatField_ charAtWithInt:1];
  }
  return JavaLangCharacter_isDigitWithChar_(c);
}

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  OrgApacheCommonsLang3TimeFastDateParser_escapeRegexWithJavaLangStringBuilder_withNSString_withBoolean_(regex, formatField_, true);
  return false;
}

- (void)dealloc {
  RELEASE_(formatField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isNumber);
  methods[2].selector = @selector(addRegexWithOrgApacheCommonsLang3TimeFastDateParser:withJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formatField_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "addRegex", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaLangStringBuilder;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy = { "CopyQuotedStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *self, NSString *formatField) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  JreStrongAssign(&self->formatField_, formatField);
}

OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy, initWithNSString_, formatField)
}

OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy, initWithNSString_, formatField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy

- (instancetype)initWithInt:(jint)field
       withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(self, field, definingCalendar, locale);
  return self;
}

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  [((JavaLangStringBuilder *) nil_chk(regex)) appendWithNSString:@"((?iu)"];
  for (NSString * __strong textKeyValue in nil_chk([((id<JavaUtilMap>) nil_chk(lKeyValues_)) keySet])) {
    [((JavaLangStringBuilder *) nil_chk(OrgApacheCommonsLang3TimeFastDateParser_escapeRegexWithJavaLangStringBuilder_withNSString_withBoolean_(regex, textKeyValue, false))) appendWithChar:'|'];
  }
  [regex setCharAtWithInt:[regex java_length] - 1 withChar:')'];
  return true;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  JavaLangInteger *iVal = [((id<JavaUtilMap>) nil_chk(lKeyValues_)) getWithId:[((NSString *) nil_chk(value)) java_lowercaseStringWithJRELocale:locale_]];
  if (iVal == nil) {
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(value);
    [sb appendWithNSString:@" not in ("];
    for (NSString * __strong textKeyValue in nil_chk([lKeyValues_ keySet])) {
      [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:textKeyValue])) appendWithChar:' '];
    }
    [sb setCharAtWithInt:[sb java_length] - 1 withChar:')'];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_([sb description]);
  }
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:field_ withInt:[iVal intValue]];
}

- (void)dealloc {
  RELEASE_(locale_);
  RELEASE_(lKeyValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withJavaUtilCalendar:withJavaUtilLocale:);
  methods[1].selector = @selector(addRegexWithOrgApacheCommonsLang3TimeFastDateParser:withJavaLangStringBuilder:);
  methods[2].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lKeyValues_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilCalendar;LJavaUtilLocale;", "addRegex", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaLangStringBuilder;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy = { "CaseInsensitiveTextStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 3, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *self, jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  self->field_ = field;
  JreStrongAssign(&self->locale_, locale);
  id<JavaUtilMap> keyValues = OrgApacheCommonsLang3TimeFastDateParser_getDisplayNamesWithInt_withJavaUtilCalendar_withJavaUtilLocale_(field, definingCalendar, locale);
  JreStrongAssignAndConsume(&self->lKeyValues_, new_JavaUtilHashMap_init());
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(keyValues)) entrySet])) {
    [self->lKeyValues_ putWithId:[((NSString *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) java_lowercaseStringWithJRELocale:locale] withId:[entry_ getValue]];
  }
}

OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, initWithInt_withJavaUtilCalendar_withJavaUtilLocale_, field, definingCalendar, locale)
}

OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, initWithInt_withJavaUtilCalendar_withJavaUtilLocale_, field, definingCalendar, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
  return self;
}

- (jboolean)isNumber {
  return true;
}

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  if ([((OrgApacheCommonsLang3TimeFastDateParser *) nil_chk(parser)) isNextNumber]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(regex)) appendWithNSString:@"(\\p{Nd}{"])) appendWithInt:[parser getFieldWidth]])) appendWithNSString:@"}+)"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(regex)) appendWithNSString:@"(\\p{Nd}++)"];
  }
  return true;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:field_ withInt:[self modifyWithInt:JavaLangInteger_parseIntWithNSString_(value)]];
}

- (jint)modifyWithInt:(jint)iValue {
  return iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(isNumber);
  methods[2].selector = @selector(addRegexWithOrgApacheCommonsLang3TimeFastDateParser:withJavaLangStringBuilder:);
  methods[3].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  methods[4].selector = @selector(modifyWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "addRegex", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaLangStringBuilder;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy = { "NumberStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 5, 1, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  self->field_ = field;
}

OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy, initWithInt_, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_1

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(self, field);
  return self;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  jint iValue = JavaLangInteger_parseIntWithNSString_(value);
  if (iValue < 100) {
    iValue = OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(nil_chk(parser), iValue);
  }
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_YEAR withInt:iValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_1 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_1;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_1 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_1 *new_OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_1, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_1 *create_OrgApacheCommonsLang3TimeFastDateParser_1_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_1, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  [((JavaLangStringBuilder *) nil_chk(regex)) appendWithNSString:validTimeZoneChars_];
  return true;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  JavaUtilTimeZone *tz;
  if ([((NSString *) nil_chk(value)) charAtWithInt:0] == '+' || [value charAtWithInt:0] == '-') {
    tz = JavaUtilTimeZone_getTimeZoneWithNSString_(JreStrcat("$$", @"GMT", value));
  }
  else if ([value java_hasPrefix:@"GMT"]) {
    tz = JavaUtilTimeZone_getTimeZoneWithNSString_(value);
  }
  else {
    tz = [((id<JavaUtilSortedMap>) nil_chk(tzNames_)) getWithId:value];
    if (tz == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", value, @" is not a supported timezone name"));
    }
  }
  [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:tz];
}

- (void)dealloc {
  RELEASE_(validTimeZoneChars_);
  RELEASE_(tzNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilLocale:);
  methods[1].selector = @selector(addRegexWithOrgApacheCommonsLang3TimeFastDateParser:withJavaLangStringBuilder:);
  methods[2].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "validTimeZoneChars_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tzNames_", "LJavaUtilSortedMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "ID", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID, 0x1a, -1, -1, -1, -1 },
    { "LONG_STD", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_STD, 0x1a, -1, -1, -1, -1 },
    { "SHORT_STD", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_STD, 0x1a, -1, -1, -1, -1 },
    { "LONG_DST", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_DST, 0x1a, -1, -1, -1, -1 },
    { "SHORT_DST", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_DST, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;", "addRegex", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaLangStringBuilder;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "Ljava/util/SortedMap<Ljava/lang/String;Ljava/util/TimeZone;>;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy = { "TimeZoneStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 7, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *self, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  JreStrongAssignAndConsume(&self->tzNames_, new_JavaUtilTreeMap_initWithJavaUtilComparator_(JreLoadStatic(NSString, CASE_INSENSITIVE_ORDER)));
  IOSObjectArray *zones = [((JavaTextDateFormatSymbols *) nil_chk(JavaTextDateFormatSymbols_getInstanceWithJavaUtilLocale_(locale))) getZoneStrings];
  {
    IOSObjectArray *a__ = zones;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *zone = *b__++;
      if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(zone), OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID))) java_hasPrefix:@"GMT"]) {
        continue;
      }
      JavaUtilTimeZone *tz = JavaUtilTimeZone_getTimeZoneWithNSString_(IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID));
      if (![self->tzNames_ containsKeyWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_STD)]) {
        [self->tzNames_ putWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_STD) withId:tz];
      }
      if (![self->tzNames_ containsKeyWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_STD)]) {
        [self->tzNames_ putWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_STD) withId:tz];
      }
      if ([((JavaUtilTimeZone *) nil_chk(tz)) useDaylightTime]) {
        if (![self->tzNames_ containsKeyWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_DST)]) {
          [self->tzNames_ putWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_LONG_DST) withId:tz];
        }
        if (![self->tzNames_ containsKeyWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_DST)]) {
          [self->tzNames_ putWithId:IOSObjectArray_Get(zone, OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_SHORT_DST) withId:tz];
        }
      }
    }
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"(GMT[+-]\\d{1,2}:\\d{2}"])) appendWithChar:'|'];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"[+-]\\d{4}"])) appendWithChar:'|'];
  for (NSString * __strong id_ in nil_chk([self->tzNames_ keySet])) {
    [((JavaLangStringBuilder *) nil_chk(OrgApacheCommonsLang3TimeFastDateParser_escapeRegexWithJavaLangStringBuilder_withNSString_withBoolean_(sb, id_, false))) appendWithChar:'|'];
  }
  [sb setCharAtWithInt:[sb java_length] - 1 withChar:')'];
  JreStrongAssign(&self->validTimeZoneChars_, [sb description]);
}

OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, initWithJavaUtilLocale_, locale)
}

OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, initWithJavaUtilLocale_, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy

- (instancetype)initWithNSString:(NSString *)pattern {
  OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(self, pattern);
  return self;
}

- (jboolean)addRegexWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                      withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  [((JavaLangStringBuilder *) nil_chk(regex)) appendWithNSString:pattern_];
  return true;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  if ([((NSString *) nil_chk(value)) isEqual:@"Z"]) {
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC")];
  }
  else {
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(JreStrcat("$$", @"GMT", value))];
  }
}

+ (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithInt:(jint)tokenLen {
  return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(tokenLen);
}

- (void)dealloc {
  RELEASE_(pattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", 0x8, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(addRegexWithOrgApacheCommonsLang3TimeFastDateParser:withJavaLangStringBuilder:);
  methods[2].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  methods[3].selector = @selector(getStrategyWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ISO_8601_1_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "ISO_8601_2_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "ISO_8601_3_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "addRegex", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaLangStringBuilder;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "getStrategy", "I", &OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY, "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy = { "ISO8601TimeZoneStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 4, 10, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}))"));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}\\d{2}))"));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}(?::)\\d{2}))"));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *self, NSString *pattern) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  JreStrongAssign(&self->pattern_, pattern);
}

OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, initWithNSString_, pattern)
}

OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, initWithNSString_, pattern)
}

OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(jint tokenLen) {
  OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initialize();
  switch (tokenLen) {
    case 1:
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY;
    case 2:
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY;
    case 3:
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid number of X");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_2

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithInt:(jint)iValue {
  return iValue - 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_2 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_2;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_2 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_2 *new_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_2, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_2 *create_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_2, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_3

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithInt:(jint)iValue {
  return iValue == 24 ? 0 : iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_3 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_3;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_3 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_3 *new_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_3, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_3 *create_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_3, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_4

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithInt:(jint)iValue {
  return iValue == 12 ? 0 : iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_4 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_4;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_4 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_4 *new_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_4, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_4 *create_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_4, initWithInt_, field)
}
