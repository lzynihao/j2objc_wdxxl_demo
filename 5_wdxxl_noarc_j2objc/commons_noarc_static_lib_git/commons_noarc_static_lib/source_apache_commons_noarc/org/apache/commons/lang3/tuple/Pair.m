//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/tuple/Pair.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "org/apache/commons/lang3/ObjectUtils.h"
#include "org/apache/commons/lang3/builder/CompareToBuilder.h"
#include "org/apache/commons/lang3/tuple/ImmutablePair.h"
#include "org/apache/commons/lang3/tuple/Pair.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong OrgApacheCommonsLang3TuplePair_get_serialVersionUID(void);
#define OrgApacheCommonsLang3TuplePair_serialVersionUID 4954918890077093841LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TuplePair, serialVersionUID, jlong)

__attribute__((unused)) static id OrgApacheCommonsLang3TuplePair_getKey(OrgApacheCommonsLang3TuplePair *self);

@implementation OrgApacheCommonsLang3TuplePair

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TuplePair_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgApacheCommonsLang3TuplePair *)ofWithId:(id)left
                                      withId:(id)right {
  return OrgApacheCommonsLang3TuplePair_ofWithId_withId_(left, right);
}

- (id)getLeft {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getRight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getKey {
  return OrgApacheCommonsLang3TuplePair_getKey(self);
}

- (id)getValue {
  return [self getRight];
}

- (jint)compareToWithId:(OrgApacheCommonsLang3TuplePair *)other {
  return [((OrgApacheCommonsLang3BuilderCompareToBuilder *) nil_chk([((OrgApacheCommonsLang3BuilderCompareToBuilder *) nil_chk([create_OrgApacheCommonsLang3BuilderCompareToBuilder_init() appendWithId:[self getLeft] withId:[((OrgApacheCommonsLang3TuplePair *) nil_chk(other)) getLeft]])) appendWithId:[self getRight] withId:[other getRight]])) toComparison];
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return true;
  }
  if ([JavaUtilMap_Entry_class_() isInstance:obj]) {
    id<JavaUtilMap_Entry> other = (id<JavaUtilMap_Entry>) cast_check(obj, JavaUtilMap_Entry_class_());
    return OrgApacheCommonsLang3ObjectUtils_equalsWithId_withId_(OrgApacheCommonsLang3TuplePair_getKey(self), [((id<JavaUtilMap_Entry>) nil_chk(other)) getKey]) && OrgApacheCommonsLang3ObjectUtils_equalsWithId_withId_([self getValue], [other getValue]);
  }
  return false;
}

- (NSUInteger)hash {
  return (OrgApacheCommonsLang3TuplePair_getKey(self) == nil ? 0 : ((jint) [nil_chk(OrgApacheCommonsLang3TuplePair_getKey(self)) hash])) ^ ([self getValue] == nil ? 0 : ((jint) [nil_chk([self getValue]) hash]));
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithChar:'('])) appendWithId:[self getLeft]])) appendWithChar:','])) appendWithId:[self getRight]])) appendWithChar:')'])) description];
}

- (NSString *)toStringWithNSString:(NSString *)format {
  return NSString_java_formatWithNSString_withNSObjectArray_(format, [IOSObjectArray arrayWithObjects:(id[]){ [self getLeft], [self getRight] } count:2 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TuplePair;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ofWithId:withId:);
  methods[2].selector = @selector(getLeft);
  methods[3].selector = @selector(getRight);
  methods[4].selector = @selector(getKey);
  methods[5].selector = @selector(getValue);
  methods[6].selector = @selector(compareToWithId:);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(toStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3TuplePair_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "of", "LNSObject;LNSObject;", "<L:Ljava/lang/Object;R:Ljava/lang/Object;>(TL;TR;)Lorg/apache/commons/lang3/tuple/Pair<TL;TR;>;", "()TL;", "()TR;", "compareTo", "LOrgApacheCommonsLang3TuplePair;", "(Lorg/apache/commons/lang3/tuple/Pair<TL;TR;>;)I", "equals", "LNSObject;", "hashCode", "toString", "LNSString;", "<L:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map$Entry<TL;TR;>;Ljava/lang/Comparable<Lorg/apache/commons/lang3/tuple/Pair<TL;TR;>;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TuplePair = { "Pair", "org.apache.commons.lang3.tuple", ptrTable, methods, fields, 7, 0x401, 11, 1, -1, -1, -1, 13, -1 };
  return &_OrgApacheCommonsLang3TuplePair;
}

@end

void OrgApacheCommonsLang3TuplePair_init(OrgApacheCommonsLang3TuplePair *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TuplePair *OrgApacheCommonsLang3TuplePair_ofWithId_withId_(id left, id right) {
  OrgApacheCommonsLang3TuplePair_initialize();
  return create_OrgApacheCommonsLang3TupleImmutablePair_initWithId_withId_(left, right);
}

id OrgApacheCommonsLang3TuplePair_getKey(OrgApacheCommonsLang3TuplePair *self) {
  return [self getLeft];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TuplePair)
