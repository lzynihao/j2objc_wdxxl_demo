//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/reflect/TypeUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/GenericDeclaration.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/ClassUtils.h"
#include "org/apache/commons/lang3/ObjectUtils.h"
#include "org/apache/commons/lang3/Validate.h"
#include "org/apache/commons/lang3/reflect/TypeUtils.h"
#include "org/apache/commons/lang3/reflect/Typed.h"

@interface OrgApacheCommonsLang3ReflectTypeUtils ()

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                        withJavaLangReflectType:(id<JavaLangReflectType>)toType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                   withIOSClass:(IOSClass *)toClass;

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
           withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)toParameterizedType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (id<JavaLangReflectType>)unrollVariableAssignmentsWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var
                                                                    withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
            withJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)toGenericArrayType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                withJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)toWildcardType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)toTypeVariable
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (id<JavaLangReflectType>)substituteTypeVariablesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                                          withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                              withIOSClass:(IOSClass *)toClass
                                           withJavaUtilMap:(id<JavaUtilMap>)subtypeVarAssigns;

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType
                                                           withIOSClass:(IOSClass *)toClass
                                                        withJavaUtilMap:(id<JavaUtilMap>)subtypeVarAssigns;

+ (id<JavaUtilMap>)getTypeArgumentsWithIOSClass:(IOSClass *)cls
                                   withIOSClass:(IOSClass *)toClass
                                withJavaUtilMap:(id<JavaUtilMap>)subtypeVarAssigns;

+ (void)mapTypeVariablesToArgumentsWithIOSClass:(IOSClass *)cls
           withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns;

+ (id<JavaLangReflectType>)getClosestParentTypeWithIOSClass:(IOSClass *)cls
                                               withIOSClass:(IOSClass *)superClass;

+ (IOSClass *)getRawTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType;

+ (IOSObjectArray *)unrollBoundsWithJavaUtilMap:(id<JavaUtilMap>)typeArguments
                   withJavaLangReflectTypeArray:(IOSObjectArray *)bounds;

+ (IOSObjectArray *)extractTypeArgumentsFromWithJavaUtilMap:(id<JavaUtilMap>)mappings
                       withJavaLangReflectTypeVariableArray:(IOSObjectArray *)variables;

+ (jboolean)equalsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)p
                               withJavaLangReflectType:(id<JavaLangReflectType>)t;

+ (jboolean)equalsWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)a
                              withJavaLangReflectType:(id<JavaLangReflectType>)t;

+ (jboolean)equalsWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)w
                          withJavaLangReflectType:(id<JavaLangReflectType>)t;

+ (jboolean)equalsWithJavaLangReflectTypeArray:(IOSObjectArray *)t1
                  withJavaLangReflectTypeArray:(IOSObjectArray *)t2;

+ (NSString *)classToStringWithIOSClass:(IOSClass *)c;

+ (NSString *)typeVariableToStringWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)v;

+ (NSString *)parameterizedTypeToStringWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)p;

+ (NSString *)wildcardTypeToStringWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)w;

+ (NSString *)genericArrayTypeToStringWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)g;

+ (JavaLangStringBuilder *)appendAllToWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                                   withNSString:(NSString *)sep
                                   withJavaLangReflectTypeArray:(IOSObjectArray *)types;

@end

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectType> toType, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> type, IOSClass *toClass);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectParameterizedType> toParameterizedType, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_unrollVariableAssignmentsWithJavaLangReflectTypeVariable_withJavaUtilMap_(id<JavaLangReflectTypeVariable> var, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectGenericArrayType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectGenericArrayType> toGenericArrayType, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectWildcardType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectWildcardType> toWildcardType, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectTypeVariable_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectTypeVariable> toTypeVariable, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(id<JavaLangReflectType> type, IOSClass *toClass, id<JavaUtilMap> subtypeVarAssigns);

__attribute__((unused)) static id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(id<JavaLangReflectParameterizedType> parameterizedType, IOSClass *toClass, id<JavaUtilMap> subtypeVarAssigns);

__attribute__((unused)) static id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithIOSClass_withIOSClass_withJavaUtilMap_(IOSClass *cls, IOSClass *toClass, id<JavaUtilMap> subtypeVarAssigns);

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectTypeUtils_mapTypeVariablesToArgumentsWithIOSClass_withJavaLangReflectParameterizedType_withJavaUtilMap_(IOSClass *cls, id<JavaLangReflectParameterizedType> parameterizedType, id<JavaUtilMap> typeVarAssigns);

__attribute__((unused)) static id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_getClosestParentTypeWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *superClass);

__attribute__((unused)) static IOSClass *OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> parameterizedType);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_unrollBoundsWithJavaUtilMap_withJavaLangReflectTypeArray_(id<JavaUtilMap> typeArguments, IOSObjectArray *bounds);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_extractTypeArgumentsFromWithJavaUtilMap_withJavaLangReflectTypeVariableArray_(id<JavaUtilMap> mappings, IOSObjectArray *variables);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectParameterizedType_withJavaLangReflectType_(id<JavaLangReflectParameterizedType> p, id<JavaLangReflectType> t);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectGenericArrayType_withJavaLangReflectType_(id<JavaLangReflectGenericArrayType> a, id<JavaLangReflectType> t);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectWildcardType_withJavaLangReflectType_(id<JavaLangReflectWildcardType> w, id<JavaLangReflectType> t);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *t1, IOSObjectArray *t2);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ReflectTypeUtils_classToStringWithIOSClass_(IOSClass *c);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ReflectTypeUtils_typeVariableToStringWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> v);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ReflectTypeUtils_parameterizedTypeToStringWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> p);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ReflectTypeUtils_wildcardTypeToStringWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> w);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeToStringWithJavaLangReflectGenericArrayType_(id<JavaLangReflectGenericArrayType> g);

__attribute__((unused)) static JavaLangStringBuilder *OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_(JavaLangStringBuilder *buf, NSString *sep, IOSObjectArray *types);

@interface OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder () {
 @public
  IOSObjectArray *upperBounds_;
  IOSObjectArray *lowerBounds_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder, upperBounds_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder, lowerBounds_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *self);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *new_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *create_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init(void);

@interface OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl : NSObject < JavaLangReflectGenericArrayType > {
 @public
  id<JavaLangReflectType> componentType_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

- (id<JavaLangReflectType>)getGenericComponentType;

- (NSString *)description;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl, componentType_, id<JavaLangReflectType>)

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl *new_OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl *create_OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl)

@interface OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl : NSObject < JavaLangReflectParameterizedType > {
 @public
  IOSClass *raw_;
  id<JavaLangReflectType> useOwner_;
  IOSObjectArray *typeArguments_;
}

- (instancetype)initWithIOSClass:(IOSClass *)raw
         withJavaLangReflectType:(id<JavaLangReflectType>)useOwner
    withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

- (id<JavaLangReflectType>)getRawType;

- (id<JavaLangReflectType>)getOwnerType;

- (IOSObjectArray *)getActualTypeArguments;

- (NSString *)description;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl, raw_, IOSClass *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl, useOwner_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl, typeArguments_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl *self, IOSClass *raw, id<JavaLangReflectType> useOwner, IOSObjectArray *typeArguments);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl *new_OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(IOSClass *raw, id<JavaLangReflectType> useOwner, IOSObjectArray *typeArguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl *create_OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(IOSClass *raw, id<JavaLangReflectType> useOwner, IOSObjectArray *typeArguments);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl)

@interface OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl : NSObject < JavaLangReflectWildcardType > {
 @public
  IOSObjectArray *upperBounds_;
  IOSObjectArray *lowerBounds_;
}

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds;

- (IOSObjectArray *)getUpperBounds;

- (IOSObjectArray *)getLowerBounds;

- (NSString *)description;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl, upperBounds_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl, lowerBounds_, IOSObjectArray *)

inline IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_get_EMPTY_BOUNDS(void);
static IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_EMPTY_BOUNDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl, EMPTY_BOUNDS, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl *new_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl *create_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl)

@interface OrgApacheCommonsLang3ReflectTypeUtils_1 : NSObject < OrgApacheCommonsLang3ReflectTyped > {
 @public
  id<JavaLangReflectType> val$type_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)capture$0;

- (id<JavaLangReflectType>)getType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ReflectTypeUtils_1)

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(OrgApacheCommonsLang3ReflectTypeUtils_1 *self, id<JavaLangReflectType> capture$0);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_1 *new_OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectTypeUtils_1 *create_OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ReflectTypeUtils)

id<JavaLangReflectWildcardType> OrgApacheCommonsLang3ReflectTypeUtils_WILDCARD_ALL;

@implementation OrgApacheCommonsLang3ReflectTypeUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ReflectTypeUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                        withJavaLangReflectType:(id<JavaLangReflectType>)toType {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_(type, toType);
}

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                        withJavaLangReflectType:(id<JavaLangReflectType>)toType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(type, toType, typeVarAssigns);
}

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                   withIOSClass:(IOSClass *)toClass {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(type, toClass);
}

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
           withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)toParameterizedType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(type, toParameterizedType, typeVarAssigns);
}

+ (id<JavaLangReflectType>)unrollVariableAssignmentsWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var
                                                                    withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_unrollVariableAssignmentsWithJavaLangReflectTypeVariable_withJavaUtilMap_(var, typeVarAssigns);
}

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
            withJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)toGenericArrayType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectGenericArrayType_withJavaUtilMap_(type, toGenericArrayType, typeVarAssigns);
}

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                withJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)toWildcardType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectWildcardType_withJavaUtilMap_(type, toWildcardType, typeVarAssigns);
}

+ (jboolean)isAssignableWithJavaLangReflectType:(id<JavaLangReflectType>)type
                withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)toTypeVariable
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectTypeVariable_withJavaUtilMap_(type, toTypeVariable, typeVarAssigns);
}

+ (id<JavaLangReflectType>)substituteTypeVariablesWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                                          withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(type, typeVarAssigns);
}

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_(type);
}

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                              withIOSClass:(IOSClass *)toClass {
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_(type, toClass);
}

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                              withIOSClass:(IOSClass *)toClass
                                           withJavaUtilMap:(id<JavaUtilMap>)subtypeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(type, toClass, subtypeVarAssigns);
}

+ (id<JavaUtilMap>)getTypeArgumentsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType
                                                           withIOSClass:(IOSClass *)toClass
                                                        withJavaUtilMap:(id<JavaUtilMap>)subtypeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(parameterizedType, toClass, subtypeVarAssigns);
}

+ (id<JavaUtilMap>)getTypeArgumentsWithIOSClass:(IOSClass *)cls
                                   withIOSClass:(IOSClass *)toClass
                                withJavaUtilMap:(id<JavaUtilMap>)subtypeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithIOSClass_withIOSClass_withJavaUtilMap_(cls, toClass, subtypeVarAssigns);
}

+ (id<JavaUtilMap>)determineTypeArgumentsWithIOSClass:(IOSClass *)cls
                 withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)superType {
  return OrgApacheCommonsLang3ReflectTypeUtils_determineTypeArgumentsWithIOSClass_withJavaLangReflectParameterizedType_(cls, superType);
}

+ (void)mapTypeVariablesToArgumentsWithIOSClass:(IOSClass *)cls
           withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType
                                withJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  OrgApacheCommonsLang3ReflectTypeUtils_mapTypeVariablesToArgumentsWithIOSClass_withJavaLangReflectParameterizedType_withJavaUtilMap_(cls, parameterizedType, typeVarAssigns);
}

+ (id<JavaLangReflectType>)getClosestParentTypeWithIOSClass:(IOSClass *)cls
                                               withIOSClass:(IOSClass *)superClass {
  return OrgApacheCommonsLang3ReflectTypeUtils_getClosestParentTypeWithIOSClass_withIOSClass_(cls, superClass);
}

+ (jboolean)isInstanceWithId:(id)value
     withJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_isInstanceWithId_withJavaLangReflectType_(value, type);
}

+ (IOSObjectArray *)normalizeUpperBoundsWithJavaLangReflectTypeArray:(IOSObjectArray *)bounds {
  return OrgApacheCommonsLang3ReflectTypeUtils_normalizeUpperBoundsWithJavaLangReflectTypeArray_(bounds);
}

+ (IOSObjectArray *)getImplicitBoundsWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable {
  return OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_(typeVariable);
}

+ (IOSObjectArray *)getImplicitUpperBoundsWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)wildcardType {
  return OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(wildcardType);
}

+ (IOSObjectArray *)getImplicitLowerBoundsWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)wildcardType {
  return OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(wildcardType);
}

+ (jboolean)typesSatisfyVariablesWithJavaUtilMap:(id<JavaUtilMap>)typeVarAssigns {
  return OrgApacheCommonsLang3ReflectTypeUtils_typesSatisfyVariablesWithJavaUtilMap_(typeVarAssigns);
}

+ (IOSClass *)getRawTypeWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)parameterizedType {
  return OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(parameterizedType);
}

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type
                        withJavaLangReflectType:(id<JavaLangReflectType>)assigningType {
  return OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectType_withJavaLangReflectType_(type, assigningType);
}

+ (jboolean)isArrayTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_isArrayTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)getArrayComponentTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_getArrayComponentTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)unrollVariablesWithJavaUtilMap:(id<JavaUtilMap>)typeArguments
                                  withJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(typeArguments, type);
}

+ (IOSObjectArray *)unrollBoundsWithJavaUtilMap:(id<JavaUtilMap>)typeArguments
                   withJavaLangReflectTypeArray:(IOSObjectArray *)bounds {
  return OrgApacheCommonsLang3ReflectTypeUtils_unrollBoundsWithJavaUtilMap_withJavaLangReflectTypeArray_(typeArguments, bounds);
}

+ (jboolean)containsTypeVariablesWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectParameterizedType>)parameterizeWithIOSClass:(IOSClass *)raw
                                    withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithIOSClass_withJavaLangReflectTypeArray_(raw, typeArguments);
}

+ (id<JavaLangReflectParameterizedType>)parameterizeWithIOSClass:(IOSClass *)raw
                                                 withJavaUtilMap:(id<JavaUtilMap>)typeArgMappings {
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithIOSClass_withJavaUtilMap_(raw, typeArgMappings);
}

+ (id<JavaLangReflectParameterizedType>)parameterizeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType>)owner
                                                                        withIOSClass:(IOSClass *)raw
                                                        withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(owner, raw, typeArguments);
}

+ (id<JavaLangReflectParameterizedType>)parameterizeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType>)owner
                                                                        withIOSClass:(IOSClass *)raw
                                                                     withJavaUtilMap:(id<JavaUtilMap>)typeArgMappings {
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(owner, raw, typeArgMappings);
}

+ (IOSObjectArray *)extractTypeArgumentsFromWithJavaUtilMap:(id<JavaUtilMap>)mappings
                       withJavaLangReflectTypeVariableArray:(IOSObjectArray *)variables {
  return OrgApacheCommonsLang3ReflectTypeUtils_extractTypeArgumentsFromWithJavaUtilMap_withJavaLangReflectTypeVariableArray_(mappings, variables);
}

+ (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *)wildcardType {
  return OrgApacheCommonsLang3ReflectTypeUtils_wildcardType();
}

+ (id<JavaLangReflectGenericArrayType>)genericArrayTypeWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  return OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeWithJavaLangReflectType_(componentType);
}

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)t1
                  withJavaLangReflectType:(id<JavaLangReflectType>)t2 {
  return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_(t1, t2);
}

+ (jboolean)equalsWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)p
                               withJavaLangReflectType:(id<JavaLangReflectType>)t {
  return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectParameterizedType_withJavaLangReflectType_(p, t);
}

+ (jboolean)equalsWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)a
                              withJavaLangReflectType:(id<JavaLangReflectType>)t {
  return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectGenericArrayType_withJavaLangReflectType_(a, t);
}

+ (jboolean)equalsWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)w
                          withJavaLangReflectType:(id<JavaLangReflectType>)t {
  return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectWildcardType_withJavaLangReflectType_(w, t);
}

+ (jboolean)equalsWithJavaLangReflectTypeArray:(IOSObjectArray *)t1
                  withJavaLangReflectTypeArray:(IOSObjectArray *)t2 {
  return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(t1, t2);
}

+ (NSString *)toStringWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(type);
}

+ (NSString *)toLongStringWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)var {
  return OrgApacheCommonsLang3ReflectTypeUtils_toLongStringWithJavaLangReflectTypeVariable_(var);
}

+ (id<OrgApacheCommonsLang3ReflectTyped>)wrapWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_wrapWithJavaLangReflectType_(type);
}

+ (id<OrgApacheCommonsLang3ReflectTyped>)wrapWithIOSClass:(IOSClass *)type {
  return OrgApacheCommonsLang3ReflectTypeUtils_wrapWithIOSClass_(type);
}

+ (NSString *)classToStringWithIOSClass:(IOSClass *)c {
  return OrgApacheCommonsLang3ReflectTypeUtils_classToStringWithIOSClass_(c);
}

+ (NSString *)typeVariableToStringWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)v {
  return OrgApacheCommonsLang3ReflectTypeUtils_typeVariableToStringWithJavaLangReflectTypeVariable_(v);
}

+ (NSString *)parameterizedTypeToStringWithJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)p {
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizedTypeToStringWithJavaLangReflectParameterizedType_(p);
}

+ (NSString *)wildcardTypeToStringWithJavaLangReflectWildcardType:(id<JavaLangReflectWildcardType>)w {
  return OrgApacheCommonsLang3ReflectTypeUtils_wildcardTypeToStringWithJavaLangReflectWildcardType_(w);
}

+ (NSString *)genericArrayTypeToStringWithJavaLangReflectGenericArrayType:(id<JavaLangReflectGenericArrayType>)g {
  return OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeToStringWithJavaLangReflectGenericArrayType_(g);
}

+ (JavaLangStringBuilder *)appendAllToWithJavaLangStringBuilder:(JavaLangStringBuilder *)buf
                                                   withNSString:(NSString *)sep
                                   withJavaLangReflectTypeArray:(IOSObjectArray *)types {
  return OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_(buf, sep, types);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0xa, 0, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0xa, 0, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0xa, 0, 11, -1, 12, -1, -1 },
    { NULL, "Z", 0xa, 0, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0xa, 0, 15, -1, 16, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 20, 4, -1, 23, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 20, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 20, 26, -1, 27, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 20, 28, -1, 29, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 30, 31, -1, 32, -1, -1 },
    { NULL, "V", 0xa, 33, 34, -1, 35, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 36, 37, -1, 38, -1, -1 },
    { NULL, "Z", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x9, 43, 44, -1, 45, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x9, 46, 47, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x9, 48, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 49, 50, -1, 51, -1, -1 },
    { NULL, "LIOSClass;", 0xa, 52, 21, -1, 53, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 52, 1, -1, 54, -1, -1 },
    { NULL, "Z", 0x9, 55, 56, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 57, 56, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 58, 59, -1, 60, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0xa, 61, 62, -1, 63, -1, -1 },
    { NULL, "Z", 0x9, 64, 56, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x99, 65, 66, -1, 67, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x19, 65, 68, -1, 69, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x99, 70, 71, -1, 72, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x19, 70, 24, -1, 73, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0xa, 74, 75, -1, 76, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectGenericArrayType;", 0x9, 77, 56, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 78, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 78, 79, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 78, 80, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 78, 81, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 78, 82, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 84, 44, -1, 85, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ReflectTyped;", 0x9, 86, 56, -1, 87, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ReflectTyped;", 0x9, 86, 88, -1, 89, -1, -1 },
    { NULL, "LNSString;", 0xa, 90, 88, -1, 91, -1, -1 },
    { NULL, "LNSString;", 0xa, 92, 44, -1, 85, -1, -1 },
    { NULL, "LNSString;", 0xa, 93, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 94, 47, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 95, 96, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x8a, 97, 98, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isAssignableWithJavaLangReflectType:withJavaLangReflectType:);
  methods[2].selector = @selector(isAssignableWithJavaLangReflectType:withJavaLangReflectType:withJavaUtilMap:);
  methods[3].selector = @selector(isAssignableWithJavaLangReflectType:withIOSClass:);
  methods[4].selector = @selector(isAssignableWithJavaLangReflectType:withJavaLangReflectParameterizedType:withJavaUtilMap:);
  methods[5].selector = @selector(unrollVariableAssignmentsWithJavaLangReflectTypeVariable:withJavaUtilMap:);
  methods[6].selector = @selector(isAssignableWithJavaLangReflectType:withJavaLangReflectGenericArrayType:withJavaUtilMap:);
  methods[7].selector = @selector(isAssignableWithJavaLangReflectType:withJavaLangReflectWildcardType:withJavaUtilMap:);
  methods[8].selector = @selector(isAssignableWithJavaLangReflectType:withJavaLangReflectTypeVariable:withJavaUtilMap:);
  methods[9].selector = @selector(substituteTypeVariablesWithJavaLangReflectType:withJavaUtilMap:);
  methods[10].selector = @selector(getTypeArgumentsWithJavaLangReflectParameterizedType:);
  methods[11].selector = @selector(getTypeArgumentsWithJavaLangReflectType:withIOSClass:);
  methods[12].selector = @selector(getTypeArgumentsWithJavaLangReflectType:withIOSClass:withJavaUtilMap:);
  methods[13].selector = @selector(getTypeArgumentsWithJavaLangReflectParameterizedType:withIOSClass:withJavaUtilMap:);
  methods[14].selector = @selector(getTypeArgumentsWithIOSClass:withIOSClass:withJavaUtilMap:);
  methods[15].selector = @selector(determineTypeArgumentsWithIOSClass:withJavaLangReflectParameterizedType:);
  methods[16].selector = @selector(mapTypeVariablesToArgumentsWithIOSClass:withJavaLangReflectParameterizedType:withJavaUtilMap:);
  methods[17].selector = @selector(getClosestParentTypeWithIOSClass:withIOSClass:);
  methods[18].selector = @selector(isInstanceWithId:withJavaLangReflectType:);
  methods[19].selector = @selector(normalizeUpperBoundsWithJavaLangReflectTypeArray:);
  methods[20].selector = @selector(getImplicitBoundsWithJavaLangReflectTypeVariable:);
  methods[21].selector = @selector(getImplicitUpperBoundsWithJavaLangReflectWildcardType:);
  methods[22].selector = @selector(getImplicitLowerBoundsWithJavaLangReflectWildcardType:);
  methods[23].selector = @selector(typesSatisfyVariablesWithJavaUtilMap:);
  methods[24].selector = @selector(getRawTypeWithJavaLangReflectParameterizedType:);
  methods[25].selector = @selector(getRawTypeWithJavaLangReflectType:withJavaLangReflectType:);
  methods[26].selector = @selector(isArrayTypeWithJavaLangReflectType:);
  methods[27].selector = @selector(getArrayComponentTypeWithJavaLangReflectType:);
  methods[28].selector = @selector(unrollVariablesWithJavaUtilMap:withJavaLangReflectType:);
  methods[29].selector = @selector(unrollBoundsWithJavaUtilMap:withJavaLangReflectTypeArray:);
  methods[30].selector = @selector(containsTypeVariablesWithJavaLangReflectType:);
  methods[31].selector = @selector(parameterizeWithIOSClass:withJavaLangReflectTypeArray:);
  methods[32].selector = @selector(parameterizeWithIOSClass:withJavaUtilMap:);
  methods[33].selector = @selector(parameterizeWithOwnerWithJavaLangReflectType:withIOSClass:withJavaLangReflectTypeArray:);
  methods[34].selector = @selector(parameterizeWithOwnerWithJavaLangReflectType:withIOSClass:withJavaUtilMap:);
  methods[35].selector = @selector(extractTypeArgumentsFromWithJavaUtilMap:withJavaLangReflectTypeVariableArray:);
  methods[36].selector = @selector(wildcardType);
  methods[37].selector = @selector(genericArrayTypeWithJavaLangReflectType:);
  methods[38].selector = @selector(equalsWithJavaLangReflectType:withJavaLangReflectType:);
  methods[39].selector = @selector(equalsWithJavaLangReflectParameterizedType:withJavaLangReflectType:);
  methods[40].selector = @selector(equalsWithJavaLangReflectGenericArrayType:withJavaLangReflectType:);
  methods[41].selector = @selector(equalsWithJavaLangReflectWildcardType:withJavaLangReflectType:);
  methods[42].selector = @selector(equalsWithJavaLangReflectTypeArray:withJavaLangReflectTypeArray:);
  methods[43].selector = @selector(toStringWithJavaLangReflectType:);
  methods[44].selector = @selector(toLongStringWithJavaLangReflectTypeVariable:);
  methods[45].selector = @selector(wrapWithJavaLangReflectType:);
  methods[46].selector = @selector(wrapWithIOSClass:);
  methods[47].selector = @selector(classToStringWithIOSClass:);
  methods[48].selector = @selector(typeVariableToStringWithJavaLangReflectTypeVariable:);
  methods[49].selector = @selector(parameterizedTypeToStringWithJavaLangReflectParameterizedType:);
  methods[50].selector = @selector(wildcardTypeToStringWithJavaLangReflectWildcardType:);
  methods[51].selector = @selector(genericArrayTypeToStringWithJavaLangReflectGenericArrayType:);
  methods[52].selector = @selector(appendAllToWithJavaLangStringBuilder:withNSString:withJavaLangReflectTypeArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WILDCARD_ALL", "LJavaLangReflectWildcardType;", .constantValue.asLong = 0, 0x19, -1, 99, -1, -1 },
  };
  static const void *ptrTable[] = { "isAssignable", "LJavaLangReflectType;LJavaLangReflectType;", "LJavaLangReflectType;LJavaLangReflectType;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Z", "LJavaLangReflectType;LIOSClass;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;)Z", "LJavaLangReflectType;LJavaLangReflectParameterizedType;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Z", "unrollVariableAssignments", "LJavaLangReflectTypeVariable;LJavaUtilMap;", "(Ljava/lang/reflect/TypeVariable<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/lang/reflect/Type;", "LJavaLangReflectType;LJavaLangReflectGenericArrayType;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/lang/reflect/GenericArrayType;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Z", "LJavaLangReflectType;LJavaLangReflectWildcardType;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/lang/reflect/WildcardType;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Z", "LJavaLangReflectType;LJavaLangReflectTypeVariable;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/lang/reflect/TypeVariable<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Z", "substituteTypeVariables", "LJavaLangReflectType;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/lang/reflect/Type;", "getTypeArguments", "LJavaLangReflectParameterizedType;", "(Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;)Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;", "LJavaLangReflectType;LIOSClass;LJavaUtilMap;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;", "LJavaLangReflectParameterizedType;LIOSClass;LJavaUtilMap;", "(Ljava/lang/reflect/ParameterizedType;Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;", "LIOSClass;LIOSClass;LJavaUtilMap;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;", "determineTypeArguments", "LIOSClass;LJavaLangReflectParameterizedType;", "(Ljava/lang/Class<*>;Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;", "mapTypeVariablesToArguments", "LIOSClass;LJavaLangReflectParameterizedType;LJavaUtilMap;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)V", "getClosestParentType", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;", "isInstance", "LNSObject;LJavaLangReflectType;", "normalizeUpperBounds", "[LJavaLangReflectType;", "getImplicitBounds", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)[Ljava/lang/reflect/Type;", "getImplicitUpperBounds", "LJavaLangReflectWildcardType;", "getImplicitLowerBounds", "typesSatisfyVariables", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Z", "getRawType", "(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class<*>;", "(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;", "isArrayType", "LJavaLangReflectType;", "getArrayComponentType", "unrollVariables", "LJavaUtilMap;LJavaLangReflectType;", "(Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;", "unrollBounds", "LJavaUtilMap;[LJavaLangReflectType;", "(Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;[Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;", "containsTypeVariables", "parameterize", "LIOSClass;[LJavaLangReflectType;", "(Ljava/lang/Class<*>;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;", "LIOSClass;LJavaUtilMap;", "(Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/lang/reflect/ParameterizedType;", "parameterizeWithOwner", "LJavaLangReflectType;LIOSClass;[LJavaLangReflectType;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;)Ljava/lang/reflect/ParameterizedType;", "extractTypeArgumentsFrom", "LJavaUtilMap;[LJavaLangReflectTypeVariable;", "(Ljava/util/Map<Ljava/lang/reflect/TypeVariable<*>;Ljava/lang/reflect/Type;>;[Ljava/lang/reflect/TypeVariable<*>;)[Ljava/lang/reflect/Type;", "genericArrayType", "equals", "LJavaLangReflectParameterizedType;LJavaLangReflectType;", "LJavaLangReflectGenericArrayType;LJavaLangReflectType;", "LJavaLangReflectWildcardType;LJavaLangReflectType;", "[LJavaLangReflectType;[LJavaLangReflectType;", "toString", "toLongString", "(Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/String;", "wrap", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;)Lorg/apache/commons/lang3/reflect/Typed<TT;>;", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/apache/commons/lang3/reflect/Typed<TT;>;", "classToString", "(Ljava/lang/Class<*>;)Ljava/lang/String;", "typeVariableToString", "parameterizedTypeToString", "wildcardTypeToString", "genericArrayTypeToString", "LJavaLangReflectGenericArrayType;", "appendAllTo", "LJavaLangStringBuilder;LNSString;[LJavaLangReflectType;", &OrgApacheCommonsLang3ReflectTypeUtils_WILDCARD_ALL, "LOrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder;LOrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl;LOrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl;LOrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeUtils = { "TypeUtils", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x1, 53, 1, -1, 100, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ReflectTypeUtils class]) {
    JreStrongAssign(&OrgApacheCommonsLang3ReflectTypeUtils_WILDCARD_ALL, [((OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *) nil_chk(([((OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *) nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_wildcardType())) withUpperBoundsWithJavaLangReflectTypeArray:[IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()]]))) build]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ReflectTypeUtils)
  }
}

@end

void OrgApacheCommonsLang3ReflectTypeUtils_init(OrgApacheCommonsLang3ReflectTypeUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3ReflectTypeUtils *new_OrgApacheCommonsLang3ReflectTypeUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectTypeUtils, init)
}

OrgApacheCommonsLang3ReflectTypeUtils *create_OrgApacheCommonsLang3ReflectTypeUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectTypeUtils, init)
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> type, id<JavaLangReflectType> toType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(type, toType, nil);
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectType> toType, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (toType == nil || [toType isKindOfClass:[IOSClass class]]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(type, (IOSClass *) cast_chk(toType, [IOSClass class]));
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:toType]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(type, (id<JavaLangReflectParameterizedType>) cast_check(toType, JavaLangReflectParameterizedType_class_()), typeVarAssigns);
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:toType]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectGenericArrayType_withJavaUtilMap_(type, (id<JavaLangReflectGenericArrayType>) cast_check(toType, JavaLangReflectGenericArrayType_class_()), typeVarAssigns);
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:toType]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectWildcardType_withJavaUtilMap_(type, (id<JavaLangReflectWildcardType>) cast_check(toType, JavaLangReflectWildcardType_class_()), typeVarAssigns);
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:toType]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectTypeVariable_withJavaUtilMap_(type, (id<JavaLangReflectTypeVariable>) cast_check(toType, JavaLangReflectTypeVariable_class_()), typeVarAssigns);
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"found an unhandled type: ", toType));
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> type, IOSClass *toClass) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (type == nil) {
    return toClass == nil || ![toClass isPrimitive];
  }
  if (toClass == nil) {
    return false;
  }
  if ([toClass isEqual:type]) {
    return true;
  }
  if ([type isKindOfClass:[IOSClass class]]) {
    return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_((IOSClass *) cast_chk(type, [IOSClass class]), toClass);
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_((id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_())), toClass);
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    {
      IOSObjectArray *a__ = [((id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_())) getBounds];
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(bound, toClass)) {
          return true;
        }
      }
    }
    return false;
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return [toClass isEqual:NSObject_class_()] || ([toClass isArray] && OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_([((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())) getGenericComponentType], [toClass getComponentType]));
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return false;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"found an unhandled type: ", type));
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectParameterizedType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectParameterizedType> toParameterizedType, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (type == nil) {
    return true;
  }
  if (toParameterizedType == nil) {
    return false;
  }
  if ([toParameterizedType isEqual:type]) {
    return true;
  }
  IOSClass *toClass = OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(toParameterizedType);
  id<JavaUtilMap> fromTypeVarAssigns = OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(type, toClass, nil);
  if (fromTypeVarAssigns == nil) {
    return false;
  }
  if ([fromTypeVarAssigns isEmpty]) {
    return true;
  }
  id<JavaUtilMap> toTypeVarAssigns = OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(toParameterizedType, toClass, typeVarAssigns);
  for (id<JavaLangReflectTypeVariable> __strong var in nil_chk([((id<JavaUtilMap>) nil_chk(toTypeVarAssigns)) keySet])) {
    id<JavaLangReflectType> toTypeArg = OrgApacheCommonsLang3ReflectTypeUtils_unrollVariableAssignmentsWithJavaLangReflectTypeVariable_withJavaUtilMap_(var, toTypeVarAssigns);
    id<JavaLangReflectType> fromTypeArg = OrgApacheCommonsLang3ReflectTypeUtils_unrollVariableAssignmentsWithJavaLangReflectTypeVariable_withJavaUtilMap_(var, fromTypeVarAssigns);
    if (fromTypeArg != nil && ![((id<JavaLangReflectType>) nil_chk(toTypeArg)) isEqual:fromTypeArg] && !([JavaLangReflectWildcardType_class_() isInstance:toTypeArg] && OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(fromTypeArg, toTypeArg, typeVarAssigns))) {
      return false;
    }
  }
  return true;
}

id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_unrollVariableAssignmentsWithJavaLangReflectTypeVariable_withJavaUtilMap_(id<JavaLangReflectTypeVariable> var, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  id<JavaLangReflectType> result;
  do {
    result = [((id<JavaUtilMap>) nil_chk(typeVarAssigns)) getWithId:var];
    if ([JavaLangReflectTypeVariable_class_() isInstance:result] && ![((id<JavaLangReflectType>) nil_chk(result)) isEqual:var]) {
      var = (id<JavaLangReflectTypeVariable>) cast_check(result, JavaLangReflectTypeVariable_class_());
      continue;
    }
    break;
  }
  while (true);
  return result;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectGenericArrayType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectGenericArrayType> toGenericArrayType, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (type == nil) {
    return true;
  }
  if (toGenericArrayType == nil) {
    return false;
  }
  if ([toGenericArrayType isEqual:type]) {
    return true;
  }
  id<JavaLangReflectType> toComponentType = [toGenericArrayType getGenericComponentType];
  if ([type isKindOfClass:[IOSClass class]]) {
    IOSClass *cls = (IOSClass *) cast_chk(type, [IOSClass class]);
    return [cls isArray] && OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_([cls getComponentType], toComponentType, typeVarAssigns);
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_([((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())) getGenericComponentType], toComponentType, typeVarAssigns);
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    {
      IOSObjectArray *a__ = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_()));
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_(bound, toGenericArrayType)) {
          return true;
        }
      }
    }
    return false;
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    {
      IOSObjectArray *a__ = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_((id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_()));
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_(bound, toGenericArrayType)) {
          return true;
        }
      }
    }
    return false;
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    return false;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"found an unhandled type: ", type));
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectWildcardType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectWildcardType> toWildcardType, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (type == nil) {
    return true;
  }
  if (toWildcardType == nil) {
    return false;
  }
  if ([toWildcardType isEqual:type]) {
    return true;
  }
  IOSObjectArray *toUpperBounds = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(toWildcardType);
  IOSObjectArray *toLowerBounds = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(toWildcardType);
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    id<JavaLangReflectWildcardType> wildcardType = (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_());
    IOSObjectArray *upperBounds = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(wildcardType);
    IOSObjectArray *lowerBounds = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(wildcardType);
    {
      IOSObjectArray *a__ = toUpperBounds;
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> toBound = *b__++;
        toBound = OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(toBound, typeVarAssigns);
        {
          IOSObjectArray *a__ = upperBounds;
          id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectType> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectType> bound = *b__++;
            if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(bound, toBound, typeVarAssigns)) {
              return false;
            }
          }
        }
      }
    }
    {
      IOSObjectArray *a__ = toLowerBounds;
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> toBound = *b__++;
        toBound = OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(toBound, typeVarAssigns);
        {
          IOSObjectArray *a__ = lowerBounds;
          id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<JavaLangReflectType> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<JavaLangReflectType> bound = *b__++;
            if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(toBound, bound, typeVarAssigns)) {
              return false;
            }
          }
        }
      }
    }
    return true;
  }
  {
    IOSObjectArray *a__ = toUpperBounds;
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> toBound = *b__++;
      if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(type, OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(toBound, typeVarAssigns), typeVarAssigns)) {
        return false;
      }
    }
  }
  {
    IOSObjectArray *a__ = toLowerBounds;
    id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> toBound = *b__++;
      if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(toBound, typeVarAssigns), type, typeVarAssigns)) {
        return false;
      }
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectTypeVariable_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaLangReflectTypeVariable> toTypeVariable, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (type == nil) {
    return true;
  }
  if (toTypeVariable == nil) {
    return false;
  }
  if ([toTypeVariable isEqual:type]) {
    return true;
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    IOSObjectArray *bounds = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_((id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_()));
    {
      IOSObjectArray *a__ = bounds;
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectTypeVariable_withJavaUtilMap_(bound, toTypeVariable, typeVarAssigns)) {
          return true;
        }
      }
    }
  }
  if ([type isKindOfClass:[IOSClass class]] || [JavaLangReflectParameterizedType_class_() isInstance:type] || [JavaLangReflectGenericArrayType_class_() isInstance:type] || [JavaLangReflectWildcardType_class_() isInstance:type]) {
    return false;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"found an unhandled type: ", type));
}

id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(id<JavaLangReflectType> type, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([JavaLangReflectTypeVariable_class_() isInstance:type] && typeVarAssigns != nil) {
    id<JavaLangReflectType> replacementType = [typeVarAssigns getWithId:type];
    if (replacementType == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"missing assignment type for type variable ", type));
    }
    return replacementType;
  }
  return type;
}

id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(type, OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(type), nil);
}

id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> type, IOSClass *toClass) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(type, toClass, nil);
}

id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(id<JavaLangReflectType> type, IOSClass *toClass, id<JavaUtilMap> subtypeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithIOSClass_withIOSClass_withJavaUtilMap_((IOSClass *) cast_chk(type, [IOSClass class]), toClass, subtypeVarAssigns);
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_((id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_()), toClass, subtypeVarAssigns);
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_([((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType], [((IOSClass *) nil_chk(toClass)) isArray] ? [toClass getComponentType] : toClass, subtypeVarAssigns);
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    {
      IOSObjectArray *a__ = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_()));
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(bound, toClass)) {
          return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(bound, toClass, subtypeVarAssigns);
        }
      }
    }
    return nil;
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    {
      IOSObjectArray *a__ = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_((id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_()));
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(bound, toClass)) {
          return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(bound, toClass, subtypeVarAssigns);
        }
      }
    }
    return nil;
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"found an unhandled type: ", type));
}

id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(id<JavaLangReflectParameterizedType> parameterizedType, IOSClass *toClass, id<JavaUtilMap> subtypeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  IOSClass *cls = OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(parameterizedType);
  if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(cls, toClass)) {
    return nil;
  }
  id<JavaLangReflectType> ownerType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getOwnerType];
  id<JavaUtilMap> typeVarAssigns;
  if ([JavaLangReflectParameterizedType_class_() isInstance:ownerType]) {
    id<JavaLangReflectParameterizedType> parameterizedOwnerType = (id<JavaLangReflectParameterizedType>) cast_check(ownerType, JavaLangReflectParameterizedType_class_());
    typeVarAssigns = OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(parameterizedOwnerType, OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(parameterizedOwnerType), subtypeVarAssigns);
  }
  else {
    typeVarAssigns = subtypeVarAssigns == nil ? create_JavaUtilHashMap_init() : create_JavaUtilHashMap_initWithJavaUtilMap_(subtypeVarAssigns);
  }
  IOSObjectArray *typeArgs = [parameterizedType getActualTypeArguments];
  IOSObjectArray *typeParams = [((IOSClass *) nil_chk(cls)) getTypeParameters];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(typeParams))->size_; i++) {
    id<JavaLangReflectType> typeArg = IOSObjectArray_Get(nil_chk(typeArgs), i);
    [((id<JavaUtilMap>) nil_chk(typeVarAssigns)) putWithId:IOSObjectArray_Get(typeParams, i) withId:[typeVarAssigns containsKeyWithId:typeArg] ? [typeVarAssigns getWithId:typeArg] : typeArg];
  }
  if ([((IOSClass *) nil_chk(toClass)) isEqual:cls]) {
    return typeVarAssigns;
  }
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(OrgApacheCommonsLang3ReflectTypeUtils_getClosestParentTypeWithIOSClass_withIOSClass_(cls, toClass), toClass, typeVarAssigns);
}

id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithIOSClass_withIOSClass_withJavaUtilMap_(IOSClass *cls, IOSClass *toClass, id<JavaUtilMap> subtypeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(cls, toClass)) {
    return nil;
  }
  if ([((IOSClass *) nil_chk(cls)) isPrimitive]) {
    if ([((IOSClass *) nil_chk(toClass)) isPrimitive]) {
      return create_JavaUtilHashMap_init();
    }
    cls = OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(cls);
  }
  JavaUtilHashMap *typeVarAssigns = subtypeVarAssigns == nil ? create_JavaUtilHashMap_init() : create_JavaUtilHashMap_initWithJavaUtilMap_(subtypeVarAssigns);
  if ([((IOSClass *) nil_chk(toClass)) isEqual:cls]) {
    return typeVarAssigns;
  }
  return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(OrgApacheCommonsLang3ReflectTypeUtils_getClosestParentTypeWithIOSClass_withIOSClass_(cls, toClass), toClass, typeVarAssigns);
}

id<JavaUtilMap> OrgApacheCommonsLang3ReflectTypeUtils_determineTypeArgumentsWithIOSClass_withJavaLangReflectParameterizedType_(IOSClass *cls, id<JavaLangReflectParameterizedType> superType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(cls, @"cls is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(superType, @"superType is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  IOSClass *superClass = OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(superType);
  if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(cls, superClass)) {
    return nil;
  }
  if ([((IOSClass *) nil_chk(cls)) isEqual:superClass]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_withIOSClass_withJavaUtilMap_(superType, superClass, nil);
  }
  id<JavaLangReflectType> midType = OrgApacheCommonsLang3ReflectTypeUtils_getClosestParentTypeWithIOSClass_withIOSClass_(cls, superClass);
  if ([midType isKindOfClass:[IOSClass class]]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_determineTypeArgumentsWithIOSClass_withJavaLangReflectParameterizedType_((IOSClass *) cast_chk(midType, [IOSClass class]), superType);
  }
  id<JavaLangReflectParameterizedType> midParameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(midType, JavaLangReflectParameterizedType_class_());
  IOSClass *midClass = OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(midParameterizedType);
  id<JavaUtilMap> typeVarAssigns = OrgApacheCommonsLang3ReflectTypeUtils_determineTypeArgumentsWithIOSClass_withJavaLangReflectParameterizedType_(midClass, superType);
  OrgApacheCommonsLang3ReflectTypeUtils_mapTypeVariablesToArgumentsWithIOSClass_withJavaLangReflectParameterizedType_withJavaUtilMap_(cls, midParameterizedType, typeVarAssigns);
  return typeVarAssigns;
}

void OrgApacheCommonsLang3ReflectTypeUtils_mapTypeVariablesToArgumentsWithIOSClass_withJavaLangReflectParameterizedType_withJavaUtilMap_(IOSClass *cls, id<JavaLangReflectParameterizedType> parameterizedType, id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  id<JavaLangReflectType> ownerType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getOwnerType];
  if ([JavaLangReflectParameterizedType_class_() isInstance:ownerType]) {
    OrgApacheCommonsLang3ReflectTypeUtils_mapTypeVariablesToArgumentsWithIOSClass_withJavaLangReflectParameterizedType_withJavaUtilMap_(cls, (id<JavaLangReflectParameterizedType>) cast_check(ownerType, JavaLangReflectParameterizedType_class_()), typeVarAssigns);
  }
  IOSObjectArray *typeArgs = [parameterizedType getActualTypeArguments];
  IOSObjectArray *typeVars = [((IOSClass *) nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(parameterizedType))) getTypeParameters];
  id<JavaUtilList> typeVarList = JavaUtilArrays_asListWithNSObjectArray_([((IOSClass *) nil_chk(cls)) getTypeParameters]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(typeArgs))->size_; i++) {
    id<JavaLangReflectTypeVariable> typeVar = IOSObjectArray_Get(nil_chk(typeVars), i);
    id<JavaLangReflectType> typeArg = IOSObjectArray_Get(typeArgs, i);
    if ([((id<JavaUtilList>) nil_chk(typeVarList)) containsWithId:typeArg] && [((id<JavaUtilMap>) nil_chk(typeVarAssigns)) containsKeyWithId:typeVar]) {
      [((id<JavaUtilMap>) nil_chk(typeVarAssigns)) putWithId:(id<JavaLangReflectTypeVariable>) cast_check(typeArg, JavaLangReflectTypeVariable_class_()) withId:[typeVarAssigns getWithId:typeVar]];
    }
  }
}

id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_getClosestParentTypeWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *superClass) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([((IOSClass *) nil_chk(superClass)) isInterface]) {
    IOSObjectArray *interfaceTypes = [((IOSClass *) nil_chk(cls)) getGenericInterfaces];
    id<JavaLangReflectType> genericInterface = nil;
    {
      IOSObjectArray *a__ = interfaceTypes;
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> midType = *b__++;
        IOSClass *midClass = nil;
        if ([JavaLangReflectParameterizedType_class_() isInstance:midType]) {
          midClass = OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_((id<JavaLangReflectParameterizedType>) cast_check(midType, JavaLangReflectParameterizedType_class_()));
        }
        else if ([midType isKindOfClass:[IOSClass class]]) {
          midClass = (IOSClass *) cast_chk(midType, [IOSClass class]);
        }
        else {
          @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Unexpected generic interface type found: ", midType));
        }
        if (OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(midClass, superClass) && OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_(genericInterface, midClass)) {
          genericInterface = midType;
        }
      }
    }
    if (genericInterface != nil) {
      return genericInterface;
    }
  }
  return [((IOSClass *) nil_chk(cls)) getGenericSuperclass];
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isInstanceWithId_withJavaLangReflectType_(id value, id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (type == nil) {
    return false;
  }
  return value == nil ? !([type isKindOfClass:[IOSClass class]]) || ![((IOSClass *) cast_chk(type, [IOSClass class])) isPrimitive] : OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_([value java_getClass], type, nil);
}

IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_normalizeUpperBoundsWithJavaLangReflectTypeArray_(IOSObjectArray *bounds) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(bounds, @"null value specified for bounds array", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  if (((IOSObjectArray *) nil_chk(bounds))->size_ < 2) {
    return bounds;
  }
  id<JavaUtilSet> types = create_JavaUtilHashSet_initWithInt_(bounds->size_);
  {
    IOSObjectArray *a__ = bounds;
    id<JavaLangReflectType> const *b__ = a__->buffer_;
    id<JavaLangReflectType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectType> type1 = *b__++;
      jboolean subtypeFound = false;
      {
        IOSObjectArray *a__ = bounds;
        id<JavaLangReflectType> const *b__ = a__->buffer_;
        id<JavaLangReflectType> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<JavaLangReflectType> type2 = *b__++;
          if (type1 != type2 && OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(type2, type1, nil)) {
            subtypeFound = true;
            break;
          }
        }
      }
      if (!subtypeFound) {
        [types addWithId:type1];
      }
    }
  }
  return [types toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[types size] type:JavaLangReflectType_class_()]];
}

IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(typeVariable, @"typeVariable is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  IOSObjectArray *bounds = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getBounds];
  return ((IOSObjectArray *) nil_chk(bounds))->size_ == 0 ? [IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()] : OrgApacheCommonsLang3ReflectTypeUtils_normalizeUpperBoundsWithJavaLangReflectTypeArray_(bounds);
}

IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcardType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(wildcardType, @"wildcardType is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  IOSObjectArray *bounds = [((id<JavaLangReflectWildcardType>) nil_chk(wildcardType)) getUpperBounds];
  return ((IOSObjectArray *) nil_chk(bounds))->size_ == 0 ? [IOSObjectArray arrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()] : OrgApacheCommonsLang3ReflectTypeUtils_normalizeUpperBoundsWithJavaLangReflectTypeArray_(bounds);
}

IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> wildcardType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(wildcardType, @"wildcardType is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  IOSObjectArray *bounds = [((id<JavaLangReflectWildcardType>) nil_chk(wildcardType)) getLowerBounds];
  return ((IOSObjectArray *) nil_chk(bounds))->size_ == 0 ? [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:JavaLangReflectType_class_()] : bounds;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_typesSatisfyVariablesWithJavaUtilMap_(id<JavaUtilMap> typeVarAssigns) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(typeVarAssigns, @"typeVarAssigns is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(typeVarAssigns)) entrySet])) {
    id<JavaLangReflectTypeVariable> typeVar = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id<JavaLangReflectType> type = [entry_ getValue];
    {
      IOSObjectArray *a__ = OrgApacheCommonsLang3ReflectTypeUtils_getImplicitBoundsWithJavaLangReflectTypeVariable_(typeVar);
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> bound = *b__++;
        if (!OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withJavaLangReflectType_withJavaUtilMap_(type, OrgApacheCommonsLang3ReflectTypeUtils_substituteTypeVariablesWithJavaLangReflectType_withJavaUtilMap_(bound, typeVarAssigns), typeVarAssigns)) {
          return false;
        }
      }
    }
  }
  return true;
}

IOSClass *OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> parameterizedType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
  if (!([rawType isKindOfClass:[IOSClass class]])) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Wait... What!? Type of rawType: ", rawType));
  }
  return (IOSClass *) cast_chk(rawType, [IOSClass class]);
}

IOSClass *OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> type, id<JavaLangReflectType> assigningType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    return (IOSClass *) cast_chk(type, [IOSClass class]);
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectParameterizedType_((id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_()));
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    if (assigningType == nil) {
      return nil;
    }
    id genericDeclaration = [((id<JavaLangReflectTypeVariable>) nil_chk(((id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_())))) getGenericDeclaration];
    if (!([genericDeclaration isKindOfClass:[IOSClass class]])) {
      return nil;
    }
    id<JavaUtilMap> typeVarAssigns = OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_(assigningType, (IOSClass *) cast_chk(genericDeclaration, [IOSClass class]));
    if (typeVarAssigns == nil) {
      return nil;
    }
    id<JavaLangReflectType> typeArgument = [typeVarAssigns getWithId:type];
    if (typeArgument == nil) {
      return nil;
    }
    return OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectType_withJavaLangReflectType_(typeArgument, assigningType);
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    IOSClass *rawComponentType = OrgApacheCommonsLang3ReflectTypeUtils_getRawTypeWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType], assigningType);
    return [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(rawComponentType, 0)) java_getClass];
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return nil;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unknown type: ", type));
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_isArrayTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return [JavaLangReflectGenericArrayType_class_() isInstance:type] || ([type isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) isArray]);
}

id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_getArrayComponentTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    IOSClass *clazz = (IOSClass *) cast_chk(type, [IOSClass class]);
    return [((IOSClass *) nil_chk(clazz)) isArray] ? [clazz getComponentType] : nil;
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType];
  }
  return nil;
}

id<JavaLangReflectType> OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(id<JavaUtilMap> typeArguments, id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (typeArguments == nil) {
    typeArguments = JavaUtilCollections_emptyMap();
  }
  if (OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(type)) {
    if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
      return OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(typeArguments, [((id<JavaUtilMap>) nil_chk(typeArguments)) getWithId:type]);
    }
    if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
      id<JavaLangReflectParameterizedType> p = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
      id<JavaUtilMap> parameterizedTypeArguments;
      if ([((id<JavaLangReflectParameterizedType>) nil_chk(p)) getOwnerType] == nil) {
        parameterizedTypeArguments = typeArguments;
      }
      else {
        parameterizedTypeArguments = create_JavaUtilHashMap_initWithJavaUtilMap_(typeArguments);
        [parameterizedTypeArguments putAllWithJavaUtilMap:OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectParameterizedType_(p)];
      }
      IOSObjectArray *args = [p getActualTypeArguments];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
        id<JavaLangReflectType> unrolled = OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(parameterizedTypeArguments, IOSObjectArray_Get(args, i));
        if (unrolled != nil) {
          IOSObjectArray_Set(args, i, unrolled);
        }
      }
      return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_([p getOwnerType], (IOSClass *) cast_chk([p getRawType], [IOSClass class]), args);
    }
    if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
      id<JavaLangReflectWildcardType> wild = (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_());
      return [((OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *) nil_chk([((OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *) nil_chk([((OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *) nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_wildcardType())) withUpperBoundsWithJavaLangReflectTypeArray:OrgApacheCommonsLang3ReflectTypeUtils_unrollBoundsWithJavaUtilMap_withJavaLangReflectTypeArray_(typeArguments, [((id<JavaLangReflectWildcardType>) nil_chk(wild)) getUpperBounds])])) withLowerBoundsWithJavaLangReflectTypeArray:OrgApacheCommonsLang3ReflectTypeUtils_unrollBoundsWithJavaUtilMap_withJavaLangReflectTypeArray_(typeArguments, [wild getLowerBounds])])) build];
    }
  }
  return type;
}

IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_unrollBoundsWithJavaUtilMap_withJavaLangReflectTypeArray_(id<JavaUtilMap> typeArguments, IOSObjectArray *bounds) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  IOSObjectArray *result = bounds;
  jint i = 0;
  for (; i < ((IOSObjectArray *) nil_chk(result))->size_; i++) {
    id<JavaLangReflectType> unrolled = OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(typeArguments, IOSObjectArray_Get(result, i));
    if (unrolled == nil) {
      result = OrgApacheCommonsLang3ArrayUtils_removeWithNSObjectArray_withInt_(result, i--);
    }
    else {
      IOSObjectArray_Set(result, i, unrolled);
    }
  }
  return result;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return true;
  }
  if ([type isKindOfClass:[IOSClass class]]) {
    return ((IOSObjectArray *) nil_chk([((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) getTypeParameters]))->size_ > 0;
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    {
      IOSObjectArray *a__ = [((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments];
      id<JavaLangReflectType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangReflectType> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangReflectType> arg = *b__++;
        if (OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(arg)) {
          return true;
        }
      }
    }
    return false;
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    id<JavaLangReflectWildcardType> wild = (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_());
    return OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(wild)), 0)) || OrgApacheCommonsLang3ReflectTypeUtils_containsTypeVariablesWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(wild)), 0));
  }
  return false;
}

id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithIOSClass_withJavaLangReflectTypeArray_(IOSClass *raw, IOSObjectArray *typeArguments) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(nil, raw, typeArguments);
}

id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithIOSClass_withJavaUtilMap_(IOSClass *raw, id<JavaUtilMap> typeArgMappings) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(raw, @"raw class is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(typeArgMappings, @"typeArgMappings is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(nil, raw, OrgApacheCommonsLang3ReflectTypeUtils_extractTypeArgumentsFromWithJavaUtilMap_withJavaLangReflectTypeVariableArray_(typeArgMappings, [((IOSClass *) nil_chk(raw)) getTypeParameters]));
}

id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(id<JavaLangReflectType> owner, IOSClass *raw, IOSObjectArray *typeArguments) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(raw, @"raw class is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  id<JavaLangReflectType> useOwner;
  if ([((IOSClass *) nil_chk(raw)) getEnclosingClass] == nil) {
    OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(owner == nil, @"no owner allowed for top-level %s", [IOSObjectArray arrayWithObjects:(id[]){ raw } count:1 type:NSObject_class_()]);
    useOwner = nil;
  }
  else if (owner == nil) {
    useOwner = [raw getEnclosingClass];
  }
  else {
    OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(OrgApacheCommonsLang3ReflectTypeUtils_isAssignableWithJavaLangReflectType_withIOSClass_(owner, [raw getEnclosingClass]), @"%s is invalid owner type for parameterized %s", [IOSObjectArray arrayWithObjects:(id[]){ owner, raw } count:2 type:NSObject_class_()]);
    useOwner = owner;
  }
  OrgApacheCommonsLang3Validate_noNullElementsWithNSObjectArray_withNSString_withNSObjectArray_(typeArguments, @"null type argument at index %s", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(((IOSObjectArray *) nil_chk([raw getTypeParameters]))->size_ == ((IOSObjectArray *) nil_chk(typeArguments))->size_, @"invalid number of type parameters specified: expected %s, got %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk([raw getTypeParameters]))->size_), JavaLangInteger_valueOfWithInt_(typeArguments->size_) } count:2 type:NSObject_class_()]);
  return create_OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(raw, useOwner, typeArguments);
}

id<JavaLangReflectParameterizedType> OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaUtilMap_(id<JavaLangReflectType> owner, IOSClass *raw, id<JavaUtilMap> typeArgMappings) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(raw, @"raw class is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(typeArgMappings, @"typeArgMappings is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  return OrgApacheCommonsLang3ReflectTypeUtils_parameterizeWithOwnerWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeArray_(owner, raw, OrgApacheCommonsLang3ReflectTypeUtils_extractTypeArgumentsFromWithJavaUtilMap_withJavaLangReflectTypeVariableArray_(typeArgMappings, [((IOSClass *) nil_chk(raw)) getTypeParameters]));
}

IOSObjectArray *OrgApacheCommonsLang3ReflectTypeUtils_extractTypeArgumentsFromWithJavaUtilMap_withJavaLangReflectTypeVariableArray_(id<JavaUtilMap> mappings, IOSObjectArray *variables) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(variables))->size_ type:JavaLangReflectType_class_()];
  jint index = 0;
  {
    IOSObjectArray *a__ = variables;
    id<JavaLangReflectTypeVariable> const *b__ = a__->buffer_;
    id<JavaLangReflectTypeVariable> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangReflectTypeVariable> var = *b__++;
      OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_([((id<JavaUtilMap>) nil_chk(mappings)) containsKeyWithId:var], @"missing argument mapping for %s", [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(var) } count:1 type:NSObject_class_()]);
      IOSObjectArray_Set(result, index++, [mappings getWithId:var]);
    }
  }
  return result;
}

OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *OrgApacheCommonsLang3ReflectTypeUtils_wildcardType() {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return create_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init();
}

id<JavaLangReflectGenericArrayType> OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return create_OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(componentType, @"componentType is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]));
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> t1, id<JavaLangReflectType> t2) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (OrgApacheCommonsLang3ObjectUtils_equalsWithId_withId_(t1, t2)) {
    return true;
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:t1]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectParameterizedType_withJavaLangReflectType_((id<JavaLangReflectParameterizedType>) cast_check(t1, JavaLangReflectParameterizedType_class_()), t2);
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:t1]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectGenericArrayType_withJavaLangReflectType_((id<JavaLangReflectGenericArrayType>) cast_check(t1, JavaLangReflectGenericArrayType_class_()), t2);
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:t1]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectWildcardType_withJavaLangReflectType_((id<JavaLangReflectWildcardType>) cast_check(t1, JavaLangReflectWildcardType_class_()), t2);
  }
  return false;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectParameterizedType_withJavaLangReflectType_(id<JavaLangReflectParameterizedType> p, id<JavaLangReflectType> t) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([JavaLangReflectParameterizedType_class_() isInstance:t]) {
    id<JavaLangReflectParameterizedType> other = (id<JavaLangReflectParameterizedType>) cast_check(t, JavaLangReflectParameterizedType_class_());
    if (OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectParameterizedType>) nil_chk(p)) getRawType], [((id<JavaLangReflectParameterizedType>) nil_chk(other)) getRawType]) && OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_([p getOwnerType], [other getOwnerType])) {
      return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([p getActualTypeArguments], [other getActualTypeArguments]);
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectGenericArrayType_withJavaLangReflectType_(id<JavaLangReflectGenericArrayType> a, id<JavaLangReflectType> t) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return [JavaLangReflectGenericArrayType_class_() isInstance:t] && OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(a)) getGenericComponentType], [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(t, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType]);
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectWildcardType_withJavaLangReflectType_(id<JavaLangReflectWildcardType> w, id<JavaLangReflectType> t) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if ([JavaLangReflectWildcardType_class_() isInstance:t]) {
    id<JavaLangReflectWildcardType> other = (id<JavaLangReflectWildcardType>) cast_check(t, JavaLangReflectWildcardType_class_());
    return OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(w), OrgApacheCommonsLang3ReflectTypeUtils_getImplicitLowerBoundsWithJavaLangReflectWildcardType_(other)) && OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(w), OrgApacheCommonsLang3ReflectTypeUtils_getImplicitUpperBoundsWithJavaLangReflectWildcardType_(other));
  }
  return true;
}

jboolean OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *t1, IOSObjectArray *t2) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  if (((IOSObjectArray *) nil_chk(t1))->size_ == ((IOSObjectArray *) nil_chk(t2))->size_) {
    for (jint i = 0; i < t1->size_; i++) {
      if (!OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_(IOSObjectArray_Get(t1, i), IOSObjectArray_Get(t2, i))) {
        return false;
      }
    }
    return true;
  }
  return false;
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_(type);
  if ([type isKindOfClass:[IOSClass class]]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_classToStringWithIOSClass_((IOSClass *) cast_chk(type, [IOSClass class]));
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_parameterizedTypeToStringWithJavaLangReflectParameterizedType_((id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_()));
  }
  if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_wildcardTypeToStringWithJavaLangReflectWildcardType_((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_()));
  }
  if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_typeVariableToStringWithJavaLangReflectTypeVariable_((id<JavaLangReflectTypeVariable>) cast_check(type, JavaLangReflectTypeVariable_class_()));
  }
  if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    return OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeToStringWithJavaLangReflectGenericArrayType_((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_()));
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheCommonsLang3ObjectUtils_identityToStringWithId_(type));
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_toLongStringWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> var) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(var, @"var is null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  id<JavaLangReflectGenericDeclaration> d = [((id<JavaLangReflectTypeVariable>) nil_chk((var))) getGenericDeclaration];
  if ([d isKindOfClass:[IOSClass class]]) {
    IOSClass *c = (IOSClass *) cast_chk(d, [IOSClass class]);
    while (true) {
      if ([((IOSClass *) nil_chk(c)) getEnclosingClass] == nil) {
        [buf insertWithInt:0 withNSString:[c getName]];
        break;
      }
      [((JavaLangStringBuilder *) nil_chk([buf insertWithInt:0 withNSString:[c getSimpleName]])) insertWithInt:0 withChar:'.'];
      c = [c getEnclosingClass];
    }
  }
  else if ([JavaLangReflectType_class_() isInstance:d]) {
    [buf appendWithNSString:OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_((id<JavaLangReflectType>) cast_check(d, JavaLangReflectType_class_()))];
  }
  else {
    [buf appendWithId:d];
  }
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:':'])) appendWithNSString:OrgApacheCommonsLang3ReflectTypeUtils_typeVariableToStringWithJavaLangReflectTypeVariable_(var)])) description];
}

id<OrgApacheCommonsLang3ReflectTyped> OrgApacheCommonsLang3ReflectTypeUtils_wrapWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return create_OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(type);
}

id<OrgApacheCommonsLang3ReflectTyped> OrgApacheCommonsLang3ReflectTypeUtils_wrapWithIOSClass_(IOSClass *type) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return OrgApacheCommonsLang3ReflectTypeUtils_wrapWithJavaLangReflectType_(type);
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_classToStringWithIOSClass_(IOSClass *c) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  if ([((IOSClass *) nil_chk(c)) getEnclosingClass] != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:OrgApacheCommonsLang3ReflectTypeUtils_classToStringWithIOSClass_([c getEnclosingClass])])) appendWithChar:'.'])) appendWithNSString:[c getSimpleName]];
  }
  else {
    [buf appendWithNSString:[c getName]];
  }
  if (((IOSObjectArray *) nil_chk([c getTypeParameters]))->size_ > 0) {
    [buf appendWithChar:'<'];
    OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_(buf, @", ", [c getTypeParameters]);
    [buf appendWithChar:'>'];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_typeVariableToStringWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> v) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithNSString_([((id<JavaLangReflectTypeVariable>) nil_chk(v)) getName]);
  IOSObjectArray *bounds = [v getBounds];
  if (((IOSObjectArray *) nil_chk(bounds))->size_ > 0 && !(bounds->size_ == 1 && [NSObject_class_() isEqual:IOSObjectArray_Get(bounds, 0)])) {
    [buf appendWithNSString:@" extends "];
    OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_(buf, @" & ", [v getBounds]);
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_parameterizedTypeToStringWithJavaLangReflectParameterizedType_(id<JavaLangReflectParameterizedType> p) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  id<JavaLangReflectType> useOwner = [((id<JavaLangReflectParameterizedType>) nil_chk(p)) getOwnerType];
  IOSClass *raw = (IOSClass *) cast_chk([p getRawType], [IOSClass class]);
  IOSObjectArray *typeArguments = [p getActualTypeArguments];
  if (useOwner == nil) {
    [buf appendWithNSString:[((IOSClass *) nil_chk(raw)) getName]];
  }
  else {
    if ([useOwner isKindOfClass:[IOSClass class]]) {
      [buf appendWithNSString:[((IOSClass *) cast_chk(useOwner, [IOSClass class])) getName]];
    }
    else {
      [buf appendWithNSString:[useOwner description]];
    }
    [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'.'])) appendWithNSString:[((IOSClass *) nil_chk(raw)) getSimpleName]];
  }
  [((JavaLangStringBuilder *) nil_chk(OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_([buf appendWithChar:'<'], @", ", typeArguments))) appendWithChar:'>'];
  return [buf description];
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_wildcardTypeToStringWithJavaLangReflectWildcardType_(id<JavaLangReflectWildcardType> w) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  JavaLangStringBuilder *buf = [create_JavaLangStringBuilder_init() appendWithChar:'?'];
  IOSObjectArray *lowerBounds = [((id<JavaLangReflectWildcardType>) nil_chk(w)) getLowerBounds];
  IOSObjectArray *upperBounds = [w getUpperBounds];
  if (((IOSObjectArray *) nil_chk(lowerBounds))->size_ > 1 || (lowerBounds->size_ == 1 && IOSObjectArray_Get(lowerBounds, 0) != nil)) {
    OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@" super "], @" & ", lowerBounds);
  }
  else if (((IOSObjectArray *) nil_chk(upperBounds))->size_ > 1 || (upperBounds->size_ == 1 && ![NSObject_class_() isEqual:IOSObjectArray_Get(upperBounds, 0)])) {
    OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_([((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:@" extends "], @" & ", upperBounds);
  }
  return [((JavaLangStringBuilder *) nil_chk(buf)) description];
}

NSString *OrgApacheCommonsLang3ReflectTypeUtils_genericArrayTypeToStringWithJavaLangReflectGenericArrayType_(id<JavaLangReflectGenericArrayType> g) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s[]", [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(g)) getGenericComponentType]) } count:1 type:NSObject_class_()]);
}

JavaLangStringBuilder *OrgApacheCommonsLang3ReflectTypeUtils_appendAllToWithJavaLangStringBuilder_withNSString_withJavaLangReflectTypeArray_(JavaLangStringBuilder *buf, NSString *sep, IOSObjectArray *types) {
  OrgApacheCommonsLang3ReflectTypeUtils_initialize();
  OrgApacheCommonsLang3Validate_notEmptyWithNSObjectArray_(OrgApacheCommonsLang3Validate_noNullElementsWithNSObjectArray_(types));
  if (((IOSObjectArray *) nil_chk(types))->size_ > 0) {
    [((JavaLangStringBuilder *) nil_chk(buf)) appendWithNSString:OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(IOSObjectArray_Get(types, 0))];
    for (jint i = 1; i < types->size_; i++) {
      [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:sep])) appendWithNSString:OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(IOSObjectArray_Get(types, i))];
    }
  }
  return buf;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectTypeUtils)

@implementation OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *)withUpperBoundsWithJavaLangReflectTypeArray:(IOSObjectArray *)bounds {
  JreStrongAssign(&self->upperBounds_, bounds);
  return self;
}

- (OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *)withLowerBoundsWithJavaLangReflectTypeArray:(IOSObjectArray *)bounds {
  JreStrongAssign(&self->lowerBounds_, bounds);
  return self;
}

- (id<JavaLangReflectWildcardType>)build {
  return create_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(upperBounds_, lowerBounds_);
}

- (void)dealloc {
  RELEASE_(upperBounds_);
  RELEASE_(lowerBounds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder;", 0x81, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectWildcardType;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(withUpperBoundsWithJavaLangReflectTypeArray:);
  methods[2].selector = @selector(withLowerBoundsWithJavaLangReflectTypeArray:);
  methods[3].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "upperBounds_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lowerBounds_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withUpperBounds", "[LJavaLangReflectType;", "withLowerBounds", "LOrgApacheCommonsLang3ReflectTypeUtils;", "Ljava/lang/Object;Lorg/apache/commons/lang3/builder/Builder<Ljava/lang/reflect/WildcardType;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder = { "WildcardTypeBuilder", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x9, 4, 2, 3, -1, -1, 4, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder;
}

@end

void OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *new_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder, init)
}

OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder *create_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeBuilder)

@implementation OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(self, componentType);
  return self;
}

- (id<JavaLangReflectType>)getGenericComponentType {
  return componentType_;
}

- (NSString *)description {
  return OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(self);
}

- (jboolean)isEqual:(id)obj {
  return obj == self || ([JavaLangReflectGenericArrayType_class_() isInstance:obj] && OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectGenericArrayType_withJavaLangReflectType_(self, (id<JavaLangReflectGenericArrayType>) cast_check(obj, JavaLangReflectGenericArrayType_class_())));
}

- (NSUInteger)hash {
  jint result = JreLShift32(67, 4);
  result |= ((jint) [((id<JavaLangReflectType>) nil_chk(componentType_)) hash]);
  return result;
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(componentType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:);
  methods[1].selector = @selector(getGenericComponentType);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "componentType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;", "toString", "equals", "LNSObject;", "hashCode", "LOrgApacheCommonsLang3ReflectTypeUtils;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl = { "GenericArrayTypeImpl", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x1a, 5, 1, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl;
}

@end

void OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType) {
  NSObject_init(self);
  JreStrongAssign(&self->componentType_, componentType);
}

OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl *new_OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl *create_OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectTypeUtils_GenericArrayTypeImpl)

@implementation OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl

- (instancetype)initWithIOSClass:(IOSClass *)raw
         withJavaLangReflectType:(id<JavaLangReflectType>)useOwner
    withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(self, raw, useOwner, typeArguments);
  return self;
}

- (id<JavaLangReflectType>)getRawType {
  return raw_;
}

- (id<JavaLangReflectType>)getOwnerType {
  return useOwner_;
}

- (IOSObjectArray *)getActualTypeArguments {
  return [((IOSObjectArray *) nil_chk(typeArguments_)) java_clone];
}

- (NSString *)description {
  return OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(self);
}

- (jboolean)isEqual:(id)obj {
  return obj == self || ([JavaLangReflectParameterizedType_class_() isInstance:obj] && OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectParameterizedType_withJavaLangReflectType_(self, ((id<JavaLangReflectParameterizedType>) cast_check(obj, JavaLangReflectParameterizedType_class_()))));
}

- (NSUInteger)hash {
  jint result = JreLShift32(71, 4);
  result |= ((jint) [((IOSClass *) nil_chk(raw_)) hash]);
  JreLShiftAssignInt(&result, 4);
  result |= OrgApacheCommonsLang3ObjectUtils_hashCodeWithId_(useOwner_);
  JreLShiftAssignInt(&result, 8);
  result |= JavaUtilArrays_hashCodeWithNSObjectArray_(typeArguments_);
  return result;
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(raw_);
  RELEASE_(useOwner_);
  RELEASE_(typeArguments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:withJavaLangReflectType:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getRawType);
  methods[2].selector = @selector(getOwnerType);
  methods[3].selector = @selector(getActualTypeArguments);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "raw_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "useOwner_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeArguments_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaLangReflectType;[LJavaLangReflectType;", "(Ljava/lang/Class<*>;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V", "toString", "equals", "LNSObject;", "hashCode", "Ljava/lang/Class<*>;", "LOrgApacheCommonsLang3ReflectTypeUtils;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl = { "ParameterizedTypeImpl", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x1a, 7, 3, 7, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl;
}

@end

void OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl *self, IOSClass *raw, id<JavaLangReflectType> useOwner, IOSObjectArray *typeArguments) {
  NSObject_init(self);
  JreStrongAssign(&self->raw_, raw);
  JreStrongAssign(&self->useOwner_, useOwner);
  JreStrongAssign(&self->typeArguments_, typeArguments);
}

OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl *new_OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(IOSClass *raw, id<JavaLangReflectType> useOwner, IOSObjectArray *typeArguments) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl, initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_, raw, useOwner, typeArguments)
}

OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl *create_OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl_initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_(IOSClass *raw, id<JavaLangReflectType> useOwner, IOSObjectArray *typeArguments) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl, initWithIOSClass_withJavaLangReflectType_withJavaLangReflectTypeArray_, raw, useOwner, typeArguments)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectTypeUtils_ParameterizedTypeImpl)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl)

@implementation OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds {
  OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(self, upperBounds, lowerBounds);
  return self;
}

- (IOSObjectArray *)getUpperBounds {
  return [((IOSObjectArray *) nil_chk(upperBounds_)) java_clone];
}

- (IOSObjectArray *)getLowerBounds {
  return [((IOSObjectArray *) nil_chk(lowerBounds_)) java_clone];
}

- (NSString *)description {
  return OrgApacheCommonsLang3ReflectTypeUtils_toStringWithJavaLangReflectType_(self);
}

- (jboolean)isEqual:(id)obj {
  return obj == self || ([JavaLangReflectWildcardType_class_() isInstance:obj] && OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectWildcardType_withJavaLangReflectType_(self, (id<JavaLangReflectWildcardType>) cast_check(obj, JavaLangReflectWildcardType_class_())));
}

- (NSUInteger)hash {
  jint result = JreLShift32(73, 8);
  result |= JavaUtilArrays_hashCodeWithNSObjectArray_(upperBounds_);
  JreLShiftAssignInt(&result, 8);
  result |= JavaUtilArrays_hashCodeWithNSObjectArray_(lowerBounds_);
  return result;
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

- (void)dealloc {
  RELEASE_(upperBounds_);
  RELEASE_(lowerBounds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectTypeArray:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getUpperBounds);
  methods[2].selector = @selector(getLowerBounds);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_BOUNDS", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "upperBounds_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lowerBounds_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaLangReflectType;[LJavaLangReflectType;", "toString", "equals", "LNSObject;", "hashCode", &OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_EMPTY_BOUNDS, "LOrgApacheCommonsLang3ReflectTypeUtils;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl = { "WildcardTypeImpl", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x1a, 6, 3, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_EMPTY_BOUNDS, [IOSObjectArray newArrayWithLength:0 type:JavaLangReflectType_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl)
  }
}

@end

void OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  NSObject_init(self);
  JreStrongAssign(&self->upperBounds_, OrgApacheCommonsLang3ObjectUtils_defaultIfNullWithId_withId_(upperBounds, OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_EMPTY_BOUNDS));
  JreStrongAssign(&self->lowerBounds_, OrgApacheCommonsLang3ObjectUtils_defaultIfNullWithId_withId_(lowerBounds, OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_EMPTY_BOUNDS));
}

OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl *new_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl *create_OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectTypeUtils_WildcardTypeImpl)

@implementation OrgApacheCommonsLang3ReflectTypeUtils_1

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)capture$0 {
  OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(self, capture$0);
  return self;
}

- (id<JavaLangReflectType>)getType {
  return val$type_;
}

- (void)dealloc {
  RELEASE_(val$type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectType:);
  methods[1].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$type_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3ReflectTypeUtils;", "wrapWithJavaLangReflectType:", "Ljava/lang/Object;Lorg/apache/commons/lang3/reflect/Typed<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectTypeUtils_1 = { "", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, 2, -1 };
  return &_OrgApacheCommonsLang3ReflectTypeUtils_1;
}

@end

void OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(OrgApacheCommonsLang3ReflectTypeUtils_1 *self, id<JavaLangReflectType> capture$0) {
  JreStrongAssign(&self->val$type_, capture$0);
  NSObject_init(self);
}

OrgApacheCommonsLang3ReflectTypeUtils_1 *new_OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_1, initWithJavaLangReflectType_, capture$0)
}

OrgApacheCommonsLang3ReflectTypeUtils_1 *create_OrgApacheCommonsLang3ReflectTypeUtils_1_initWithJavaLangReflectType_(id<JavaLangReflectType> capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectTypeUtils_1, initWithJavaLangReflectType_, capture$0)
}
