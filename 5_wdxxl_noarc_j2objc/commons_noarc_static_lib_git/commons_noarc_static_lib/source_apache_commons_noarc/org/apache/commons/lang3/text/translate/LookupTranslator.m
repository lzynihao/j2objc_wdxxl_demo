//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/text/translate/LookupTranslator.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "org/apache/commons/lang3/text/translate/CharSequenceTranslator.h"
#include "org/apache/commons/lang3/text/translate/LookupTranslator.h"

@interface OrgApacheCommonsLang3TextTranslateLookupTranslator () {
 @public
  JavaUtilHashMap *lookupMap_;
  JavaUtilHashSet *prefixSet_;
  jint shortest_;
  jint longest_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextTranslateLookupTranslator, lookupMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TextTranslateLookupTranslator, prefixSet_, JavaUtilHashSet *)

@implementation OrgApacheCommonsLang3TextTranslateLookupTranslator

- (instancetype)initWithJavaLangCharSequenceArray2:(IOSObjectArray *)lookup {
  OrgApacheCommonsLang3TextTranslateLookupTranslator_initWithJavaLangCharSequenceArray2_(self, lookup);
  return self;
}

- (jint)translateWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                  withInt:(jint)index
                         withJavaIoWriter:(JavaIoWriter *)outArg {
  if ([((JavaUtilHashSet *) nil_chk(prefixSet_)) containsWithId:JavaLangCharacter_valueOfWithChar_([((id<JavaLangCharSequence>) nil_chk(input)) charAtWithInt:index])]) {
    jint max = longest_;
    if (index + longest_ > [input java_length]) {
      max = [input java_length] - index;
    }
    for (jint i = max; i >= shortest_; i--) {
      id<JavaLangCharSequence> subSeq = [input subSequenceFrom:index to:index + i];
      NSString *result = [((JavaUtilHashMap *) nil_chk(lookupMap_)) getWithId:[((id<JavaLangCharSequence>) nil_chk(subSeq)) description]];
      if (result != nil) {
        [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:result];
        return i;
      }
    }
  }
  return 0;
}

- (void)dealloc {
  RELEASE_(lookupMap_);
  RELEASE_(prefixSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangCharSequenceArray2:);
  methods[1].selector = @selector(translateWithJavaLangCharSequence:withInt:withJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lookupMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "prefixSet_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "shortest_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "longest_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[[LJavaLangCharSequence;", "translate", "LJavaLangCharSequence;ILJavaIoWriter;", "LJavaIoIOException;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/HashSet<Ljava/lang/Character;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TextTranslateLookupTranslator = { "LookupTranslator", "org.apache.commons.lang3.text.translate", ptrTable, methods, fields, 7, 0x1, 2, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TextTranslateLookupTranslator;
}

@end

void OrgApacheCommonsLang3TextTranslateLookupTranslator_initWithJavaLangCharSequenceArray2_(OrgApacheCommonsLang3TextTranslateLookupTranslator *self, IOSObjectArray *lookup) {
  OrgApacheCommonsLang3TextTranslateCharSequenceTranslator_init(self);
  JreStrongAssignAndConsume(&self->lookupMap_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->prefixSet_, new_JavaUtilHashSet_init());
  jint _shortest = JavaLangInteger_MAX_VALUE;
  jint _longest = 0;
  if (lookup != nil) {
    {
      IOSObjectArray *a__ = lookup;
      IOSObjectArray * const *b__ = a__->buffer_;
      IOSObjectArray * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSObjectArray *seq = *b__++;
        [self->lookupMap_ putWithId:[((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(nil_chk(seq), 0))) description] withId:[((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(seq, 1))) description]];
        [self->prefixSet_ addWithId:JavaLangCharacter_valueOfWithChar_([((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(seq, 0))) charAtWithInt:0])];
        jint sz = [((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(seq, 0))) java_length];
        if (sz < _shortest) {
          _shortest = sz;
        }
        if (sz > _longest) {
          _longest = sz;
        }
      }
    }
  }
  self->shortest_ = _shortest;
  self->longest_ = _longest;
}

OrgApacheCommonsLang3TextTranslateLookupTranslator *new_OrgApacheCommonsLang3TextTranslateLookupTranslator_initWithJavaLangCharSequenceArray2_(IOSObjectArray *lookup) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TextTranslateLookupTranslator, initWithJavaLangCharSequenceArray2_, lookup)
}

OrgApacheCommonsLang3TextTranslateLookupTranslator *create_OrgApacheCommonsLang3TextTranslateLookupTranslator_initWithJavaLangCharSequenceArray2_(IOSObjectArray *lookup) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TextTranslateLookupTranslator, initWithJavaLangCharSequenceArray2_, lookup)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TextTranslateLookupTranslator)
