//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/net/QuotedPrintableCodec.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Character.h"
#include "java/nio/charset/Charset.h"
#include "java/util/BitSet.h"
#include "org/apache/commons/codec/Charsets.h"
#include "org/apache/commons/codec/DecoderException.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/binary/StringUtils.h"
#include "org/apache/commons/codec/net/QuotedPrintableCodec.h"
#include "org/apache/commons/codec/net/Utils.h"

@interface OrgApacheCommonsCodecNetQuotedPrintableCodec () {
 @public
  JavaNioCharsetCharset *charset_;
  jboolean strict_;
}

+ (jint)encodeQuotedPrintableWithInt:(jint)b
     withJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buffer;

+ (jint)getUnsignedOctetWithInt:(jint)index
                  withByteArray:(IOSByteArray *)bytes;

+ (jint)encodeByteWithInt:(jint)b
              withBoolean:(jboolean)encode
withJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buffer;

+ (jboolean)isWhitespaceWithInt:(jint)b;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecNetQuotedPrintableCodec, charset_, JavaNioCharsetCharset *)

inline JavaUtilBitSet *OrgApacheCommonsCodecNetQuotedPrintableCodec_get_PRINTABLE_CHARS(void);
static JavaUtilBitSet *OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecNetQuotedPrintableCodec, PRINTABLE_CHARS, JavaUtilBitSet *)

inline jbyte OrgApacheCommonsCodecNetQuotedPrintableCodec_get_ESCAPE_CHAR(void);
#define OrgApacheCommonsCodecNetQuotedPrintableCodec_ESCAPE_CHAR 61
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecNetQuotedPrintableCodec, ESCAPE_CHAR, jbyte)

inline jbyte OrgApacheCommonsCodecNetQuotedPrintableCodec_get_TAB(void);
#define OrgApacheCommonsCodecNetQuotedPrintableCodec_TAB 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecNetQuotedPrintableCodec, TAB, jbyte)

inline jbyte OrgApacheCommonsCodecNetQuotedPrintableCodec_get_SPACE(void);
#define OrgApacheCommonsCodecNetQuotedPrintableCodec_SPACE 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecNetQuotedPrintableCodec, SPACE, jbyte)

inline jbyte OrgApacheCommonsCodecNetQuotedPrintableCodec_get_CR(void);
#define OrgApacheCommonsCodecNetQuotedPrintableCodec_CR 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecNetQuotedPrintableCodec, CR, jbyte)

inline jbyte OrgApacheCommonsCodecNetQuotedPrintableCodec_get_LF(void);
#define OrgApacheCommonsCodecNetQuotedPrintableCodec_LF 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecNetQuotedPrintableCodec, LF, jbyte)

inline jint OrgApacheCommonsCodecNetQuotedPrintableCodec_get_SAFE_LENGTH(void);
#define OrgApacheCommonsCodecNetQuotedPrintableCodec_SAFE_LENGTH 73
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecNetQuotedPrintableCodec, SAFE_LENGTH, jint)

__attribute__((unused)) static jint OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithInt_withJavaIoByteArrayOutputStream_(jint b, JavaIoByteArrayOutputStream *buffer);

__attribute__((unused)) static jint OrgApacheCommonsCodecNetQuotedPrintableCodec_getUnsignedOctetWithInt_withByteArray_(jint index, IOSByteArray *bytes);

__attribute__((unused)) static jint OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(jint b, jboolean encode, JavaIoByteArrayOutputStream *buffer);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecNetQuotedPrintableCodec_isWhitespaceWithInt_(jint b);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecNetQuotedPrintableCodec)

@implementation OrgApacheCommonsCodecNetQuotedPrintableCodec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)strict {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithBoolean_(self, strict);
  return self;
}

- (instancetype)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_(self, charset);
  return self;
}

- (instancetype)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                                  withBoolean:(jboolean)strict {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(self, charset, strict);
  return self;
}

- (instancetype)initWithNSString:(NSString *)charsetName {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithNSString_(self, charsetName);
  return self;
}

+ (jint)encodeQuotedPrintableWithInt:(jint)b
     withJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buffer {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithInt_withJavaIoByteArrayOutputStream_(b, buffer);
}

+ (jint)getUnsignedOctetWithInt:(jint)index
                  withByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_getUnsignedOctetWithInt_withByteArray_(index, bytes);
}

+ (jint)encodeByteWithInt:(jint)b
              withBoolean:(jboolean)encode
withJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buffer {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(b, encode, buffer);
}

+ (jboolean)isWhitespaceWithInt:(jint)b {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_isWhitespaceWithInt_(b);
}

+ (IOSByteArray *)encodeQuotedPrintableWithJavaUtilBitSet:(JavaUtilBitSet *)printable
                                            withByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithJavaUtilBitSet_withByteArray_(printable, bytes);
}

+ (IOSByteArray *)encodeQuotedPrintableWithJavaUtilBitSet:(JavaUtilBitSet *)printable
                                            withByteArray:(IOSByteArray *)bytes
                                              withBoolean:(jboolean)strict {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithJavaUtilBitSet_withByteArray_withBoolean_(printable, bytes, strict);
}

+ (IOSByteArray *)decodeQuotedPrintableWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_decodeQuotedPrintableWithByteArray_(bytes);
}

- (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithJavaUtilBitSet_withByteArray_withBoolean_(OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS, bytes, strict_);
}

- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_decodeQuotedPrintableWithByteArray_(bytes);
}

- (NSString *)encodeWithNSString:(NSString *)str {
  return [self encodeWithNSString:str withJavaNioCharsetCharset:[self getCharset]];
}

- (NSString *)decodeWithNSString:(NSString *)str
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (str == nil) {
    return nil;
  }
  return [NSString java_stringWithBytes:[self decodeWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUsAsciiWithNSString_(str)] charset:charset];
}

- (NSString *)decodeWithNSString:(NSString *)str
                    withNSString:(NSString *)charset {
  if (str == nil) {
    return nil;
  }
  return [NSString java_stringWithBytes:[self decodeWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUsAsciiWithNSString_(str)] charsetName:charset];
}

- (NSString *)decodeWithNSString:(NSString *)str {
  return [self decodeWithNSString:str withJavaNioCharsetCharset:[self getCharset]];
}

- (id)encodeWithId:(id)obj {
  if (obj == nil) {
    return nil;
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    return [self encodeWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])];
  }
  else if ([obj isKindOfClass:[NSString class]]) {
    return [self encodeWithNSString:(NSString *) cast_chk(obj, [NSString class])];
  }
  else {
    @throw create_OrgApacheCommonsCodecEncoderException_initWithNSString_(JreStrcat("$$$", @"Objects of type ", [[obj java_getClass] getName], @" cannot be quoted-printable encoded"));
  }
}

- (id)decodeWithId:(id)obj {
  if (obj == nil) {
    return nil;
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    return [self decodeWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])];
  }
  else if ([obj isKindOfClass:[NSString class]]) {
    return [self decodeWithNSString:(NSString *) cast_chk(obj, [NSString class])];
  }
  else {
    @throw create_OrgApacheCommonsCodecDecoderException_initWithNSString_(JreStrcat("$$$", @"Objects of type ", [[obj java_getClass] getName], @" cannot be quoted-printable decoded"));
  }
}

- (JavaNioCharsetCharset *)getCharset {
  return self->charset_;
}

- (NSString *)getDefaultCharset {
  return [((JavaNioCharsetCharset *) nil_chk(self->charset_)) name];
}

- (NSString *)encodeWithNSString:(NSString *)str
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (str == nil) {
    return nil;
  }
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUsAsciiWithByteArray_([self encodeWithByteArray:[str java_getBytesWithCharset:charset]]);
}

- (NSString *)encodeWithNSString:(NSString *)str
                    withNSString:(NSString *)charset {
  if (str == nil) {
    return nil;
  }
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUsAsciiWithByteArray_([self encodeWithByteArray:[str java_getBytesWithCharsetName:charset]]);
}

- (void)dealloc {
  RELEASE_(charset_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1a, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 5, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 5, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 15, 16, 17, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 19, 16, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 3, 20, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 21, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 22, 23, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 3, 17, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 24, 20, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 24, 17, -1, -1, -1 },
    { NULL, "LJavaNioCharsetCharset;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 22, 25, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithJavaNioCharsetCharset:);
  methods[3].selector = @selector(initWithJavaNioCharsetCharset:withBoolean:);
  methods[4].selector = @selector(initWithNSString:);
  methods[5].selector = @selector(encodeQuotedPrintableWithInt:withJavaIoByteArrayOutputStream:);
  methods[6].selector = @selector(getUnsignedOctetWithInt:withByteArray:);
  methods[7].selector = @selector(encodeByteWithInt:withBoolean:withJavaIoByteArrayOutputStream:);
  methods[8].selector = @selector(isWhitespaceWithInt:);
  methods[9].selector = @selector(encodeQuotedPrintableWithJavaUtilBitSet:withByteArray:);
  methods[10].selector = @selector(encodeQuotedPrintableWithJavaUtilBitSet:withByteArray:withBoolean:);
  methods[11].selector = @selector(decodeQuotedPrintableWithByteArray:);
  methods[12].selector = @selector(encodeWithByteArray:);
  methods[13].selector = @selector(decodeWithByteArray:);
  methods[14].selector = @selector(encodeWithNSString:);
  methods[15].selector = @selector(decodeWithNSString:withJavaNioCharsetCharset:);
  methods[16].selector = @selector(decodeWithNSString:withNSString:);
  methods[17].selector = @selector(decodeWithNSString:);
  methods[18].selector = @selector(encodeWithId:);
  methods[19].selector = @selector(decodeWithId:);
  methods[20].selector = @selector(getCharset);
  methods[21].selector = @selector(getDefaultCharset);
  methods[22].selector = @selector(encodeWithNSString:withJavaNioCharsetCharset:);
  methods[23].selector = @selector(encodeWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "charset_", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "strict_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PRINTABLE_CHARS", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "ESCAPE_CHAR", "B", .constantValue.asChar = OrgApacheCommonsCodecNetQuotedPrintableCodec_ESCAPE_CHAR, 0x1a, -1, -1, -1, -1 },
    { "TAB", "B", .constantValue.asChar = OrgApacheCommonsCodecNetQuotedPrintableCodec_TAB, 0x1a, -1, -1, -1, -1 },
    { "SPACE", "B", .constantValue.asChar = OrgApacheCommonsCodecNetQuotedPrintableCodec_SPACE, 0x1a, -1, -1, -1, -1 },
    { "CR", "B", .constantValue.asChar = OrgApacheCommonsCodecNetQuotedPrintableCodec_CR, 0x1a, -1, -1, -1, -1 },
    { "LF", "B", .constantValue.asChar = OrgApacheCommonsCodecNetQuotedPrintableCodec_LF, 0x1a, -1, -1, -1, -1 },
    { "SAFE_LENGTH", "I", .constantValue.asInt = OrgApacheCommonsCodecNetQuotedPrintableCodec_SAFE_LENGTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LJavaNioCharsetCharset;", "LJavaNioCharsetCharset;Z", "LNSString;", "LJavaNioCharsetIllegalCharsetNameException;LJavaLangIllegalArgumentException;LJavaNioCharsetUnsupportedCharsetException;", "encodeQuotedPrintable", "ILJavaIoByteArrayOutputStream;", "getUnsignedOctet", "I[B", "encodeByte", "IZLJavaIoByteArrayOutputStream;", "isWhitespace", "I", "LJavaUtilBitSet;[B", "LJavaUtilBitSet;[BZ", "decodeQuotedPrintable", "[B", "LOrgApacheCommonsCodecDecoderException;", "encode", "decode", "LOrgApacheCommonsCodecEncoderException;", "LNSString;LJavaNioCharsetCharset;", "LNSString;LNSString;", "LOrgApacheCommonsCodecDecoderException;LJavaIoUnsupportedEncodingException;", "LNSObject;", "LJavaIoUnsupportedEncodingException;", &OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecNetQuotedPrintableCodec = { "QuotedPrintableCodec", "org.apache.commons.codec.net", ptrTable, methods, fields, 7, 0x1, 24, 9, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecNetQuotedPrintableCodec;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecNetQuotedPrintableCodec class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS, new_JavaUtilBitSet_initWithInt_(256));
    {
      for (jint i = 33; i <= 60; i++) {
        [OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS setWithInt:i];
      }
      for (jint i = 62; i <= 126; i++) {
        [OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS setWithInt:i];
      }
      [OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS setWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_TAB];
      [OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS setWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_SPACE];
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecNetQuotedPrintableCodec)
  }
}

@end

void OrgApacheCommonsCodecNetQuotedPrintableCodec_init(OrgApacheCommonsCodecNetQuotedPrintableCodec *self) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(self, JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8), false);
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *new_OrgApacheCommonsCodecNetQuotedPrintableCodec_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, init)
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *create_OrgApacheCommonsCodecNetQuotedPrintableCodec_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, init)
}

void OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithBoolean_(OrgApacheCommonsCodecNetQuotedPrintableCodec *self, jboolean strict) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(self, JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8), strict);
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *new_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithBoolean_(jboolean strict) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithBoolean_, strict)
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *create_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithBoolean_(jboolean strict) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithBoolean_, strict)
}

void OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_(OrgApacheCommonsCodecNetQuotedPrintableCodec *self, JavaNioCharsetCharset *charset) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(self, charset, false);
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *new_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_(JavaNioCharsetCharset *charset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithJavaNioCharsetCharset_, charset)
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *create_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_(JavaNioCharsetCharset *charset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithJavaNioCharsetCharset_, charset)
}

void OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(OrgApacheCommonsCodecNetQuotedPrintableCodec *self, JavaNioCharsetCharset *charset, jboolean strict) {
  NSObject_init(self);
  JreStrongAssign(&self->charset_, charset);
  self->strict_ = strict;
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *new_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(JavaNioCharsetCharset *charset, jboolean strict) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithJavaNioCharsetCharset_withBoolean_, charset, strict)
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *create_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(JavaNioCharsetCharset *charset, jboolean strict) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithJavaNioCharsetCharset_withBoolean_, charset, strict)
}

void OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithNSString_(OrgApacheCommonsCodecNetQuotedPrintableCodec *self, NSString *charsetName) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithJavaNioCharsetCharset_withBoolean_(self, JavaNioCharsetCharset_forNameWithNSString_(charsetName), false);
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *new_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithNSString_(NSString *charsetName) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithNSString_, charsetName)
}

OrgApacheCommonsCodecNetQuotedPrintableCodec *create_OrgApacheCommonsCodecNetQuotedPrintableCodec_initWithNSString_(NSString *charsetName) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetQuotedPrintableCodec, initWithNSString_, charsetName)
}

jint OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithInt_withJavaIoByteArrayOutputStream_(jint b, JavaIoByteArrayOutputStream *buffer) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  [((JavaIoByteArrayOutputStream *) nil_chk(buffer)) writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_ESCAPE_CHAR];
  jchar hex1 = JavaLangCharacter_toUpperCaseWithChar_(JavaLangCharacter_forDigitWithInt_withInt_((JreRShift32(b, 4)) & (jint) 0xF, 16));
  jchar hex2 = JavaLangCharacter_toUpperCaseWithChar_(JavaLangCharacter_forDigitWithInt_withInt_(b & (jint) 0xF, 16));
  [buffer writeWithInt:hex1];
  [buffer writeWithInt:hex2];
  return 3;
}

jint OrgApacheCommonsCodecNetQuotedPrintableCodec_getUnsignedOctetWithInt_withByteArray_(jint index, IOSByteArray *bytes) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  jint b = IOSByteArray_Get(nil_chk(bytes), index);
  if (b < 0) {
    b = 256 + b;
  }
  return b;
}

jint OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(jint b, jboolean encode, JavaIoByteArrayOutputStream *buffer) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  if (encode) {
    return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithInt_withJavaIoByteArrayOutputStream_(b, buffer);
  }
  else {
    [((JavaIoByteArrayOutputStream *) nil_chk(buffer)) writeWithInt:b];
    return 1;
  }
}

jboolean OrgApacheCommonsCodecNetQuotedPrintableCodec_isWhitespaceWithInt_(jint b) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  return b == OrgApacheCommonsCodecNetQuotedPrintableCodec_SPACE || b == OrgApacheCommonsCodecNetQuotedPrintableCodec_TAB;
}

IOSByteArray *OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithJavaUtilBitSet_withByteArray_(JavaUtilBitSet *printable, IOSByteArray *bytes) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  return OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithJavaUtilBitSet_withByteArray_withBoolean_(printable, bytes, false);
}

IOSByteArray *OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithJavaUtilBitSet_withByteArray_withBoolean_(JavaUtilBitSet *printable, IOSByteArray *bytes, jboolean strict) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  if (bytes == nil) {
    return nil;
  }
  if (printable == nil) {
    printable = OrgApacheCommonsCodecNetQuotedPrintableCodec_PRINTABLE_CHARS;
  }
  JavaIoByteArrayOutputStream *buffer = create_JavaIoByteArrayOutputStream_init();
  if (strict) {
    jint pos = 1;
    for (jint i = 0; i < bytes->size_ - 3; i++) {
      jint b = OrgApacheCommonsCodecNetQuotedPrintableCodec_getUnsignedOctetWithInt_withByteArray_(i, bytes);
      if (pos < OrgApacheCommonsCodecNetQuotedPrintableCodec_SAFE_LENGTH) {
        pos += OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(b, ![((JavaUtilBitSet *) nil_chk(printable)) getWithInt:b], buffer);
      }
      else {
        OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(b, ![((JavaUtilBitSet *) nil_chk(printable)) getWithInt:b] || OrgApacheCommonsCodecNetQuotedPrintableCodec_isWhitespaceWithInt_(b), buffer);
        [buffer writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_ESCAPE_CHAR];
        [buffer writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_CR];
        [buffer writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_LF];
        pos = 1;
      }
    }
    jint b = OrgApacheCommonsCodecNetQuotedPrintableCodec_getUnsignedOctetWithInt_withByteArray_(bytes->size_ - 3, bytes);
    jboolean encode = ![((JavaUtilBitSet *) nil_chk(printable)) getWithInt:b] || (OrgApacheCommonsCodecNetQuotedPrintableCodec_isWhitespaceWithInt_(b) && pos > OrgApacheCommonsCodecNetQuotedPrintableCodec_SAFE_LENGTH - 5);
    pos += OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(b, encode, buffer);
    if (pos > OrgApacheCommonsCodecNetQuotedPrintableCodec_SAFE_LENGTH - 2) {
      [buffer writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_ESCAPE_CHAR];
      [buffer writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_CR];
      [buffer writeWithInt:OrgApacheCommonsCodecNetQuotedPrintableCodec_LF];
    }
    for (jint i = bytes->size_ - 2; i < bytes->size_; i++) {
      b = OrgApacheCommonsCodecNetQuotedPrintableCodec_getUnsignedOctetWithInt_withByteArray_(i, bytes);
      encode = (![printable getWithInt:b] || (i > bytes->size_ - 2 && OrgApacheCommonsCodecNetQuotedPrintableCodec_isWhitespaceWithInt_(b)));
      OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeByteWithInt_withBoolean_withJavaIoByteArrayOutputStream_(b, encode, buffer);
    }
  }
  else {
    {
      IOSByteArray *a__ = bytes;
      jbyte const *b__ = a__->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte c = *b__++;
        jint b = c;
        if (b < 0) {
          b = 256 + b;
        }
        if ([((JavaUtilBitSet *) nil_chk(printable)) getWithInt:b]) {
          [buffer writeWithInt:b];
        }
        else {
          OrgApacheCommonsCodecNetQuotedPrintableCodec_encodeQuotedPrintableWithInt_withJavaIoByteArrayOutputStream_(b, buffer);
        }
      }
    }
  }
  return [buffer toByteArray];
}

IOSByteArray *OrgApacheCommonsCodecNetQuotedPrintableCodec_decodeQuotedPrintableWithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecNetQuotedPrintableCodec_initialize();
  if (bytes == nil) {
    return nil;
  }
  JavaIoByteArrayOutputStream *buffer = create_JavaIoByteArrayOutputStream_init();
  for (jint i = 0; i < bytes->size_; i++) {
    jint b = IOSByteArray_Get(bytes, i);
    if (b == OrgApacheCommonsCodecNetQuotedPrintableCodec_ESCAPE_CHAR) {
      @try {
        if (IOSByteArray_Get(bytes, ++i) == OrgApacheCommonsCodecNetQuotedPrintableCodec_CR) {
          continue;
        }
        jint u = OrgApacheCommonsCodecNetUtils_digit16WithByte_(IOSByteArray_Get(bytes, i));
        jint l = OrgApacheCommonsCodecNetUtils_digit16WithByte_(IOSByteArray_Get(bytes, ++i));
        [buffer writeWithInt:(jchar) ((JreLShift32(u, 4)) + l)];
      }
      @catch (JavaLangArrayIndexOutOfBoundsException *e) {
        @throw create_OrgApacheCommonsCodecDecoderException_initWithNSString_withJavaLangThrowable_(@"Invalid quoted-printable encoding", e);
      }
    }
    else if (b != OrgApacheCommonsCodecNetQuotedPrintableCodec_CR && b != OrgApacheCommonsCodecNetQuotedPrintableCodec_LF) {
      [buffer writeWithInt:b];
    }
  }
  return [buffer toByteArray];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecNetQuotedPrintableCodec)
