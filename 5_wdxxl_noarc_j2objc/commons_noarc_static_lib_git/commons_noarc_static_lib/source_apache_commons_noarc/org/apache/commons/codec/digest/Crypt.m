//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/digest/Crypt.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/nio/charset/Charset.h"
#include "org/apache/commons/codec/Charsets.h"
#include "org/apache/commons/codec/digest/Crypt.h"
#include "org/apache/commons/codec/digest/Md5Crypt.h"
#include "org/apache/commons/codec/digest/Sha2Crypt.h"
#include "org/apache/commons/codec/digest/UnixCrypt.h"

@implementation OrgApacheCommonsCodecDigestCrypt

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecDigestCrypt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)cryptWithByteArray:(IOSByteArray *)keyBytes {
  return OrgApacheCommonsCodecDigestCrypt_cryptWithByteArray_(keyBytes);
}

+ (NSString *)cryptWithByteArray:(IOSByteArray *)keyBytes
                    withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestCrypt_cryptWithByteArray_withNSString_(keyBytes, salt);
}

+ (NSString *)cryptWithNSString:(NSString *)key {
  return OrgApacheCommonsCodecDigestCrypt_cryptWithNSString_(key);
}

+ (NSString *)cryptWithNSString:(NSString *)key
                   withNSString:(NSString *)salt {
  return OrgApacheCommonsCodecDigestCrypt_cryptWithNSString_withNSString_(key, salt);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cryptWithByteArray:);
  methods[2].selector = @selector(cryptWithByteArray:withNSString:);
  methods[3].selector = @selector(cryptWithNSString:);
  methods[4].selector = @selector(cryptWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "crypt", "[B", "[BLNSString;", "LNSString;", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecDigestCrypt = { "Crypt", "org.apache.commons.codec.digest", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecDigestCrypt;
}

@end

void OrgApacheCommonsCodecDigestCrypt_init(OrgApacheCommonsCodecDigestCrypt *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecDigestCrypt *new_OrgApacheCommonsCodecDigestCrypt_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecDigestCrypt, init)
}

OrgApacheCommonsCodecDigestCrypt *create_OrgApacheCommonsCodecDigestCrypt_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecDigestCrypt, init)
}

NSString *OrgApacheCommonsCodecDigestCrypt_cryptWithByteArray_(IOSByteArray *keyBytes) {
  OrgApacheCommonsCodecDigestCrypt_initialize();
  return OrgApacheCommonsCodecDigestCrypt_cryptWithByteArray_withNSString_(keyBytes, nil);
}

NSString *OrgApacheCommonsCodecDigestCrypt_cryptWithByteArray_withNSString_(IOSByteArray *keyBytes, NSString *salt) {
  OrgApacheCommonsCodecDigestCrypt_initialize();
  if (salt == nil) {
    return OrgApacheCommonsCodecDigestSha2Crypt_sha512CryptWithByteArray_(keyBytes);
  }
  else if ([salt java_hasPrefix:OrgApacheCommonsCodecDigestSha2Crypt_SHA512_PREFIX]) {
    return OrgApacheCommonsCodecDigestSha2Crypt_sha512CryptWithByteArray_withNSString_(keyBytes, salt);
  }
  else if ([salt java_hasPrefix:OrgApacheCommonsCodecDigestSha2Crypt_SHA256_PREFIX]) {
    return OrgApacheCommonsCodecDigestSha2Crypt_sha256CryptWithByteArray_withNSString_(keyBytes, salt);
  }
  else if ([salt java_hasPrefix:OrgApacheCommonsCodecDigestMd5Crypt_MD5_PREFIX]) {
    return OrgApacheCommonsCodecDigestMd5Crypt_md5CryptWithByteArray_withNSString_(keyBytes, salt);
  }
  else {
    return OrgApacheCommonsCodecDigestUnixCrypt_cryptWithByteArray_withNSString_(keyBytes, salt);
  }
}

NSString *OrgApacheCommonsCodecDigestCrypt_cryptWithNSString_(NSString *key) {
  OrgApacheCommonsCodecDigestCrypt_initialize();
  return OrgApacheCommonsCodecDigestCrypt_cryptWithNSString_withNSString_(key, nil);
}

NSString *OrgApacheCommonsCodecDigestCrypt_cryptWithNSString_withNSString_(NSString *key, NSString *salt) {
  OrgApacheCommonsCodecDigestCrypt_initialize();
  return OrgApacheCommonsCodecDigestCrypt_cryptWithByteArray_withNSString_([((NSString *) nil_chk(key)) java_getBytesWithCharset:JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8)], salt);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecDigestCrypt)
