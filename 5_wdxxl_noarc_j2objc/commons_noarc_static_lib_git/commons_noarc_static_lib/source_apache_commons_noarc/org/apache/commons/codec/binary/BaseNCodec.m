//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/binary/BaseNCodec.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/codec/DecoderException.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/binary/BaseNCodec.h"
#include "org/apache/commons/codec/binary/StringUtils.h"

@interface OrgApacheCommonsCodecBinaryBaseNCodec () {
 @public
  jint unencodedBlockSize_;
  jint encodedBlockSize_;
  jint chunkSeparatorLength_;
}

- (IOSByteArray *)resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context;

@end

inline jint OrgApacheCommonsCodecBinaryBaseNCodec_get_DEFAULT_BUFFER_RESIZE_FACTOR(void);
#define OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_RESIZE_FACTOR 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBaseNCodec, DEFAULT_BUFFER_RESIZE_FACTOR, jint)

inline jint OrgApacheCommonsCodecBinaryBaseNCodec_get_DEFAULT_BUFFER_SIZE(void);
#define OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_SIZE 8192
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBaseNCodec, DEFAULT_BUFFER_SIZE, jint)

__attribute__((unused)) static IOSByteArray *OrgApacheCommonsCodecBinaryBaseNCodec_resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context_(OrgApacheCommonsCodecBinaryBaseNCodec *self, OrgApacheCommonsCodecBinaryBaseNCodec_Context *context);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsCodecBinaryBaseNCodec__Annotations$0(void);

@implementation OrgApacheCommonsCodecBinaryBaseNCodec

- (instancetype)initWithInt:(jint)unencodedBlockSize
                    withInt:(jint)encodedBlockSize
                    withInt:(jint)lineLength
                    withInt:(jint)chunkSeparatorLength {
  OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_(self, unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength);
  return self;
}

- (instancetype)initWithInt:(jint)unencodedBlockSize
                    withInt:(jint)encodedBlockSize
                    withInt:(jint)lineLength
                    withInt:(jint)chunkSeparatorLength
                   withByte:(jbyte)pad {
  OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_withByte_(self, unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength, pad);
  return self;
}

- (jboolean)hasDataWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  return ((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->buffer_ != nil;
}

- (jint)availableWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  return ((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->buffer_ != nil ? context->pos_ - context->readPos_ : 0;
}

- (jint)getDefaultBufferSize {
  return OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_SIZE;
}

- (IOSByteArray *)resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  return OrgApacheCommonsCodecBinaryBaseNCodec_resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context_(self, context);
}

- (IOSByteArray *)ensureBufferSizeWithInt:(jint)size
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  if ((((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->buffer_ == nil) || (((IOSByteArray *) nil_chk(context->buffer_))->size_ < context->pos_ + size)) {
    return OrgApacheCommonsCodecBinaryBaseNCodec_resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context_(self, context);
  }
  return context->buffer_;
}

- (jint)readResultsWithByteArray:(IOSByteArray *)b
                         withInt:(jint)bPos
                         withInt:(jint)bAvail
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  if (((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->buffer_ != nil) {
    jint len = JavaLangMath_minWithInt_withInt_([self availableWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:context], bAvail);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(context->buffer_, context->readPos_, b, bPos, len);
    context->readPos_ += len;
    if (context->readPos_ >= context->pos_) {
      JreStrongAssign(&context->buffer_, nil);
    }
    return len;
  }
  return context->eof_ ? OrgApacheCommonsCodecBinaryBaseNCodec_EOF : 0;
}

+ (jboolean)isWhiteSpaceWithByte:(jbyte)byteToCheck {
  return OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(byteToCheck);
}

- (id)encodeWithId:(id)obj {
  if (!([obj isKindOfClass:[IOSByteArray class]])) {
    @throw create_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"Parameter supplied to Base-N encode is not a byte[]");
  }
  return [self encodeWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])];
}

- (NSString *)encodeToStringWithByteArray:(IOSByteArray *)pArray {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_([self encodeWithByteArray:pArray]);
}

- (NSString *)encodeAsStringWithByteArray:(IOSByteArray *)pArray {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_([self encodeWithByteArray:pArray]);
}

- (id)decodeWithId:(id)obj {
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    return [self decodeWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])];
  }
  else if ([obj isKindOfClass:[NSString class]]) {
    return [self decodeWithNSString:(NSString *) cast_chk(obj, [NSString class])];
  }
  else {
    @throw create_OrgApacheCommonsCodecDecoderException_initWithNSString_(@"Parameter supplied to Base-N decode is not a byte[] or a String");
  }
}

- (IOSByteArray *)decodeWithNSString:(NSString *)pArray {
  return [self decodeWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(pArray)];
}

- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)pArray {
  if (pArray == nil || pArray->size_ == 0) {
    return pArray;
  }
  OrgApacheCommonsCodecBinaryBaseNCodec_Context *context = create_OrgApacheCommonsCodecBinaryBaseNCodec_Context_init();
  [self decodeWithByteArray:pArray withInt:0 withInt:pArray->size_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
  [self decodeWithByteArray:pArray withInt:0 withInt:OrgApacheCommonsCodecBinaryBaseNCodec_EOF withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
  IOSByteArray *result = [IOSByteArray arrayWithLength:context->pos_];
  [self readResultsWithByteArray:result withInt:0 withInt:result->size_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
  return result;
}

- (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)pArray {
  if (pArray == nil || pArray->size_ == 0) {
    return pArray;
  }
  OrgApacheCommonsCodecBinaryBaseNCodec_Context *context = create_OrgApacheCommonsCodecBinaryBaseNCodec_Context_init();
  [self encodeWithByteArray:pArray withInt:0 withInt:pArray->size_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
  [self encodeWithByteArray:pArray withInt:0 withInt:OrgApacheCommonsCodecBinaryBaseNCodec_EOF withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
  IOSByteArray *buf = [IOSByteArray arrayWithLength:context->pos_ - context->readPos_];
  [self readResultsWithByteArray:buf withInt:0 withInt:buf->size_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
  return buf;
}

- (void)encodeWithByteArray:(IOSByteArray *)pArray
                    withInt:(jint)i
                    withInt:(jint)length
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)decodeWithByteArray:(IOSByteArray *)pArray
                    withInt:(jint)i
                    withInt:(jint)length
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isInAlphabetWithByte:(jbyte)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isInAlphabetWithByteArray:(IOSByteArray *)arrayOctet
                          withBoolean:(jboolean)allowWSPad {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(arrayOctet))->size_; i++) {
    if (![self isInAlphabetWithByte:IOSByteArray_Get(arrayOctet, i)] && (!allowWSPad || ((IOSByteArray_Get(arrayOctet, i) != pad_) && !OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(IOSByteArray_Get(arrayOctet, i))))) {
      return false;
    }
  }
  return true;
}

- (jboolean)isInAlphabetWithNSString:(NSString *)basen {
  return [self isInAlphabetWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(basen) withBoolean:true];
}

- (jboolean)containsAlphabetOrPadWithByteArray:(IOSByteArray *)arrayOctet {
  if (arrayOctet == nil) {
    return false;
  }
  {
    IOSByteArray *a__ = arrayOctet;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte element = *b__++;
      if (pad_ == element || [self isInAlphabetWithByte:element]) {
        return true;
      }
    }
  }
  return false;
}

- (jlong)getEncodedLengthWithByteArray:(IOSByteArray *)pArray {
  jlong len = ((((IOSByteArray *) nil_chk(pArray))->size_ + unencodedBlockSize_ - 1) / unencodedBlockSize_) * (jlong) encodedBlockSize_;
  if (lineLength_ > 0) {
    len += ((len + lineLength_ - 1) / lineLength_) * chunkSeparatorLength_;
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 5, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 13, 19, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 18, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 21, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 23, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 24, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:withByte:);
  methods[2].selector = @selector(hasDataWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[3].selector = @selector(availableWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[4].selector = @selector(getDefaultBufferSize);
  methods[5].selector = @selector(resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[6].selector = @selector(ensureBufferSizeWithInt:withOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[7].selector = @selector(readResultsWithByteArray:withInt:withInt:withOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[8].selector = @selector(isWhiteSpaceWithByte:);
  methods[9].selector = @selector(encodeWithId:);
  methods[10].selector = @selector(encodeToStringWithByteArray:);
  methods[11].selector = @selector(encodeAsStringWithByteArray:);
  methods[12].selector = @selector(decodeWithId:);
  methods[13].selector = @selector(decodeWithNSString:);
  methods[14].selector = @selector(decodeWithByteArray:);
  methods[15].selector = @selector(encodeWithByteArray:);
  methods[16].selector = @selector(encodeWithByteArray:withInt:withInt:withOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[17].selector = @selector(decodeWithByteArray:withInt:withInt:withOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[18].selector = @selector(isInAlphabetWithByte:);
  methods[19].selector = @selector(isInAlphabetWithByteArray:withBoolean:);
  methods[20].selector = @selector(isInAlphabetWithNSString:);
  methods[21].selector = @selector(containsAlphabetOrPadWithByteArray:);
  methods[22].selector = @selector(getEncodedLengthWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EOF", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_EOF, 0x18, -1, -1, -1, -1 },
    { "MIME_CHUNK_SIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_MIME_CHUNK_SIZE, 0x19, -1, -1, -1, -1 },
    { "PEM_CHUNK_SIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_PEM_CHUNK_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_BUFFER_RESIZE_FACTOR", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_RESIZE_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MASK_8BITS", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS, 0x1c, -1, -1, -1, -1 },
    { "PAD_DEFAULT", "B", .constantValue.asChar = OrgApacheCommonsCodecBinaryBaseNCodec_PAD_DEFAULT, 0x1c, -1, -1, -1, -1 },
    { "PAD", "B", .constantValue.asChar = OrgApacheCommonsCodecBinaryBaseNCodec_PAD, 0x14, 25, -1, -1, 26 },
    { "pad_", "B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "unencodedBlockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encodedBlockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lineLength_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "chunkSeparatorLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "IIIIB", "hasData", "LOrgApacheCommonsCodecBinaryBaseNCodec_Context;", "available", "resizeBuffer", "ensureBufferSize", "ILOrgApacheCommonsCodecBinaryBaseNCodec_Context;", "readResults", "[BIILOrgApacheCommonsCodecBinaryBaseNCodec_Context;", "isWhiteSpace", "B", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "encodeToString", "[B", "encodeAsString", "decode", "LOrgApacheCommonsCodecDecoderException;", "LNSString;", "isInAlphabet", "[BZ", "containsAlphabetOrPad", "getEncodedLength", "PAD", (void *)&OrgApacheCommonsCodecBinaryBaseNCodec__Annotations$0 };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBaseNCodec = { "BaseNCodec", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x401, 23, 13, -1, 3, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBaseNCodec;
}

@end

void OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_(OrgApacheCommonsCodecBinaryBaseNCodec *self, jint unencodedBlockSize, jint encodedBlockSize, jint lineLength, jint chunkSeparatorLength) {
  OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_withByte_(self, unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength, OrgApacheCommonsCodecBinaryBaseNCodec_PAD_DEFAULT);
}

void OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_withByte_(OrgApacheCommonsCodecBinaryBaseNCodec *self, jint unencodedBlockSize, jint encodedBlockSize, jint lineLength, jint chunkSeparatorLength, jbyte pad) {
  NSObject_init(self);
  self->unencodedBlockSize_ = unencodedBlockSize;
  self->encodedBlockSize_ = encodedBlockSize;
  jboolean useChunking = lineLength > 0 && chunkSeparatorLength > 0;
  self->lineLength_ = useChunking ? (lineLength / encodedBlockSize) * encodedBlockSize : 0;
  self->chunkSeparatorLength_ = chunkSeparatorLength;
  self->pad_ = pad;
}

IOSByteArray *OrgApacheCommonsCodecBinaryBaseNCodec_resizeBufferWithOrgApacheCommonsCodecBinaryBaseNCodec_Context_(OrgApacheCommonsCodecBinaryBaseNCodec *self, OrgApacheCommonsCodecBinaryBaseNCodec_Context *context) {
  if (((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->buffer_ == nil) {
    JreStrongAssignAndConsume(&context->buffer_, [IOSByteArray newArrayWithLength:[self getDefaultBufferSize]]);
    context->pos_ = 0;
    context->readPos_ = 0;
  }
  else {
    IOSByteArray *b = [IOSByteArray arrayWithLength:context->buffer_->size_ * OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_RESIZE_FACTOR];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(context->buffer_, 0, b, 0, context->buffer_->size_);
    JreStrongAssign(&context->buffer_, b);
  }
  return context->buffer_;
}

jboolean OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(jbyte byteToCheck) {
  OrgApacheCommonsCodecBinaryBaseNCodec_initialize();
  switch (byteToCheck) {
    case ' ':
    case 0x000a:
    case 0x000d:
    case 0x0009:
    return true;
    default:
    return false;
  }
}

IOSObjectArray *OrgApacheCommonsCodecBinaryBaseNCodec__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBaseNCodec)

@implementation OrgApacheCommonsCodecBinaryBaseNCodec_Context

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecBinaryBaseNCodec_Context_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s[buffer=%s, currentLinePos=%s, eof=%s, ibitWorkArea=%s, lbitWorkArea=%s, modulus=%s, pos=%s, readPos=%s]", [IOSObjectArray arrayWithObjects:(id[]){ [[self java_getClass] getSimpleName], JavaUtilArrays_toStringWithByteArray_(buffer_), JavaLangInteger_valueOfWithInt_(currentLinePos_), JavaLangBoolean_valueOfWithBoolean_(eof_), JavaLangInteger_valueOfWithInt_(ibitWorkArea_), JavaLangLong_valueOfWithLong_(lbitWorkArea_), JavaLangInteger_valueOfWithInt_(modulus_), JavaLangInteger_valueOfWithInt_(pos_), JavaLangInteger_valueOfWithInt_(readPos_) } count:9 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ibitWorkArea_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lbitWorkArea_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "readPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "eof_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentLinePos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "modulus_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LOrgApacheCommonsCodecBinaryBaseNCodec;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBaseNCodec_Context = { "Context", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x8, 2, 8, 1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBaseNCodec_Context;
}

@end

void OrgApacheCommonsCodecBinaryBaseNCodec_Context_init(OrgApacheCommonsCodecBinaryBaseNCodec_Context *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecBinaryBaseNCodec_Context *new_OrgApacheCommonsCodecBinaryBaseNCodec_Context_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBaseNCodec_Context, init)
}

OrgApacheCommonsCodecBinaryBaseNCodec_Context *create_OrgApacheCommonsCodecBinaryBaseNCodec_Context_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBaseNCodec_Context, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBaseNCodec_Context)
