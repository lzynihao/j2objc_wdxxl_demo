//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/binary/Base64.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "org/apache/commons/codec/binary/Base64.h"
#include "org/apache/commons/codec/binary/BaseNCodec.h"
#include "org/apache/commons/codec/binary/StringUtils.h"

@interface OrgApacheCommonsCodecBinaryBase64 () {
 @public
  IOSByteArray *encodeTable_;
  IOSByteArray *decodeTable_;
  IOSByteArray *lineSeparator_;
  jint decodeSize_;
  jint encodeSize_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBase64, encodeTable_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBase64, decodeTable_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBase64, lineSeparator_, IOSByteArray *)

inline jint OrgApacheCommonsCodecBinaryBase64_get_BITS_PER_ENCODED_BYTE(void);
#define OrgApacheCommonsCodecBinaryBase64_BITS_PER_ENCODED_BYTE 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBase64, BITS_PER_ENCODED_BYTE, jint)

inline jint OrgApacheCommonsCodecBinaryBase64_get_BYTES_PER_UNENCODED_BLOCK(void);
#define OrgApacheCommonsCodecBinaryBase64_BYTES_PER_UNENCODED_BLOCK 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBase64, BYTES_PER_UNENCODED_BLOCK, jint)

inline jint OrgApacheCommonsCodecBinaryBase64_get_BYTES_PER_ENCODED_BLOCK(void);
#define OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBase64, BYTES_PER_ENCODED_BLOCK, jint)

inline IOSByteArray *OrgApacheCommonsCodecBinaryBase64_get_STANDARD_ENCODE_TABLE(void);
static IOSByteArray *OrgApacheCommonsCodecBinaryBase64_STANDARD_ENCODE_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBase64, STANDARD_ENCODE_TABLE, IOSByteArray *)

inline IOSByteArray *OrgApacheCommonsCodecBinaryBase64_get_URL_SAFE_ENCODE_TABLE(void);
static IOSByteArray *OrgApacheCommonsCodecBinaryBase64_URL_SAFE_ENCODE_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBase64, URL_SAFE_ENCODE_TABLE, IOSByteArray *)

inline IOSByteArray *OrgApacheCommonsCodecBinaryBase64_get_DECODE_TABLE(void);
static IOSByteArray *OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBase64, DECODE_TABLE, IOSByteArray *)

inline jint OrgApacheCommonsCodecBinaryBase64_get_MASK_6BITS(void);
#define OrgApacheCommonsCodecBinaryBase64_MASK_6BITS 63
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBase64, MASK_6BITS, jint)

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsCodecBinaryBase64__Annotations$0(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecBinaryBase64)

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR;

@implementation OrgApacheCommonsCodecBinaryBase64

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecBinaryBase64_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)urlSafe {
  OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(self, urlSafe);
  return self;
}

- (instancetype)initWithInt:(jint)lineLength {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_(self, lineLength);
  return self;
}

- (instancetype)initWithInt:(jint)lineLength
              withByteArray:(IOSByteArray *)lineSeparator {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(self, lineLength, lineSeparator);
  return self;
}

- (instancetype)initWithInt:(jint)lineLength
              withByteArray:(IOSByteArray *)lineSeparator
                withBoolean:(jboolean)urlSafe {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(self, lineLength, lineSeparator, urlSafe);
  return self;
}

- (jboolean)isUrlSafe {
  return self->encodeTable_ == OrgApacheCommonsCodecBinaryBase64_URL_SAFE_ENCODE_TABLE;
}

- (void)encodeWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inPos
                    withInt:(jint)inAvail
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  if (((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->eof_) {
    return;
  }
  if (inAvail < 0) {
    context->eof_ = true;
    if (0 == context->modulus_ && lineLength_ == 0) {
      return;
    }
    IOSByteArray *buffer = [self ensureBufferSizeWithInt:encodeSize_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
    jint savedPos = context->pos_;
    switch (context->modulus_) {
      case 0:
      break;
      case 1:
      *IOSByteArray_GetRef(nil_chk(buffer), context->pos_++) = IOSByteArray_Get(nil_chk(encodeTable_), (JreRShift32(context->ibitWorkArea_, 2)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
      *IOSByteArray_GetRef(buffer, context->pos_++) = IOSByteArray_Get(encodeTable_, (JreLShift32(context->ibitWorkArea_, 4)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
      if (encodeTable_ == OrgApacheCommonsCodecBinaryBase64_STANDARD_ENCODE_TABLE) {
        *IOSByteArray_GetRef(buffer, context->pos_++) = pad_;
        *IOSByteArray_GetRef(buffer, context->pos_++) = pad_;
      }
      break;
      case 2:
      *IOSByteArray_GetRef(nil_chk(buffer), context->pos_++) = IOSByteArray_Get(nil_chk(encodeTable_), (JreRShift32(context->ibitWorkArea_, 10)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
      *IOSByteArray_GetRef(buffer, context->pos_++) = IOSByteArray_Get(encodeTable_, (JreRShift32(context->ibitWorkArea_, 4)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
      *IOSByteArray_GetRef(buffer, context->pos_++) = IOSByteArray_Get(encodeTable_, (JreLShift32(context->ibitWorkArea_, 2)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
      if (encodeTable_ == OrgApacheCommonsCodecBinaryBase64_STANDARD_ENCODE_TABLE) {
        *IOSByteArray_GetRef(buffer, context->pos_++) = pad_;
      }
      break;
      default:
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Impossible modulus ", context->modulus_));
    }
    context->currentLinePos_ += context->pos_ - savedPos;
    if (lineLength_ > 0 && context->currentLinePos_ > 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lineSeparator_, 0, buffer, context->pos_, ((IOSByteArray *) nil_chk(lineSeparator_))->size_);
      context->pos_ += lineSeparator_->size_;
    }
  }
  else {
    for (jint i = 0; i < inAvail; i++) {
      IOSByteArray *buffer = [self ensureBufferSizeWithInt:encodeSize_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
      context->modulus_ = (context->modulus_ + 1) % OrgApacheCommonsCodecBinaryBase64_BYTES_PER_UNENCODED_BLOCK;
      jint b = IOSByteArray_Get(nil_chk(inArg), inPos++);
      if (b < 0) {
        b += 256;
      }
      context->ibitWorkArea_ = (JreLShift32(context->ibitWorkArea_, 8)) + b;
      if (0 == context->modulus_) {
        *IOSByteArray_GetRef(nil_chk(buffer), context->pos_++) = IOSByteArray_Get(nil_chk(encodeTable_), (JreRShift32(context->ibitWorkArea_, 18)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
        *IOSByteArray_GetRef(buffer, context->pos_++) = IOSByteArray_Get(encodeTable_, (JreRShift32(context->ibitWorkArea_, 12)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
        *IOSByteArray_GetRef(buffer, context->pos_++) = IOSByteArray_Get(encodeTable_, (JreRShift32(context->ibitWorkArea_, 6)) & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
        *IOSByteArray_GetRef(buffer, context->pos_++) = IOSByteArray_Get(encodeTable_, context->ibitWorkArea_ & OrgApacheCommonsCodecBinaryBase64_MASK_6BITS);
        context->currentLinePos_ += OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK;
        if (lineLength_ > 0 && lineLength_ <= context->currentLinePos_) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lineSeparator_, 0, buffer, context->pos_, ((IOSByteArray *) nil_chk(lineSeparator_))->size_);
          context->pos_ += lineSeparator_->size_;
          context->currentLinePos_ = 0;
        }
      }
    }
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inPos
                    withInt:(jint)inAvail
withOrgApacheCommonsCodecBinaryBaseNCodec_Context:(OrgApacheCommonsCodecBinaryBaseNCodec_Context *)context {
  if (((OrgApacheCommonsCodecBinaryBaseNCodec_Context *) nil_chk(context))->eof_) {
    return;
  }
  if (inAvail < 0) {
    context->eof_ = true;
  }
  for (jint i = 0; i < inAvail; i++) {
    IOSByteArray *buffer = [self ensureBufferSizeWithInt:decodeSize_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
    jbyte b = IOSByteArray_Get(nil_chk(inArg), inPos++);
    if (b == pad_) {
      context->eof_ = true;
      break;
    }
    else {
      if (b >= 0 && b < ((IOSByteArray *) nil_chk(OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE))->size_) {
        jint result = IOSByteArray_Get(nil_chk(OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE), b);
        if (result >= 0) {
          context->modulus_ = (context->modulus_ + 1) % OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK;
          context->ibitWorkArea_ = (JreLShift32(context->ibitWorkArea_, OrgApacheCommonsCodecBinaryBase64_BITS_PER_ENCODED_BYTE)) + result;
          if (context->modulus_ == 0) {
            *IOSByteArray_GetRef(nil_chk(buffer), context->pos_++) = (jbyte) ((JreRShift32(context->ibitWorkArea_, 16)) & OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS);
            *IOSByteArray_GetRef(buffer, context->pos_++) = (jbyte) ((JreRShift32(context->ibitWorkArea_, 8)) & OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS);
            *IOSByteArray_GetRef(buffer, context->pos_++) = (jbyte) (context->ibitWorkArea_ & OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS);
          }
        }
      }
    }
  }
  if (context->eof_ && context->modulus_ != 0) {
    IOSByteArray *buffer = [self ensureBufferSizeWithInt:decodeSize_ withOrgApacheCommonsCodecBinaryBaseNCodec_Context:context];
    switch (context->modulus_) {
      case 1:
      break;
      case 2:
      context->ibitWorkArea_ = JreRShift32(context->ibitWorkArea_, 4);
      *IOSByteArray_GetRef(nil_chk(buffer), context->pos_++) = (jbyte) ((context->ibitWorkArea_) & OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS);
      break;
      case 3:
      context->ibitWorkArea_ = JreRShift32(context->ibitWorkArea_, 2);
      *IOSByteArray_GetRef(nil_chk(buffer), context->pos_++) = (jbyte) ((JreRShift32(context->ibitWorkArea_, 8)) & OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS);
      *IOSByteArray_GetRef(buffer, context->pos_++) = (jbyte) ((context->ibitWorkArea_) & OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS);
      break;
      default:
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"Impossible modulus ", context->modulus_));
    }
  }
}

+ (jboolean)isArrayByteBase64WithByteArray:(IOSByteArray *)arrayOctet {
  return OrgApacheCommonsCodecBinaryBase64_isArrayByteBase64WithByteArray_(arrayOctet);
}

+ (jboolean)isBase64WithByte:(jbyte)octet {
  return OrgApacheCommonsCodecBinaryBase64_isBase64WithByte_(octet);
}

+ (jboolean)isBase64WithNSString:(NSString *)base64 {
  return OrgApacheCommonsCodecBinaryBase64_isBase64WithNSString_(base64);
}

+ (jboolean)isBase64WithByteArray:(IOSByteArray *)arrayOctet {
  return OrgApacheCommonsCodecBinaryBase64_isBase64WithByteArray_(arrayOctet);
}

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_(binaryData);
}

+ (NSString *)encodeBase64StringWithByteArray:(IOSByteArray *)binaryData {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64StringWithByteArray_(binaryData);
}

+ (IOSByteArray *)encodeBase64URLSafeWithByteArray:(IOSByteArray *)binaryData {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64URLSafeWithByteArray_(binaryData);
}

+ (NSString *)encodeBase64URLSafeStringWithByteArray:(IOSByteArray *)binaryData {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64URLSafeStringWithByteArray_(binaryData);
}

+ (IOSByteArray *)encodeBase64ChunkedWithByteArray:(IOSByteArray *)binaryData {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64ChunkedWithByteArray_(binaryData);
}

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData
                                withBoolean:(jboolean)isChunked {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(binaryData, isChunked);
}

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData
                                withBoolean:(jboolean)isChunked
                                withBoolean:(jboolean)urlSafe {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_(binaryData, isChunked, urlSafe);
}

+ (IOSByteArray *)encodeBase64WithByteArray:(IOSByteArray *)binaryData
                                withBoolean:(jboolean)isChunked
                                withBoolean:(jboolean)urlSafe
                                    withInt:(jint)maxResultSize {
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_withInt_(binaryData, isChunked, urlSafe, maxResultSize);
}

+ (IOSByteArray *)decodeBase64WithNSString:(NSString *)base64String {
  return OrgApacheCommonsCodecBinaryBase64_decodeBase64WithNSString_(base64String);
}

+ (IOSByteArray *)decodeBase64WithByteArray:(IOSByteArray *)base64Data {
  return OrgApacheCommonsCodecBinaryBase64_decodeBase64WithByteArray_(base64Data);
}

+ (JavaMathBigInteger *)decodeIntegerWithByteArray:(IOSByteArray *)pArray {
  return OrgApacheCommonsCodecBinaryBase64_decodeIntegerWithByteArray_(pArray);
}

+ (IOSByteArray *)encodeIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt {
  return OrgApacheCommonsCodecBinaryBase64_encodeIntegerWithJavaMathBigInteger_(bigInt);
}

+ (IOSByteArray *)toIntegerBytesWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt {
  return OrgApacheCommonsCodecBinaryBase64_toIntegerBytesWithJavaMathBigInteger_(bigInt);
}

- (jboolean)isInAlphabetWithByte:(jbyte)octet {
  return octet >= 0 && octet < ((IOSByteArray *) nil_chk(decodeTable_))->size_ && IOSByteArray_Get(decodeTable_, octet) != -1;
}

- (void)dealloc {
  RELEASE_(encodeTable_);
  RELEASE_(decodeTable_);
  RELEASE_(lineSeparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, -1, 9, -1 },
    { NULL, "Z", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 15, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 17, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 20, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 21, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 21, 8, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 22, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 25, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 26, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithInt:withByteArray:);
  methods[4].selector = @selector(initWithInt:withByteArray:withBoolean:);
  methods[5].selector = @selector(isUrlSafe);
  methods[6].selector = @selector(encodeWithByteArray:withInt:withInt:withOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[7].selector = @selector(decodeWithByteArray:withInt:withInt:withOrgApacheCommonsCodecBinaryBaseNCodec_Context:);
  methods[8].selector = @selector(isArrayByteBase64WithByteArray:);
  methods[9].selector = @selector(isBase64WithByte:);
  methods[10].selector = @selector(isBase64WithNSString:);
  methods[11].selector = @selector(isBase64WithByteArray:);
  methods[12].selector = @selector(encodeBase64WithByteArray:);
  methods[13].selector = @selector(encodeBase64StringWithByteArray:);
  methods[14].selector = @selector(encodeBase64URLSafeWithByteArray:);
  methods[15].selector = @selector(encodeBase64URLSafeStringWithByteArray:);
  methods[16].selector = @selector(encodeBase64ChunkedWithByteArray:);
  methods[17].selector = @selector(encodeBase64WithByteArray:withBoolean:);
  methods[18].selector = @selector(encodeBase64WithByteArray:withBoolean:withBoolean:);
  methods[19].selector = @selector(encodeBase64WithByteArray:withBoolean:withBoolean:withInt:);
  methods[20].selector = @selector(decodeBase64WithNSString:);
  methods[21].selector = @selector(decodeBase64WithByteArray:);
  methods[22].selector = @selector(decodeIntegerWithByteArray:);
  methods[23].selector = @selector(encodeIntegerWithJavaMathBigInteger:);
  methods[24].selector = @selector(toIntegerBytesWithJavaMathBigInteger:);
  methods[25].selector = @selector(isInAlphabetWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITS_PER_ENCODED_BYTE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBase64_BITS_PER_ENCODED_BYTE, 0x1a, -1, -1, -1, -1 },
    { "BYTES_PER_UNENCODED_BLOCK", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBase64_BYTES_PER_UNENCODED_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "BYTES_PER_ENCODED_BLOCK", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "CHUNK_SEPARATOR", "[B", .constantValue.asLong = 0, 0x18, -1, 27, -1, -1 },
    { "STANDARD_ENCODE_TABLE", "[B", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "URL_SAFE_ENCODE_TABLE", "[B", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "DECODE_TABLE", "[B", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "MASK_6BITS", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBase64_MASK_6BITS, 0x1a, -1, -1, -1, -1 },
    { "encodeTable_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "decodeTable_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lineSeparator_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "decodeSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encodeSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "I", "I[B", "I[BZ", "encode", "[BIILOrgApacheCommonsCodecBinaryBaseNCodec_Context;", "decode", "isArrayByteBase64", "[B", (void *)&OrgApacheCommonsCodecBinaryBase64__Annotations$0, "isBase64", "B", "LNSString;", "encodeBase64", "encodeBase64String", "encodeBase64URLSafe", "encodeBase64URLSafeString", "encodeBase64Chunked", "[BZ", "[BZZ", "[BZZI", "decodeBase64", "decodeInteger", "encodeInteger", "LJavaMathBigInteger;", "toIntegerBytes", "isInAlphabet", &OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR, &OrgApacheCommonsCodecBinaryBase64_STANDARD_ENCODE_TABLE, &OrgApacheCommonsCodecBinaryBase64_URL_SAFE_ENCODE_TABLE, &OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBase64 = { "Base64", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x1, 26, 13, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBase64;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecBinaryBase64 class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR, [IOSByteArray newArrayWithBytes:(jbyte[]){ 0x000d, 0x000a } count:2]);
    JreStrongAssignAndConsume(&OrgApacheCommonsCodecBinaryBase64_STANDARD_ENCODE_TABLE, [IOSByteArray newArrayWithBytes:(jbyte[]){ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' } count:64]);
    JreStrongAssignAndConsume(&OrgApacheCommonsCodecBinaryBase64_URL_SAFE_ENCODE_TABLE, [IOSByteArray newArrayWithBytes:(jbyte[]){ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' } count:64]);
    JreStrongAssignAndConsume(&OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 } count:123]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecBinaryBase64)
  }
}

@end

void OrgApacheCommonsCodecBinaryBase64_init(OrgApacheCommonsCodecBinaryBase64 *self) {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_(self, 0);
}

OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBase64, init)
}

OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBase64, init)
}

void OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(OrgApacheCommonsCodecBinaryBase64 *self, jboolean urlSafe) {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(self, OrgApacheCommonsCodecBinaryBaseNCodec_MIME_CHUNK_SIZE, OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR, urlSafe);
}

OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(jboolean urlSafe) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithBoolean_, urlSafe)
}

OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(jboolean urlSafe) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithBoolean_, urlSafe)
}

void OrgApacheCommonsCodecBinaryBase64_initWithInt_(OrgApacheCommonsCodecBinaryBase64 *self, jint lineLength) {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(self, lineLength, OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR);
}

OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithInt_(jint lineLength) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithInt_, lineLength)
}

OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithInt_(jint lineLength) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithInt_, lineLength)
}

void OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(OrgApacheCommonsCodecBinaryBase64 *self, jint lineLength, IOSByteArray *lineSeparator) {
  OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(self, lineLength, lineSeparator, false);
}

OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(jint lineLength, IOSByteArray *lineSeparator) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithInt_withByteArray_, lineLength, lineSeparator)
}

OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_(jint lineLength, IOSByteArray *lineSeparator) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithInt_withByteArray_, lineLength, lineSeparator)
}

void OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(OrgApacheCommonsCodecBinaryBase64 *self, jint lineLength, IOSByteArray *lineSeparator, jboolean urlSafe) {
  OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_(self, OrgApacheCommonsCodecBinaryBase64_BYTES_PER_UNENCODED_BLOCK, OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK, lineLength, lineSeparator == nil ? 0 : lineSeparator->size_);
  JreStrongAssign(&self->decodeTable_, OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE);
  if (lineSeparator != nil) {
    if ([self containsAlphabetOrPadWithByteArray:lineSeparator]) {
      NSString *sep = OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_(lineSeparator);
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"lineSeparator must not contain base64 characters: [", sep, ']'));
    }
    if (lineLength > 0) {
      self->encodeSize_ = OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK + lineSeparator->size_;
      JreStrongAssignAndConsume(&self->lineSeparator_, [IOSByteArray newArrayWithLength:lineSeparator->size_]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lineSeparator, 0, self->lineSeparator_, 0, lineSeparator->size_);
    }
    else {
      self->encodeSize_ = OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK;
      JreStrongAssign(&self->lineSeparator_, nil);
    }
  }
  else {
    self->encodeSize_ = OrgApacheCommonsCodecBinaryBase64_BYTES_PER_ENCODED_BLOCK;
    JreStrongAssign(&self->lineSeparator_, nil);
  }
  self->decodeSize_ = self->encodeSize_ - 1;
  JreStrongAssign(&self->encodeTable_, urlSafe ? OrgApacheCommonsCodecBinaryBase64_URL_SAFE_ENCODE_TABLE : OrgApacheCommonsCodecBinaryBase64_STANDARD_ENCODE_TABLE);
}

OrgApacheCommonsCodecBinaryBase64 *new_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(jint lineLength, IOSByteArray *lineSeparator, jboolean urlSafe) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithInt_withByteArray_withBoolean_, lineLength, lineSeparator, urlSafe)
}

OrgApacheCommonsCodecBinaryBase64 *create_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(jint lineLength, IOSByteArray *lineSeparator, jboolean urlSafe) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBase64, initWithInt_withByteArray_withBoolean_, lineLength, lineSeparator, urlSafe)
}

jboolean OrgApacheCommonsCodecBinaryBase64_isArrayByteBase64WithByteArray_(IOSByteArray *arrayOctet) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_isBase64WithByteArray_(arrayOctet);
}

jboolean OrgApacheCommonsCodecBinaryBase64_isBase64WithByte_(jbyte octet) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return octet == OrgApacheCommonsCodecBinaryBaseNCodec_PAD_DEFAULT || (octet >= 0 && octet < ((IOSByteArray *) nil_chk(OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE))->size_ && IOSByteArray_Get(OrgApacheCommonsCodecBinaryBase64_DECODE_TABLE, octet) != -1);
}

jboolean OrgApacheCommonsCodecBinaryBase64_isBase64WithNSString_(NSString *base64) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_isBase64WithByteArray_(OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(base64));
}

jboolean OrgApacheCommonsCodecBinaryBase64_isBase64WithByteArray_(IOSByteArray *arrayOctet) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(arrayOctet))->size_; i++) {
    if (!OrgApacheCommonsCodecBinaryBase64_isBase64WithByte_(IOSByteArray_Get(arrayOctet, i)) && !OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(IOSByteArray_Get(arrayOctet, i))) {
      return false;
    }
  }
  return true;
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_(IOSByteArray *binaryData) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(binaryData, false);
}

NSString *OrgApacheCommonsCodecBinaryBase64_encodeBase64StringWithByteArray_(IOSByteArray *binaryData) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_(OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(binaryData, false));
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64URLSafeWithByteArray_(IOSByteArray *binaryData) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_(binaryData, false, true);
}

NSString *OrgApacheCommonsCodecBinaryBase64_encodeBase64URLSafeStringWithByteArray_(IOSByteArray *binaryData) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_(OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_(binaryData, false, true));
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64ChunkedWithByteArray_(IOSByteArray *binaryData) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(binaryData, true);
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(IOSByteArray *binaryData, jboolean isChunked) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_(binaryData, isChunked, false);
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_(IOSByteArray *binaryData, jboolean isChunked, jboolean urlSafe) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_withInt_(binaryData, isChunked, urlSafe, JavaLangInteger_MAX_VALUE);
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_withBoolean_withInt_(IOSByteArray *binaryData, jboolean isChunked, jboolean urlSafe, jint maxResultSize) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  if (binaryData == nil || binaryData->size_ == 0) {
    return binaryData;
  }
  OrgApacheCommonsCodecBinaryBase64 *b64 = isChunked ? create_OrgApacheCommonsCodecBinaryBase64_initWithBoolean_(urlSafe) : create_OrgApacheCommonsCodecBinaryBase64_initWithInt_withByteArray_withBoolean_(0, OrgApacheCommonsCodecBinaryBase64_CHUNK_SEPARATOR, urlSafe);
  jlong len = [b64 getEncodedLengthWithByteArray:binaryData];
  if (len > maxResultSize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$I", @"Input array too big, the output array would be bigger (", len, @") than the specified maximum size of ", maxResultSize));
  }
  return [b64 encodeWithByteArray:binaryData];
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_decodeBase64WithNSString_(NSString *base64String) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return [create_OrgApacheCommonsCodecBinaryBase64_init() decodeWithNSString:base64String];
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_decodeBase64WithByteArray_(IOSByteArray *base64Data) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return [create_OrgApacheCommonsCodecBinaryBase64_init() decodeWithByteArray:base64Data];
}

JavaMathBigInteger *OrgApacheCommonsCodecBinaryBase64_decodeIntegerWithByteArray_(IOSByteArray *pArray) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  return create_JavaMathBigInteger_initWithInt_withByteArray_(1, OrgApacheCommonsCodecBinaryBase64_decodeBase64WithByteArray_(pArray));
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_encodeIntegerWithJavaMathBigInteger_(JavaMathBigInteger *bigInt) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  if (bigInt == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"encodeInteger called with null parameter");
  }
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_withBoolean_(OrgApacheCommonsCodecBinaryBase64_toIntegerBytesWithJavaMathBigInteger_(bigInt), false);
}

IOSByteArray *OrgApacheCommonsCodecBinaryBase64_toIntegerBytesWithJavaMathBigInteger_(JavaMathBigInteger *bigInt) {
  OrgApacheCommonsCodecBinaryBase64_initialize();
  jint bitlen = [((JavaMathBigInteger *) nil_chk(bigInt)) bitLength];
  bitlen = JreLShift32((JreRShift32((bitlen + 7), 3)), 3);
  IOSByteArray *bigBytes = [bigInt toByteArray];
  if ((([bigInt bitLength] % 8) != 0) && ((([bigInt bitLength] / 8) + 1) == (bitlen / 8))) {
    return bigBytes;
  }
  jint startSrc = 0;
  jint len = ((IOSByteArray *) nil_chk(bigBytes))->size_;
  if (([bigInt bitLength] % 8) == 0) {
    startSrc = 1;
    len--;
  }
  jint startDst = bitlen / 8 - len;
  IOSByteArray *resizedBytes = [IOSByteArray arrayWithLength:bitlen / 8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bigBytes, startSrc, resizedBytes, startDst, len);
  return resizedBytes;
}

IOSObjectArray *OrgApacheCommonsCodecBinaryBase64__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBase64)
