//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/language/MatchRatingApproachEncoder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Locale.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/MatchRatingApproachEncoder.h"

inline NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_SPACE(void);
static NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SPACE = @" ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, SPACE, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_EMPTY(void);
static NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY = @"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, EMPTY, NSString *)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_ONE(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_ONE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, ONE, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_TWO(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_TWO 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, TWO, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_THREE(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_THREE 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, THREE, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_FOUR(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FOUR 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, FOUR, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_FIVE(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FIVE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, FIVE, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_SIX(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SIX 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, SIX, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_SEVEN(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SEVEN 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, SEVEN, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_EIGHT(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EIGHT 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, EIGHT, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_ELEVEN(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_ELEVEN 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, ELEVEN, jint)

inline jint OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_TWELVE(void);
#define OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_TWELVE 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, TWELVE, jint)

inline NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_PLAIN_ASCII(void);
static NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_PLAIN_ASCII = @"AaEeIiOoUuAaEeIiOoUuYyAaEeIiOoUuYyAaOoNnAaEeIiOoUuYyAaCcOoUu";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, PLAIN_ASCII, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_UNICODE(void);
static NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_UNICODE = @"\u00c0\u00e0\u00c8\u00e8\u00cc\u00ec\u00d2\u00f2\u00d9\u00f9\u00c1\u00e1\u00c9\u00e9\u00cd\u00ed\u00d3\u00f3\u00da\u00fa\u00dd\u00fd\u00c2\u00e2\u00ca\u00ea\u00ce\u00ee\u00d4\u00f4\u00db\u00fb\u0176\u0177\u00c3\u00e3\u00d5\u00f5\u00d1\u00f1\u00c4\u00e4\u00cb\u00eb\u00cf\u00ef\u00d6\u00f6\u00dc\u00fc\u0178\u00ff\u00c5\u00e5\u00c7\u00e7\u0150\u0151\u0170\u0171";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, UNICODE, NSString *)

inline IOSObjectArray *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_get_DOUBLE_CONSONANT(void);
static IOSObjectArray *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_DOUBLE_CONSONANT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, DOUBLE_CONSONANT, IOSObjectArray *)

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_encodeWithNSString_(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder *self, NSString *name);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder)

@implementation OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)cleanNameWithNSString:(NSString *)name {
  NSString *upperName = [((NSString *) nil_chk(name)) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
  IOSObjectArray *charsToTrim = [IOSObjectArray arrayWithObjects:(id[]){ @"\\-", @"[&]", @"\\'", @"\\.", @"[\\,]" } count:5 type:NSString_class_()];
  {
    IOSObjectArray *a__ = charsToTrim;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *str = *b__++;
      upperName = [((NSString *) nil_chk(upperName)) java_replaceAll:str withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
    }
  }
  upperName = [self removeAccentsWithNSString:upperName];
  upperName = [((NSString *) nil_chk(upperName)) java_replaceAll:@"\\s+" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  return upperName;
}

- (id)encodeWithId:(id)pObject {
  if (!([pObject isKindOfClass:[NSString class]])) {
    @throw create_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String");
  }
  return OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_encodeWithNSString_(self, (NSString *) cast_chk(pObject, [NSString class]));
}

- (NSString *)encodeWithNSString:(NSString *)name {
  return OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_encodeWithNSString_(self, name);
}

- (NSString *)getFirst3Last3WithNSString:(NSString *)name {
  jint nameLength = [((NSString *) nil_chk(name)) java_length];
  if (nameLength > OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SIX) {
    NSString *firstThree = [name java_substring:0 endIndex:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_THREE];
    NSString *lastThree = [name java_substring:nameLength - OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_THREE endIndex:nameLength];
    return JreStrcat("$$", firstThree, lastThree);
  }
  else {
    return name;
  }
}

- (jint)getMinRatingWithInt:(jint)sumLength {
  jint minRating = 0;
  if (sumLength <= OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FOUR) {
    minRating = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FIVE;
  }
  else if (sumLength >= OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FIVE && sumLength <= OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SEVEN) {
    minRating = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FOUR;
  }
  else if (sumLength >= OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EIGHT && sumLength <= OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_ELEVEN) {
    minRating = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_THREE;
  }
  else if (sumLength == OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_TWELVE) {
    minRating = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_TWO;
  }
  else {
    minRating = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_ONE;
  }
  return minRating;
}

- (jboolean)isEncodeEqualsWithNSString:(NSString *)name1
                          withNSString:(NSString *)name2 {
  if (name1 == nil || [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY)) java_equalsIgnoreCase:name1] || [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SPACE)) java_equalsIgnoreCase:name1]) {
    return false;
  }
  else if (name2 == nil || [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY)) java_equalsIgnoreCase:name2] || [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SPACE)) java_equalsIgnoreCase:name2]) {
    return false;
  }
  else if ([name1 java_length] == 1 || [name2 java_length] == 1) {
    return false;
  }
  else if ([name1 java_equalsIgnoreCase:name2]) {
    return true;
  }
  name1 = [self cleanNameWithNSString:name1];
  name2 = [self cleanNameWithNSString:name2];
  name1 = [self removeVowelsWithNSString:name1];
  name2 = [self removeVowelsWithNSString:name2];
  name1 = [self removeDoubleConsonantsWithNSString:name1];
  name2 = [self removeDoubleConsonantsWithNSString:name2];
  name1 = [self getFirst3Last3WithNSString:name1];
  name2 = [self getFirst3Last3WithNSString:name2];
  if (JavaLangMath_absWithInt_([((NSString *) nil_chk(name1)) java_length] - [((NSString *) nil_chk(name2)) java_length]) >= OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_THREE) {
    return false;
  }
  jint sumLength = JavaLangMath_absWithInt_([name1 java_length] + [name2 java_length]);
  jint minRating = 0;
  minRating = [self getMinRatingWithInt:sumLength];
  jint count = [self leftToRightThenRightToLeftProcessingWithNSString:name1 withNSString:name2];
  return count >= minRating;
}

- (jboolean)isVowelWithNSString:(NSString *)letter {
  return [((NSString *) nil_chk(letter)) java_equalsIgnoreCase:@"E"] || [letter java_equalsIgnoreCase:@"A"] || [letter java_equalsIgnoreCase:@"O"] || [letter java_equalsIgnoreCase:@"I"] || [letter java_equalsIgnoreCase:@"U"];
}

- (jint)leftToRightThenRightToLeftProcessingWithNSString:(NSString *)name1
                                            withNSString:(NSString *)name2 {
  IOSCharArray *name1Char = [((NSString *) nil_chk(name1)) java_toCharArray];
  IOSCharArray *name2Char = [((NSString *) nil_chk(name2)) java_toCharArray];
  jint name1Size = [name1 java_length] - 1;
  jint name2Size = [name2 java_length] - 1;
  NSString *name1LtRStart = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY;
  NSString *name1LtREnd = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY;
  NSString *name2RtLStart = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY;
  NSString *name2RtLEnd = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(name1Char))->size_; i++) {
    if (i > name2Size) {
      break;
    }
    name1LtRStart = [name1 java_substring:i endIndex:i + 1];
    name1LtREnd = [name1 java_substring:name1Size - i endIndex:name1Size - i + 1];
    name2RtLStart = [name2 java_substring:i endIndex:i + 1];
    name2RtLEnd = [name2 java_substring:name2Size - i endIndex:name2Size - i + 1];
    if ([((NSString *) nil_chk(name1LtRStart)) isEqual:name2RtLStart]) {
      *IOSCharArray_GetRef(name1Char, i) = ' ';
      *IOSCharArray_GetRef(nil_chk(name2Char), i) = ' ';
    }
    if ([((NSString *) nil_chk(name1LtREnd)) isEqual:name2RtLEnd]) {
      *IOSCharArray_GetRef(name1Char, name1Size - i) = ' ';
      *IOSCharArray_GetRef(nil_chk(name2Char), name2Size - i) = ' ';
    }
  }
  NSString *strA = [[NSString java_stringWithCharacters:name1Char] java_replaceAll:@"\\s+" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  NSString *strB = [[NSString java_stringWithCharacters:name2Char] java_replaceAll:@"\\s+" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  if ([((NSString *) nil_chk(strA)) java_length] > [((NSString *) nil_chk(strB)) java_length]) {
    return JavaLangMath_absWithInt_(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SIX - [strA java_length]);
  }
  else {
    return JavaLangMath_absWithInt_(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SIX - [strB java_length]);
  }
}

- (NSString *)removeAccentsWithNSString:(NSString *)accentedWord {
  if (accentedWord == nil) {
    return nil;
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  jint n = [accentedWord java_length];
  for (jint i = 0; i < n; i++) {
    jchar c = [accentedWord charAtWithInt:i];
    jint pos = [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_UNICODE)) java_indexOf:c];
    if (pos > -1) {
      [sb appendWithChar:[((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_PLAIN_ASCII)) charAtWithInt:pos]];
    }
    else {
      [sb appendWithChar:c];
    }
  }
  return [sb description];
}

- (NSString *)removeDoubleConsonantsWithNSString:(NSString *)name {
  NSString *replacedName = [((NSString *) nil_chk(name)) uppercaseString];
  {
    IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_DOUBLE_CONSONANT;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *dc = *b__++;
      if ([((NSString *) nil_chk(replacedName)) java_contains:dc]) {
        NSString *singleLetter = [((NSString *) nil_chk(dc)) java_substring:0 endIndex:1];
        replacedName = [replacedName java_replace:dc withSequence:singleLetter];
      }
    }
  }
  return replacedName;
}

- (NSString *)removeVowelsWithNSString:(NSString *)name {
  NSString *firstLetter = [((NSString *) nil_chk(name)) java_substring:0 endIndex:1];
  name = [name java_replaceAll:@"A" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  name = [((NSString *) nil_chk(name)) java_replaceAll:@"E" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  name = [((NSString *) nil_chk(name)) java_replaceAll:@"I" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  name = [((NSString *) nil_chk(name)) java_replaceAll:@"O" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  name = [((NSString *) nil_chk(name)) java_replaceAll:@"U" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY];
  name = [((NSString *) nil_chk(name)) java_replaceAll:@"\\s{2,}\\b" withReplacement:OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SPACE];
  if ([self isVowelWithNSString:firstLetter]) {
    return JreStrcat("$$", firstLetter, name);
  }
  else {
    return name;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 11, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 13, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 14, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cleanNameWithNSString:);
  methods[2].selector = @selector(encodeWithId:);
  methods[3].selector = @selector(encodeWithNSString:);
  methods[4].selector = @selector(getFirst3Last3WithNSString:);
  methods[5].selector = @selector(getMinRatingWithInt:);
  methods[6].selector = @selector(isEncodeEqualsWithNSString:withNSString:);
  methods[7].selector = @selector(isVowelWithNSString:);
  methods[8].selector = @selector(leftToRightThenRightToLeftProcessingWithNSString:withNSString:);
  methods[9].selector = @selector(removeAccentsWithNSString:);
  methods[10].selector = @selector(removeDoubleConsonantsWithNSString:);
  methods[11].selector = @selector(removeVowelsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPACE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "EMPTY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "ONE", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_ONE, 0x1a, -1, -1, -1, -1 },
    { "TWO", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_TWO, 0x1a, -1, -1, -1, -1 },
    { "THREE", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_THREE, 0x1a, -1, -1, -1, -1 },
    { "FOUR", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FOUR, 0x1a, -1, -1, -1, -1 },
    { "FIVE", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_FIVE, 0x1a, -1, -1, -1, -1 },
    { "SIX", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SIX, 0x1a, -1, -1, -1, -1 },
    { "SEVEN", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SEVEN, 0x1a, -1, -1, -1, -1 },
    { "EIGHT", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EIGHT, 0x1a, -1, -1, -1, -1 },
    { "ELEVEN", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_ELEVEN, 0x1a, -1, -1, -1, -1 },
    { "TWELVE", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_TWELVE, 0x1a, -1, -1, -1, -1 },
    { "PLAIN_ASCII", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "UNICODE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "DOUBLE_CONSONANT", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { "cleanName", "LNSString;", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "getFirst3Last3", "getMinRating", "I", "isEncodeEquals", "LNSString;LNSString;", "isVowel", "leftToRightThenRightToLeftProcessing", "removeAccents", "removeDoubleConsonants", "removeVowels", &OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SPACE, &OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY, &OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_PLAIN_ASCII, &OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_UNICODE, &OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_DOUBLE_CONSONANT };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder = { "MatchRatingApproachEncoder", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 12, 15, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_DOUBLE_CONSONANT, [IOSObjectArray newArrayWithObjects:(id[]){ @"BB", @"CC", @"DD", @"FF", @"GG", @"HH", @"JJ", @"KK", @"LL", @"MM", @"NN", @"PP", @"QQ", @"RR", @"SS", @"TT", @"VV", @"WW", @"XX", @"YY", @"ZZ" } count:21 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder)
  }
}

@end

void OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_init(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder *new_OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, init)
}

OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder *create_OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder, init)
}

NSString *OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_encodeWithNSString_(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder *self, NSString *name) {
  if (name == nil || [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY)) java_equalsIgnoreCase:name] || [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_SPACE)) java_equalsIgnoreCase:name] || [name java_length] == 1) {
    return OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder_EMPTY;
  }
  name = [self cleanNameWithNSString:name];
  name = [self removeVowelsWithNSString:name];
  name = [self removeDoubleConsonantsWithNSString:name];
  name = [self getFirst3Last3WithNSString:name];
  return name;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageMatchRatingApproachEncoder)
