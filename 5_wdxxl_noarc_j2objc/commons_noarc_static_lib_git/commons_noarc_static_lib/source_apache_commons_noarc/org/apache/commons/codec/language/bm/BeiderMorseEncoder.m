//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/language/bm/BeiderMorseEncoder.java
//

#include "J2ObjC_source.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/bm/BeiderMorseEncoder.h"
#include "org/apache/commons/codec/language/bm/NameType.h"
#include "org/apache/commons/codec/language/bm/PhoneticEngine.h"
#include "org/apache/commons/codec/language/bm/RuleType.h"

@interface OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder () {
 @public
  OrgApacheCommonsCodecLanguageBmPhoneticEngine *engine_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder, engine_, OrgApacheCommonsCodecLanguageBmPhoneticEngine *)

@implementation OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)encodeWithId:(id)source {
  if (!([source isKindOfClass:[NSString class]])) {
    @throw create_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"BeiderMorseEncoder encode parameter is not of type String");
  }
  return [self encodeWithNSString:(NSString *) cast_chk(source, [NSString class])];
}

- (NSString *)encodeWithNSString:(NSString *)source {
  if (source == nil) {
    return nil;
  }
  return [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) encodeWithNSString:source];
}

- (OrgApacheCommonsCodecLanguageBmNameType *)getNameType {
  return [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getNameType];
}

- (OrgApacheCommonsCodecLanguageBmRuleType *)getRuleType {
  return [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getRuleType];
}

- (jboolean)isConcat {
  return [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) isConcat];
}

- (void)setConcatWithBoolean:(jboolean)concat {
  JreStrongAssignAndConsume(&self->engine_, new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_withInt_([((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getNameType], [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getRuleType], concat, [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getMaxPhonemes]));
}

- (void)setNameTypeWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType {
  JreStrongAssignAndConsume(&self->engine_, new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_withInt_(nameType, [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getRuleType], [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) isConcat], [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getMaxPhonemes]));
}

- (void)setRuleTypeWithOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)ruleType {
  JreStrongAssignAndConsume(&self->engine_, new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_withInt_([((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getNameType], ruleType, [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) isConcat], [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getMaxPhonemes]));
}

- (void)setMaxPhonemesWithInt:(jint)maxPhonemes {
  JreStrongAssignAndConsume(&self->engine_, new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_withInt_([((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getNameType], [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) getRuleType], [((OrgApacheCommonsCodecLanguageBmPhoneticEngine *) nil_chk(self->engine_)) isConcat], maxPhonemes));
}

- (void)dealloc {
  RELEASE_(engine_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmNameType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRuleType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeWithId:);
  methods[2].selector = @selector(encodeWithNSString:);
  methods[3].selector = @selector(getNameType);
  methods[4].selector = @selector(getRuleType);
  methods[5].selector = @selector(isConcat);
  methods[6].selector = @selector(setConcatWithBoolean:);
  methods[7].selector = @selector(setNameTypeWithOrgApacheCommonsCodecLanguageBmNameType:);
  methods[8].selector = @selector(setRuleTypeWithOrgApacheCommonsCodecLanguageBmRuleType:);
  methods[9].selector = @selector(setMaxPhonemesWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "engine_", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "LNSString;", "setConcat", "Z", "setNameType", "LOrgApacheCommonsCodecLanguageBmNameType;", "setRuleType", "LOrgApacheCommonsCodecLanguageBmRuleType;", "setMaxPhonemes", "I" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder = { "BeiderMorseEncoder", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder;
}

@end

void OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder_init(OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->engine_, new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_(JreLoadEnum(OrgApacheCommonsCodecLanguageBmNameType, GENERIC), JreLoadEnum(OrgApacheCommonsCodecLanguageBmRuleType, APPROX), true));
}

OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder *new_OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder, init)
}

OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder *create_OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmBeiderMorseEncoder)
