//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/builder/HashCodeBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InternalError.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/reflect/AccessibleObject.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/Validate.h"
#include "org/apache/commons/lang3/builder/HashCodeBuilder.h"
#include "org/apache/commons/lang3/builder/IDKey.h"
#include "org/apache/commons/lang3/builder/ReflectionToStringBuilder.h"

@interface OrgApacheCommonsLang3BuilderHashCodeBuilder () {
 @public
  jint iConstant_;
  jint iTotal_;
}

+ (void)reflectionAppendWithId:(id)object
                  withIOSClass:(IOSClass *)clazz
withOrgApacheCommonsLang3BuilderHashCodeBuilder:(OrgApacheCommonsLang3BuilderHashCodeBuilder *)builder
                   withBoolean:(jboolean)useTransients
             withNSStringArray:(IOSObjectArray *)excludeFields;

@end

inline jint OrgApacheCommonsLang3BuilderHashCodeBuilder_get_DEFAULT_INITIAL_VALUE(void);
#define OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_INITIAL_VALUE 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3BuilderHashCodeBuilder, DEFAULT_INITIAL_VALUE, jint)

inline jint OrgApacheCommonsLang3BuilderHashCodeBuilder_get_DEFAULT_MULTIPLIER_VALUE(void);
#define OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_MULTIPLIER_VALUE 37
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3BuilderHashCodeBuilder, DEFAULT_MULTIPLIER_VALUE, jint)

inline JavaLangThreadLocal *OrgApacheCommonsLang3BuilderHashCodeBuilder_get_REGISTRY(void);
static JavaLangThreadLocal *OrgApacheCommonsLang3BuilderHashCodeBuilder_REGISTRY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3BuilderHashCodeBuilder, REGISTRY, JavaLangThreadLocal *)

__attribute__((unused)) static void OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionAppendWithId_withIOSClass_withOrgApacheCommonsLang3BuilderHashCodeBuilder_withBoolean_withNSStringArray_(id object, IOSClass *clazz, OrgApacheCommonsLang3BuilderHashCodeBuilder *builder, jboolean useTransients, IOSObjectArray *excludeFields);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3BuilderHashCodeBuilder)

@implementation OrgApacheCommonsLang3BuilderHashCodeBuilder

+ (id<JavaUtilSet>)getRegistry {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry();
}

+ (jboolean)isRegisteredWithId:(id)value {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_isRegisteredWithId_(value);
}

+ (void)reflectionAppendWithId:(id)object
                  withIOSClass:(IOSClass *)clazz
withOrgApacheCommonsLang3BuilderHashCodeBuilder:(OrgApacheCommonsLang3BuilderHashCodeBuilder *)builder
                   withBoolean:(jboolean)useTransients
             withNSStringArray:(IOSObjectArray *)excludeFields {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionAppendWithId_withIOSClass_withOrgApacheCommonsLang3BuilderHashCodeBuilder_withBoolean_withNSStringArray_(object, clazz, builder, useTransients, excludeFields);
}

+ (jint)reflectionHashCodeWithInt:(jint)initialNonZeroOddNumber
                          withInt:(jint)multiplierNonZeroOddNumber
                           withId:(id)object {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object);
}

+ (jint)reflectionHashCodeWithInt:(jint)initialNonZeroOddNumber
                          withInt:(jint)multiplierNonZeroOddNumber
                           withId:(id)object
                      withBoolean:(jboolean)testTransients {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients);
}

+ (jint)reflectionHashCodeWithInt:(jint)initialNonZeroOddNumber
                          withInt:(jint)multiplierNonZeroOddNumber
                           withId:(id)object
                      withBoolean:(jboolean)testTransients
                     withIOSClass:(IOSClass *)reflectUpToClass
                withNSStringArray:(IOSObjectArray *)excludeFields {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_withIOSClass_withNSStringArray_(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, reflectUpToClass, excludeFields);
}

+ (jint)reflectionHashCodeWithId:(id)object
                     withBoolean:(jboolean)testTransients {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withBoolean_(object, testTransients);
}

+ (jint)reflectionHashCodeWithId:(id)object
          withJavaUtilCollection:(id<JavaUtilCollection>)excludeFields {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withJavaUtilCollection_(object, excludeFields);
}

+ (jint)reflectionHashCodeWithId:(id)object
               withNSStringArray:(IOSObjectArray *)excludeFields {
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withNSStringArray_(object, excludeFields);
}

+ (void)register__WithId:(id)value {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_register__WithId_(value);
}

+ (void)unregisterWithId:(id)value {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_unregisterWithId_(value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialOddNumber
                    withInt:(jint)multiplierOddNumber {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initWithInt_withInt_(self, initialOddNumber, multiplierOddNumber);
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithBoolean:(jboolean)value {
  iTotal_ = iTotal_ * iConstant_ + (value ? 0 : 1);
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithBooleanArray:(IOSBooleanArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSBooleanArray *a__ = array;
      jboolean const *b__ = a__->buffer_;
      jboolean const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jboolean element = *b__++;
        (void) [self appendWithBoolean:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithByte:(jbyte)value {
  iTotal_ = iTotal_ * iConstant_ + value;
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithByteArray:(IOSByteArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSByteArray *a__ = array;
      jbyte const *b__ = a__->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte element = *b__++;
        (void) [self appendWithByte:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithChar:(jchar)value {
  iTotal_ = iTotal_ * iConstant_ + value;
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithCharArray:(IOSCharArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSCharArray *a__ = array;
      jchar const *b__ = a__->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar element = *b__++;
        (void) [self appendWithChar:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithDouble:(jdouble)value {
  return [self appendWithLong:JavaLangDouble_doubleToLongBitsWithDouble_(value)];
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithDoubleArray:(IOSDoubleArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSDoubleArray *a__ = array;
      jdouble const *b__ = a__->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble element = *b__++;
        (void) [self appendWithDouble:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithFloat:(jfloat)value {
  iTotal_ = iTotal_ * iConstant_ + JavaLangFloat_floatToIntBitsWithFloat_(value);
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithFloatArray:(IOSFloatArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSFloatArray *a__ = array;
      jfloat const *b__ = a__->buffer_;
      jfloat const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jfloat element = *b__++;
        (void) [self appendWithFloat:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithInt:(jint)value {
  iTotal_ = iTotal_ * iConstant_ + value;
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithIntArray:(IOSIntArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSIntArray *a__ = array;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint element = *b__++;
        (void) [self appendWithInt:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithLong:(jlong)value {
  iTotal_ = iTotal_ * iConstant_ + ((jint) (value ^ (JreRShift64(value, 32))));
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithLongArray:(IOSLongArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSLongArray *a__ = array;
      jlong const *b__ = a__->buffer_;
      jlong const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jlong element = *b__++;
        (void) [self appendWithLong:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithId:(id)object {
  if (object == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    if ([[object java_getClass] isArray]) {
      if ([object isKindOfClass:[IOSLongArray class]]) {
        (void) [self appendWithLongArray:(IOSLongArray *) cast_chk(object, [IOSLongArray class])];
      }
      else if ([object isKindOfClass:[IOSIntArray class]]) {
        (void) [self appendWithIntArray:(IOSIntArray *) cast_chk(object, [IOSIntArray class])];
      }
      else if ([object isKindOfClass:[IOSShortArray class]]) {
        (void) [self appendWithShortArray:(IOSShortArray *) cast_chk(object, [IOSShortArray class])];
      }
      else if ([object isKindOfClass:[IOSCharArray class]]) {
        (void) [self appendWithCharArray:(IOSCharArray *) cast_chk(object, [IOSCharArray class])];
      }
      else if ([object isKindOfClass:[IOSByteArray class]]) {
        (void) [self appendWithByteArray:(IOSByteArray *) cast_chk(object, [IOSByteArray class])];
      }
      else if ([object isKindOfClass:[IOSDoubleArray class]]) {
        (void) [self appendWithDoubleArray:(IOSDoubleArray *) cast_chk(object, [IOSDoubleArray class])];
      }
      else if ([object isKindOfClass:[IOSFloatArray class]]) {
        (void) [self appendWithFloatArray:(IOSFloatArray *) cast_chk(object, [IOSFloatArray class])];
      }
      else if ([object isKindOfClass:[IOSBooleanArray class]]) {
        (void) [self appendWithBooleanArray:(IOSBooleanArray *) cast_chk(object, [IOSBooleanArray class])];
      }
      else {
        (void) [self appendWithNSObjectArray:(IOSObjectArray *) cast_check(object, IOSClass_arrayType(NSObject_class_(), 1))];
      }
    }
    else {
      iTotal_ = iTotal_ * iConstant_ + ((jint) [object hash]);
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSObjectArray *a__ = array;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id element = *b__++;
        (void) [self appendWithId:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithShort:(jshort)value {
  iTotal_ = iTotal_ * iConstant_ + value;
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendWithShortArray:(IOSShortArray *)array {
  if (array == nil) {
    iTotal_ = iTotal_ * iConstant_;
  }
  else {
    {
      IOSShortArray *a__ = array;
      jshort const *b__ = a__->buffer_;
      jshort const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jshort element = *b__++;
        (void) [self appendWithShort:element];
      }
    }
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderHashCodeBuilder *)appendSuperWithInt:(jint)superHashCode {
  iTotal_ = iTotal_ * iConstant_ + superHashCode;
  return self;
}

- (jint)toHashCode {
  return iTotal_;
}

- (JavaLangInteger *)build {
  return JavaLangInteger_valueOfWithInt_([self toHashCode]);
}

- (NSUInteger)hash {
  return [self toHashCode];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilSet;", 0x8, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 6, 9, -1, 10, -1, -1 },
    { NULL, "I", 0x9, 6, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x89, 6, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 16, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 21, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 23, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 25, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 26, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 27, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 28, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 29, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 30, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 31, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 32, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 34, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 18, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderHashCodeBuilder;", 0x1, 36, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getRegistry);
  methods[1].selector = @selector(isRegisteredWithId:);
  methods[2].selector = @selector(reflectionAppendWithId:withIOSClass:withOrgApacheCommonsLang3BuilderHashCodeBuilder:withBoolean:withNSStringArray:);
  methods[3].selector = @selector(reflectionHashCodeWithInt:withInt:withId:);
  methods[4].selector = @selector(reflectionHashCodeWithInt:withInt:withId:withBoolean:);
  methods[5].selector = @selector(reflectionHashCodeWithInt:withInt:withId:withBoolean:withIOSClass:withNSStringArray:);
  methods[6].selector = @selector(reflectionHashCodeWithId:withBoolean:);
  methods[7].selector = @selector(reflectionHashCodeWithId:withJavaUtilCollection:);
  methods[8].selector = @selector(reflectionHashCodeWithId:withNSStringArray:);
  methods[9].selector = @selector(register__WithId:);
  methods[10].selector = @selector(unregisterWithId:);
  methods[11].selector = @selector(init);
  methods[12].selector = @selector(initWithInt:withInt:);
  methods[13].selector = @selector(appendWithBoolean:);
  methods[14].selector = @selector(appendWithBooleanArray:);
  methods[15].selector = @selector(appendWithByte:);
  methods[16].selector = @selector(appendWithByteArray:);
  methods[17].selector = @selector(appendWithChar:);
  methods[18].selector = @selector(appendWithCharArray:);
  methods[19].selector = @selector(appendWithDouble:);
  methods[20].selector = @selector(appendWithDoubleArray:);
  methods[21].selector = @selector(appendWithFloat:);
  methods[22].selector = @selector(appendWithFloatArray:);
  methods[23].selector = @selector(appendWithInt:);
  methods[24].selector = @selector(appendWithIntArray:);
  methods[25].selector = @selector(appendWithLong:);
  methods[26].selector = @selector(appendWithLongArray:);
  methods[27].selector = @selector(appendWithId:);
  methods[28].selector = @selector(appendWithNSObjectArray:);
  methods[29].selector = @selector(appendWithShort:);
  methods[30].selector = @selector(appendWithShortArray:);
  methods[31].selector = @selector(appendSuperWithInt:);
  methods[32].selector = @selector(toHashCode);
  methods[33].selector = @selector(build);
  methods[34].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INITIAL_VALUE", "I", .constantValue.asInt = OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_INITIAL_VALUE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MULTIPLIER_VALUE", "I", .constantValue.asInt = OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_MULTIPLIER_VALUE, 0x1a, -1, -1, -1, -1 },
    { "REGISTRY", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 38, 39, -1 },
    { "iConstant_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iTotal_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Set<Lorg/apache/commons/lang3/builder/IDKey;>;", "isRegistered", "LNSObject;", "reflectionAppend", "LNSObject;LIOSClass;LOrgApacheCommonsLang3BuilderHashCodeBuilder;Z[LNSString;", "(Ljava/lang/Object;Ljava/lang/Class<*>;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V", "reflectionHashCode", "IILNSObject;", "IILNSObject;Z", "IILNSObject;ZLIOSClass;[LNSString;", "<T:Ljava/lang/Object;>(IITT;ZLjava/lang/Class<-TT;>;[Ljava/lang/String;)I", "LNSObject;Z", "LNSObject;LJavaUtilCollection;", "(Ljava/lang/Object;Ljava/util/Collection<Ljava/lang/String;>;)I", "LNSObject;[LNSString;", "register", "unregister", "II", "append", "Z", "[Z", "B", "[B", "C", "[C", "D", "[D", "F", "[F", "I", "[I", "J", "[J", "[LNSObject;", "S", "[S", "appendSuper", "hashCode", &OrgApacheCommonsLang3BuilderHashCodeBuilder_REGISTRY, "Ljava/lang/ThreadLocal<Ljava/util/Set<Lorg/apache/commons/lang3/builder/IDKey;>;>;", "Ljava/lang/Object;Lorg/apache/commons/lang3/builder/Builder<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3BuilderHashCodeBuilder = { "HashCodeBuilder", "org.apache.commons.lang3.builder", ptrTable, methods, fields, 7, 0x1, 35, 5, -1, -1, -1, 40, -1 };
  return &_OrgApacheCommonsLang3BuilderHashCodeBuilder;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3BuilderHashCodeBuilder class]) {
    OrgApacheCommonsLang3BuilderHashCodeBuilder_REGISTRY = new_JavaLangThreadLocal_init();
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3BuilderHashCodeBuilder)
  }
}

@end

id<JavaUtilSet> OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry() {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  return [((JavaLangThreadLocal *) nil_chk(OrgApacheCommonsLang3BuilderHashCodeBuilder_REGISTRY)) get];
}

jboolean OrgApacheCommonsLang3BuilderHashCodeBuilder_isRegisteredWithId_(id value) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  id<JavaUtilSet> registry = OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry();
  return registry != nil && [registry containsWithId:new_OrgApacheCommonsLang3BuilderIDKey_initWithId_(value)];
}

void OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionAppendWithId_withIOSClass_withOrgApacheCommonsLang3BuilderHashCodeBuilder_withBoolean_withNSStringArray_(id object, IOSClass *clazz, OrgApacheCommonsLang3BuilderHashCodeBuilder *builder, jboolean useTransients, IOSObjectArray *excludeFields) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  if (OrgApacheCommonsLang3BuilderHashCodeBuilder_isRegisteredWithId_(object)) {
    return;
  }
  @try {
    OrgApacheCommonsLang3BuilderHashCodeBuilder_register__WithId_(object);
    IOSObjectArray *fields = [((IOSClass *) nil_chk(clazz)) getDeclaredFields];
    JavaLangReflectAccessibleObject_setAccessibleWithJavaLangReflectAccessibleObjectArray_withBoolean_(fields, true);
    {
      IOSObjectArray *a__ = fields;
      JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *field = *b__++;
        if (!OrgApacheCommonsLang3ArrayUtils_containsWithNSObjectArray_withId_(excludeFields, [((JavaLangReflectField *) nil_chk(field)) getName]) && ([((NSString *) nil_chk([field getName])) java_indexOf:'$'] == -1) && (useTransients || !JavaLangReflectModifier_isTransientWithInt_([field getModifiers])) && (!JavaLangReflectModifier_isStaticWithInt_([field getModifiers]))) {
          @try {
            id fieldValue = [field getWithId:object];
            (void) [((OrgApacheCommonsLang3BuilderHashCodeBuilder *) nil_chk(builder)) appendWithId:fieldValue];
          }
          @catch (JavaLangIllegalAccessException *e) {
            @throw new_JavaLangInternalError_initWithNSString_(@"Unexpected IllegalAccessException");
          }
        }
      }
    }
  }
  @finally {
    OrgApacheCommonsLang3BuilderHashCodeBuilder_unregisterWithId_(object);
  }
}

jint OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_(jint initialNonZeroOddNumber, jint multiplierNonZeroOddNumber, id object) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_withIOSClass_withNSStringArray_(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, nil, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

jint OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_(jint initialNonZeroOddNumber, jint multiplierNonZeroOddNumber, id object, jboolean testTransients) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_withIOSClass_withNSStringArray_(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, nil, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

jint OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_withIOSClass_withNSStringArray_(jint initialNonZeroOddNumber, jint multiplierNonZeroOddNumber, id object, jboolean testTransients, IOSClass *reflectUpToClass, IOSObjectArray *excludeFields) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  if (object == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The object to build a hash code for must not be null");
  }
  OrgApacheCommonsLang3BuilderHashCodeBuilder *builder = new_OrgApacheCommonsLang3BuilderHashCodeBuilder_initWithInt_withInt_(initialNonZeroOddNumber, multiplierNonZeroOddNumber);
  IOSClass *clazz = [object java_getClass];
  OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionAppendWithId_withIOSClass_withOrgApacheCommonsLang3BuilderHashCodeBuilder_withBoolean_withNSStringArray_(object, clazz, builder, testTransients, excludeFields);
  while ([((IOSClass *) nil_chk(clazz)) getSuperclass] != nil && clazz != reflectUpToClass) {
    clazz = [clazz getSuperclass];
    OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionAppendWithId_withIOSClass_withOrgApacheCommonsLang3BuilderHashCodeBuilder_withBoolean_withNSStringArray_(object, clazz, builder, testTransients, excludeFields);
  }
  return [builder toHashCode];
}

jint OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withBoolean_(id object, jboolean testTransients) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_withIOSClass_withNSStringArray_(OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_INITIAL_VALUE, OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_MULTIPLIER_VALUE, object, testTransients, nil, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

jint OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withJavaUtilCollection_(id object, id<JavaUtilCollection> excludeFields) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withNSStringArray_(object, OrgApacheCommonsLang3BuilderReflectionToStringBuilder_toNoNullStringArrayWithJavaUtilCollection_(excludeFields));
}

jint OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithId_withNSStringArray_(id object, IOSObjectArray *excludeFields) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  return OrgApacheCommonsLang3BuilderHashCodeBuilder_reflectionHashCodeWithInt_withInt_withId_withBoolean_withIOSClass_withNSStringArray_(OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_INITIAL_VALUE, OrgApacheCommonsLang3BuilderHashCodeBuilder_DEFAULT_MULTIPLIER_VALUE, object, false, nil, excludeFields);
}

void OrgApacheCommonsLang3BuilderHashCodeBuilder_register__WithId_(id value) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  @synchronized(OrgApacheCommonsLang3BuilderHashCodeBuilder_class_()) {
    if (OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry() == nil) {
      [((JavaLangThreadLocal *) nil_chk(OrgApacheCommonsLang3BuilderHashCodeBuilder_REGISTRY)) setWithId:new_JavaUtilHashSet_init()];
    }
  }
  [((id<JavaUtilSet>) nil_chk(OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry())) addWithId:new_OrgApacheCommonsLang3BuilderIDKey_initWithId_(value)];
}

void OrgApacheCommonsLang3BuilderHashCodeBuilder_unregisterWithId_(id value) {
  OrgApacheCommonsLang3BuilderHashCodeBuilder_initialize();
  id<JavaUtilSet> registry = OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry();
  if (registry != nil) {
    [registry removeWithId:new_OrgApacheCommonsLang3BuilderIDKey_initWithId_(value)];
    @synchronized(OrgApacheCommonsLang3BuilderHashCodeBuilder_class_()) {
      registry = OrgApacheCommonsLang3BuilderHashCodeBuilder_getRegistry();
      if (registry != nil && [registry isEmpty]) {
        [((JavaLangThreadLocal *) nil_chk(OrgApacheCommonsLang3BuilderHashCodeBuilder_REGISTRY)) remove];
      }
    }
  }
}

void OrgApacheCommonsLang3BuilderHashCodeBuilder_init(OrgApacheCommonsLang3BuilderHashCodeBuilder *self) {
  NSObject_init(self);
  self->iTotal_ = 0;
  self->iConstant_ = 37;
  self->iTotal_ = 17;
}

OrgApacheCommonsLang3BuilderHashCodeBuilder *new_OrgApacheCommonsLang3BuilderHashCodeBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3BuilderHashCodeBuilder, init)
}

OrgApacheCommonsLang3BuilderHashCodeBuilder *create_OrgApacheCommonsLang3BuilderHashCodeBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3BuilderHashCodeBuilder, init)
}

void OrgApacheCommonsLang3BuilderHashCodeBuilder_initWithInt_withInt_(OrgApacheCommonsLang3BuilderHashCodeBuilder *self, jint initialOddNumber, jint multiplierOddNumber) {
  NSObject_init(self);
  self->iTotal_ = 0;
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(initialOddNumber % 2 != 0, @"HashCodeBuilder requires an odd initial value", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(multiplierOddNumber % 2 != 0, @"HashCodeBuilder requires an odd multiplier", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  self->iConstant_ = multiplierOddNumber;
  self->iTotal_ = initialOddNumber;
}

OrgApacheCommonsLang3BuilderHashCodeBuilder *new_OrgApacheCommonsLang3BuilderHashCodeBuilder_initWithInt_withInt_(jint initialOddNumber, jint multiplierOddNumber) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3BuilderHashCodeBuilder, initWithInt_withInt_, initialOddNumber, multiplierOddNumber)
}

OrgApacheCommonsLang3BuilderHashCodeBuilder *create_OrgApacheCommonsLang3BuilderHashCodeBuilder_initWithInt_withInt_(jint initialOddNumber, jint multiplierOddNumber) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3BuilderHashCodeBuilder, initWithInt_withInt_, initialOddNumber, multiplierOddNumber)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3BuilderHashCodeBuilder)
