//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/mutable/MutableDouble.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "org/apache/commons/lang3/mutable/MutableDouble.h"

@interface OrgApacheCommonsLang3MutableMutableDouble () {
 @public
  jdouble value_;
}

@end

inline jlong OrgApacheCommonsLang3MutableMutableDouble_get_serialVersionUID(void);
#define OrgApacheCommonsLang3MutableMutableDouble_serialVersionUID 1587163916LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3MutableMutableDouble, serialVersionUID, jlong)

@implementation OrgApacheCommonsLang3MutableMutableDouble

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3MutableMutableDouble_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)initWithDouble:(jdouble)value {
  OrgApacheCommonsLang3MutableMutableDouble_initWithDouble_(self, value);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSNumber:(NSNumber *)value {
  OrgApacheCommonsLang3MutableMutableDouble_initWithNSNumber_(self, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)value {
  OrgApacheCommonsLang3MutableMutableDouble_initWithNSString_(self, value);
  return self;
}

- (JavaLangDouble *)getValue {
  return JavaLangDouble_valueOfWithDouble_(self->value_);
}

- (void)setValueWithDouble:(jdouble)value {
  self->value_ = value;
}

- (void)setValueWithId:(NSNumber *)value {
  self->value_ = [((NSNumber *) nil_chk(value)) doubleValue];
}

- (jboolean)isNaN {
  return JavaLangDouble_isNaNWithDouble_(value_);
}

- (jboolean)isInfinite {
  return JavaLangDouble_isInfiniteWithDouble_(value_);
}

- (void)increment {
  value_++;
}

- (void)decrement {
  value_--;
}

- (void)addWithDouble:(jdouble)operand {
  JrePlusAssignDoubleD(&self->value_, operand);
}

- (void)addWithNSNumber:(NSNumber *)operand {
  JrePlusAssignDoubleD(&self->value_, [((NSNumber *) nil_chk(operand)) doubleValue]);
}

- (void)subtractWithDouble:(jdouble)operand {
  JreMinusAssignDoubleD(&self->value_, operand);
}

- (void)subtractWithNSNumber:(NSNumber *)operand {
  JreMinusAssignDoubleD(&self->value_, [((NSNumber *) nil_chk(operand)) doubleValue]);
}

- (jint)intValue {
  return JreFpToInt(value_);
}

- (jlong)longLongValue {
  return JreFpToLong(value_);
}

- (jfloat)floatValue {
  return (jfloat) value_;
}

- (jdouble)doubleValue {
  return value_;
}

- (JavaLangDouble *)toDouble {
  return JavaLangDouble_valueOfWithDouble_([self doubleValue]);
}

- (jboolean)isEqual:(id)obj {
  return [obj isKindOfClass:[OrgApacheCommonsLang3MutableMutableDouble class]] && JavaLangDouble_doubleToLongBitsWithDouble_(((OrgApacheCommonsLang3MutableMutableDouble *) nil_chk(((OrgApacheCommonsLang3MutableMutableDouble *) cast_chk(obj, [OrgApacheCommonsLang3MutableMutableDouble class]))))->value_) == JavaLangDouble_doubleToLongBitsWithDouble_(value_);
}

- (NSUInteger)hash {
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(value_);
  return (jint) (bits ^ JreURShift64(bits, 32));
}

- (jint)compareToWithId:(OrgApacheCommonsLang3MutableMutableDouble *)other {
  (void) cast_chk(other, [OrgApacheCommonsLang3MutableMutableDouble class]);
  return JavaLangDouble_compareWithDouble_withDouble_(self->value_, ((OrgApacheCommonsLang3MutableMutableDouble *) nil_chk(other))->value_);
}

- (NSString *)description {
  return NSString_java_valueOfDouble_(value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithDouble:);
  methods[2].selector = @selector(initWithNSNumber:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(setValueWithDouble:);
  methods[6].selector = @selector(setValueWithId:);
  methods[7].selector = @selector(isNaN);
  methods[8].selector = @selector(isInfinite);
  methods[9].selector = @selector(increment);
  methods[10].selector = @selector(decrement);
  methods[11].selector = @selector(addWithDouble:);
  methods[12].selector = @selector(addWithNSNumber:);
  methods[13].selector = @selector(subtractWithDouble:);
  methods[14].selector = @selector(subtractWithNSNumber:);
  methods[15].selector = @selector(intValue);
  methods[16].selector = @selector(longLongValue);
  methods[17].selector = @selector(floatValue);
  methods[18].selector = @selector(doubleValue);
  methods[19].selector = @selector(toDouble);
  methods[20].selector = @selector(isEqual:);
  methods[21].selector = @selector(hash);
  methods[22].selector = @selector(compareToWithId:);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3MutableMutableDouble_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "D", "LNSNumber;", "LNSString;", "LJavaLangNumberFormatException;", "setValue", "add", "subtract", "longValue", "equals", "LNSObject;", "hashCode", "compareTo", "LOrgApacheCommonsLang3MutableMutableDouble;", "toString", "Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/mutable/MutableDouble;>;Lorg/apache/commons/lang3/mutable/Mutable<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3MutableMutableDouble = { "MutableDouble", "org.apache.commons.lang3.mutable", ptrTable, methods, fields, 7, 0x1, 24, 2, -1, -1, -1, 14, -1 };
  return &_OrgApacheCommonsLang3MutableMutableDouble;
}

@end

void OrgApacheCommonsLang3MutableMutableDouble_init(OrgApacheCommonsLang3MutableMutableDouble *self) {
  NSNumber_init(self);
}

OrgApacheCommonsLang3MutableMutableDouble *new_OrgApacheCommonsLang3MutableMutableDouble_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableDouble, init)
}

OrgApacheCommonsLang3MutableMutableDouble *create_OrgApacheCommonsLang3MutableMutableDouble_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableDouble, init)
}

void OrgApacheCommonsLang3MutableMutableDouble_initWithDouble_(OrgApacheCommonsLang3MutableMutableDouble *self, jdouble value) {
  NSNumber_init(self);
  self->value_ = value;
}

OrgApacheCommonsLang3MutableMutableDouble *new_OrgApacheCommonsLang3MutableMutableDouble_initWithDouble_(jdouble value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableDouble, initWithDouble_, value)
}

OrgApacheCommonsLang3MutableMutableDouble *create_OrgApacheCommonsLang3MutableMutableDouble_initWithDouble_(jdouble value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableDouble, initWithDouble_, value)
}

void OrgApacheCommonsLang3MutableMutableDouble_initWithNSNumber_(OrgApacheCommonsLang3MutableMutableDouble *self, NSNumber *value) {
  NSNumber_init(self);
  self->value_ = [((NSNumber *) nil_chk(value)) doubleValue];
}

OrgApacheCommonsLang3MutableMutableDouble *new_OrgApacheCommonsLang3MutableMutableDouble_initWithNSNumber_(NSNumber *value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableDouble, initWithNSNumber_, value)
}

OrgApacheCommonsLang3MutableMutableDouble *create_OrgApacheCommonsLang3MutableMutableDouble_initWithNSNumber_(NSNumber *value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableDouble, initWithNSNumber_, value)
}

void OrgApacheCommonsLang3MutableMutableDouble_initWithNSString_(OrgApacheCommonsLang3MutableMutableDouble *self, NSString *value) {
  NSNumber_init(self);
  self->value_ = JavaLangDouble_parseDoubleWithNSString_(value);
}

OrgApacheCommonsLang3MutableMutableDouble *new_OrgApacheCommonsLang3MutableMutableDouble_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableDouble, initWithNSString_, value)
}

OrgApacheCommonsLang3MutableMutableDouble *create_OrgApacheCommonsLang3MutableMutableDouble_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableDouble, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3MutableMutableDouble)
