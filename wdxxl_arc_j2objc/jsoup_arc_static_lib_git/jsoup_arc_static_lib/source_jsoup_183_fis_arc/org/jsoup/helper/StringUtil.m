//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/helper/StringUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "org/jsoup/helper/StringUtil.h"

inline IOSObjectArray *OrgJsoupHelperStringUtil_get_padding(void);
static IOSObjectArray *OrgJsoupHelperStringUtil_padding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupHelperStringUtil, padding, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(OrgJsoupHelperStringUtil)

@implementation OrgJsoupHelperStringUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupHelperStringUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)joinWithJavaUtilCollection:(id<JavaUtilCollection>)strings
                            withNSString:(NSString *)sep {
  return OrgJsoupHelperStringUtil_joinWithJavaUtilCollection_withNSString_(strings, sep);
}

+ (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)strings
                          withNSString:(NSString *)sep {
  return OrgJsoupHelperStringUtil_joinWithJavaUtilIterator_withNSString_(strings, sep);
}

+ (NSString *)paddingWithInt:(jint)width {
  return OrgJsoupHelperStringUtil_paddingWithInt_(width);
}

+ (jboolean)isBlankWithNSString:(NSString *)string {
  return OrgJsoupHelperStringUtil_isBlankWithNSString_(string);
}

+ (jboolean)isNumericWithNSString:(NSString *)string {
  return OrgJsoupHelperStringUtil_isNumericWithNSString_(string);
}

+ (jboolean)isWhitespaceWithInt:(jint)c {
  return OrgJsoupHelperStringUtil_isWhitespaceWithInt_(c);
}

+ (NSString *)normaliseWhitespaceWithNSString:(NSString *)string {
  return OrgJsoupHelperStringUtil_normaliseWhitespaceWithNSString_(string);
}

+ (void)appendNormalisedWhitespaceWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                               withNSString:(NSString *)string
                                                withBoolean:(jboolean)stripLeading {
  OrgJsoupHelperStringUtil_appendNormalisedWhitespaceWithJavaLangStringBuilder_withNSString_withBoolean_(accum, string, stripLeading);
}

+ (jboolean)inWithNSString:(NSString *)needle
         withNSStringArray:(IOSObjectArray *)haystack {
  return OrgJsoupHelperStringUtil_inWithNSString_withNSStringArray_(needle, haystack);
}

+ (jboolean)inSortedWithNSString:(NSString *)needle
               withNSStringArray:(IOSObjectArray *)haystack {
  return OrgJsoupHelperStringUtil_inSortedWithNSString_withNSStringArray_(needle, haystack);
}

+ (JavaNetURL *)resolveWithJavaNetURL:(JavaNetURL *)base
                         withNSString:(NSString *)relUrl {
  return OrgJsoupHelperStringUtil_resolveWithJavaNetURL_withNSString_(base, relUrl);
}

+ (NSString *)resolveWithNSString:(NSString *)baseUrl
                     withNSString:(NSString *)relUrl {
  return OrgJsoupHelperStringUtil_resolveWithNSString_withNSString_(baseUrl, relUrl);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 13, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x9, 15, 16, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(joinWithJavaUtilCollection:withNSString:);
  methods[2].selector = @selector(joinWithJavaUtilIterator:withNSString:);
  methods[3].selector = @selector(paddingWithInt:);
  methods[4].selector = @selector(isBlankWithNSString:);
  methods[5].selector = @selector(isNumericWithNSString:);
  methods[6].selector = @selector(isWhitespaceWithInt:);
  methods[7].selector = @selector(normaliseWhitespaceWithNSString:);
  methods[8].selector = @selector(appendNormalisedWhitespaceWithJavaLangStringBuilder:withNSString:withBoolean:);
  methods[9].selector = @selector(inWithNSString:withNSStringArray:);
  methods[10].selector = @selector(inSortedWithNSString:withNSStringArray:);
  methods[11].selector = @selector(resolveWithJavaNetURL:withNSString:);
  methods[12].selector = @selector(resolveWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "padding", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { "join", "LJavaUtilCollection;LNSString;", "LJavaUtilIterator;LNSString;", "padding", "I", "isBlank", "LNSString;", "isNumeric", "isWhitespace", "normaliseWhitespace", "appendNormalisedWhitespace", "LJavaLangStringBuilder;LNSString;Z", "in", "LNSString;[LNSString;", "inSorted", "resolve", "LJavaNetURL;LNSString;", "LJavaNetMalformedURLException;", "LNSString;LNSString;", &OrgJsoupHelperStringUtil_padding };
  static const J2ObjcClassInfo _OrgJsoupHelperStringUtil = { "StringUtil", "org.jsoup.helper", ptrTable, methods, fields, 7, 0x11, 13, 1, -1, -1, -1, -1, -1 };
  return &_OrgJsoupHelperStringUtil;
}

+ (void)initialize {
  if (self == [OrgJsoupHelperStringUtil class]) {
    OrgJsoupHelperStringUtil_padding = [IOSObjectArray newArrayWithObjects:(id[]){ @"", @" ", @"  ", @"   ", @"    ", @"     ", @"      ", @"       ", @"        ", @"         ", @"          " } count:11 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(OrgJsoupHelperStringUtil)
  }
}

@end

void OrgJsoupHelperStringUtil_init(OrgJsoupHelperStringUtil *self) {
  NSObject_init(self);
}

OrgJsoupHelperStringUtil *new_OrgJsoupHelperStringUtil_init() {
  J2OBJC_NEW_IMPL(OrgJsoupHelperStringUtil, init)
}

OrgJsoupHelperStringUtil *create_OrgJsoupHelperStringUtil_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupHelperStringUtil, init)
}

NSString *OrgJsoupHelperStringUtil_joinWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> strings, NSString *sep) {
  OrgJsoupHelperStringUtil_initialize();
  return OrgJsoupHelperStringUtil_joinWithJavaUtilIterator_withNSString_([((id<JavaUtilCollection>) nil_chk(strings)) iterator], sep);
}

NSString *OrgJsoupHelperStringUtil_joinWithJavaUtilIterator_withNSString_(id<JavaUtilIterator> strings, NSString *sep) {
  OrgJsoupHelperStringUtil_initialize();
  if (![((id<JavaUtilIterator>) nil_chk(strings)) hasNext]) return @"";
  NSString *start = [nil_chk([strings next]) description];
  if (![strings hasNext]) return start;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(64) appendWithNSString:start];
  while ([strings hasNext]) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:sep];
    (void) [sb appendWithId:[strings next]];
  }
  return [((JavaLangStringBuilder *) nil_chk(sb)) description];
}

NSString *OrgJsoupHelperStringUtil_paddingWithInt_(jint width) {
  OrgJsoupHelperStringUtil_initialize();
  if (width < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"width must be > 0");
  if (width < ((IOSObjectArray *) nil_chk(OrgJsoupHelperStringUtil_padding))->size_) return IOSObjectArray_Get(OrgJsoupHelperStringUtil_padding, width);
  IOSCharArray *out = [IOSCharArray newArrayWithLength:width];
  for (jint i = 0; i < width; i++) *IOSCharArray_GetRef(out, i) = ' ';
  return NSString_java_valueOfChars_(out);
}

jboolean OrgJsoupHelperStringUtil_isBlankWithNSString_(NSString *string) {
  OrgJsoupHelperStringUtil_initialize();
  if (string == nil || [string java_length] == 0) return true;
  jint l = [string java_length];
  for (jint i = 0; i < l; i++) {
    if (!OrgJsoupHelperStringUtil_isWhitespaceWithInt_([string java_codePointAt:i])) return false;
  }
  return true;
}

jboolean OrgJsoupHelperStringUtil_isNumericWithNSString_(NSString *string) {
  OrgJsoupHelperStringUtil_initialize();
  if (string == nil || [string java_length] == 0) return false;
  jint l = [string java_length];
  for (jint i = 0; i < l; i++) {
    if (!JavaLangCharacter_isDigitWithInt_([string java_codePointAt:i])) return false;
  }
  return true;
}

jboolean OrgJsoupHelperStringUtil_isWhitespaceWithInt_(jint c) {
  OrgJsoupHelperStringUtil_initialize();
  return c == ' ' || c == 0x0009 || c == 0x000a || c == 0x000c || c == 0x000d;
}

NSString *OrgJsoupHelperStringUtil_normaliseWhitespaceWithNSString_(NSString *string) {
  OrgJsoupHelperStringUtil_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(string)) java_length]);
  OrgJsoupHelperStringUtil_appendNormalisedWhitespaceWithJavaLangStringBuilder_withNSString_withBoolean_(sb, string, false);
  return [sb description];
}

void OrgJsoupHelperStringUtil_appendNormalisedWhitespaceWithJavaLangStringBuilder_withNSString_withBoolean_(JavaLangStringBuilder *accum, NSString *string, jboolean stripLeading) {
  OrgJsoupHelperStringUtil_initialize();
  jboolean lastWasWhite = false;
  jboolean reachedNonWhite = false;
  jint len = [((NSString *) nil_chk(string)) java_length];
  jint c;
  for (jint i = 0; i < len; i += JavaLangCharacter_charCountWithInt_(c)) {
    c = [string java_codePointAt:i];
    if (OrgJsoupHelperStringUtil_isWhitespaceWithInt_(c)) {
      if ((stripLeading && !reachedNonWhite) || lastWasWhite) continue;
      (void) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:' '];
      lastWasWhite = true;
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk(accum)) appendCodePointWithInt:c];
      lastWasWhite = false;
      reachedNonWhite = true;
    }
  }
}

jboolean OrgJsoupHelperStringUtil_inWithNSString_withNSStringArray_(NSString *needle, IOSObjectArray *haystack) {
  OrgJsoupHelperStringUtil_initialize();
  {
    IOSObjectArray *a__ = haystack;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *hay = *b__++;
      if ([((NSString *) nil_chk(hay)) isEqual:needle]) return true;
    }
  }
  return false;
}

jboolean OrgJsoupHelperStringUtil_inSortedWithNSString_withNSStringArray_(NSString *needle, IOSObjectArray *haystack) {
  OrgJsoupHelperStringUtil_initialize();
  return JavaUtilArrays_binarySearchWithNSObjectArray_withId_(haystack, needle) >= 0;
}

JavaNetURL *OrgJsoupHelperStringUtil_resolveWithJavaNetURL_withNSString_(JavaNetURL *base, NSString *relUrl) {
  OrgJsoupHelperStringUtil_initialize();
  if ([((NSString *) nil_chk(relUrl)) java_hasPrefix:@"?"]) relUrl = JreStrcat("$$", [((JavaNetURL *) nil_chk(base)) getPath], relUrl);
  if ([relUrl java_indexOf:'.'] == 0 && [((NSString *) nil_chk([((JavaNetURL *) nil_chk(base)) getFile])) java_indexOf:'/'] != 0) {
    base = new_JavaNetURL_initWithNSString_withNSString_withInt_withNSString_([((JavaNetURL *) nil_chk(base)) getProtocol], [base getHost], [base getPort], JreStrcat("C$", '/', [base getFile]));
  }
  return new_JavaNetURL_initWithJavaNetURL_withNSString_(base, relUrl);
}

NSString *OrgJsoupHelperStringUtil_resolveWithNSString_withNSString_(NSString *baseUrl, NSString *relUrl) {
  OrgJsoupHelperStringUtil_initialize();
  JavaNetURL *base;
  @try {
    @try {
      base = new_JavaNetURL_initWithNSString_(baseUrl);
    }
    @catch (JavaNetMalformedURLException *e) {
      JavaNetURL *abs = new_JavaNetURL_initWithNSString_(relUrl);
      return [abs toExternalForm];
    }
    return [((JavaNetURL *) nil_chk(OrgJsoupHelperStringUtil_resolveWithJavaNetURL_withNSString_(base, relUrl))) toExternalForm];
  }
  @catch (JavaNetMalformedURLException *e) {
    return @"";
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupHelperStringUtil)
