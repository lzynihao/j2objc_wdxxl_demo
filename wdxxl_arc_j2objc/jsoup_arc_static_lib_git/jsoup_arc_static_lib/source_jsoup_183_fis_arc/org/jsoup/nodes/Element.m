//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:jsoup-1.8.3-fis-sources.jar!org/jsoup/nodes/Element.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Pattern.h"
#include "java/util/regex/PatternSyntaxException.h"
#include "org/jsoup/helper/StringUtil.h"
#include "org/jsoup/helper/Validate.h"
#include "org/jsoup/nodes/Attributes.h"
#include "org/jsoup/nodes/DataNode.h"
#include "org/jsoup/nodes/Document.h"
#include "org/jsoup/nodes/Element.h"
#include "org/jsoup/nodes/Node.h"
#include "org/jsoup/nodes/TextNode.h"
#include "org/jsoup/parser/Parser.h"
#include "org/jsoup/parser/Tag.h"
#include "org/jsoup/select/Collector.h"
#include "org/jsoup/select/Elements.h"
#include "org/jsoup/select/Evaluator.h"
#include "org/jsoup/select/NodeTraversor.h"
#include "org/jsoup/select/NodeVisitor.h"
#include "org/jsoup/select/Selector.h"

@interface OrgJsoupNodesElement () {
 @public
  OrgJsoupParserTag *tag_;
}

+ (void)accumulateParentsWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)el
                       withOrgJsoupSelectElements:(OrgJsoupSelectElements *)parents;

+ (JavaLangInteger *)indexInListWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)search
                                        withJavaUtilList:(id<JavaUtilList>)elements;

- (void)ownTextWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum;

+ (void)appendNormalisedTextWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                            withOrgJsoupNodesTextNode:(OrgJsoupNodesTextNode *)textNode;

+ (void)appendWhitespaceIfBrWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)element
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)accum;

- (void)htmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum;

@end

J2OBJC_FIELD_SETTER(OrgJsoupNodesElement, tag_, OrgJsoupParserTag *)

inline JavaUtilRegexPattern *OrgJsoupNodesElement_get_classSplit(void);
static JavaUtilRegexPattern *OrgJsoupNodesElement_classSplit;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesElement, classSplit, JavaUtilRegexPattern *)

__attribute__((unused)) static OrgJsoupNodesElement *OrgJsoupNodesElement_parent(OrgJsoupNodesElement *self);

__attribute__((unused)) static void OrgJsoupNodesElement_accumulateParentsWithOrgJsoupNodesElement_withOrgJsoupSelectElements_(OrgJsoupNodesElement *el, OrgJsoupSelectElements *parents);

__attribute__((unused)) static JavaLangInteger *OrgJsoupNodesElement_indexInListWithOrgJsoupNodesElement_withJavaUtilList_(OrgJsoupNodesElement *search, id<JavaUtilList> elements);

__attribute__((unused)) static void OrgJsoupNodesElement_ownTextWithJavaLangStringBuilder_(OrgJsoupNodesElement *self, JavaLangStringBuilder *accum);

__attribute__((unused)) static void OrgJsoupNodesElement_appendNormalisedTextWithJavaLangStringBuilder_withOrgJsoupNodesTextNode_(JavaLangStringBuilder *accum, OrgJsoupNodesTextNode *textNode);

__attribute__((unused)) static void OrgJsoupNodesElement_appendWhitespaceIfBrWithOrgJsoupNodesElement_withJavaLangStringBuilder_(OrgJsoupNodesElement *element, JavaLangStringBuilder *accum);

__attribute__((unused)) static void OrgJsoupNodesElement_htmlWithJavaLangStringBuilder_(OrgJsoupNodesElement *self, JavaLangStringBuilder *accum);

@interface OrgJsoupNodesElement_1 : NSObject < OrgJsoupSelectNodeVisitor > {
 @public
  JavaLangStringBuilder *val$accum_;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0;

- (void)headWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node
                          withInt:(jint)depth;

- (void)tailWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node
                          withInt:(jint)depth;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupNodesElement_1)

__attribute__((unused)) static void OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(OrgJsoupNodesElement_1 *self, JavaLangStringBuilder *capture$0);

__attribute__((unused)) static OrgJsoupNodesElement_1 *new_OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupNodesElement_1 *create_OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0);

J2OBJC_INITIALIZED_DEFN(OrgJsoupNodesElement)

@implementation OrgJsoupNodesElement

- (instancetype)initWithOrgJsoupParserTag:(OrgJsoupParserTag *)tag
                             withNSString:(NSString *)baseUri
              withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)attributes {
  OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(self, tag, baseUri, attributes);
  return self;
}

- (instancetype)initWithOrgJsoupParserTag:(OrgJsoupParserTag *)tag
                             withNSString:(NSString *)baseUri {
  OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(self, tag, baseUri);
  return self;
}

- (NSString *)nodeName {
  return [((OrgJsoupParserTag *) nil_chk(tag_)) getName];
}

- (NSString *)tagName {
  return [((OrgJsoupParserTag *) nil_chk(tag_)) getName];
}

- (OrgJsoupNodesElement *)tagNameWithNSString:(NSString *)tagName {
  OrgJsoupHelperValidate_notEmptyWithNSString_withNSString_(tagName, @"Tag name must not be empty.");
  tag_ = OrgJsoupParserTag_valueOfWithNSString_(tagName);
  return self;
}

- (OrgJsoupParserTag *)tag {
  return tag_;
}

- (jboolean)isBlock {
  return [((OrgJsoupParserTag *) nil_chk(tag_)) isBlock];
}

- (NSString *)id__ {
  return [((OrgJsoupNodesAttributes *) nil_chk(attributes_)) getWithNSString:@"id"];
}

- (OrgJsoupNodesElement *)attrWithNSString:(NSString *)attributeKey
                              withNSString:(NSString *)attributeValue {
  (void) [super attrWithNSString:attributeKey withNSString:attributeValue];
  return self;
}

- (OrgJsoupNodesElement *)attrWithNSString:(NSString *)attributeKey
                               withBoolean:(jboolean)attributeValue {
  [((OrgJsoupNodesAttributes *) nil_chk(attributes_)) putWithNSString:attributeKey withBoolean:attributeValue];
  return self;
}

- (id<JavaUtilMap>)dataset {
  return [((OrgJsoupNodesAttributes *) nil_chk(attributes_)) dataset];
}

- (OrgJsoupNodesElement *)parent {
  return OrgJsoupNodesElement_parent(self);
}

- (OrgJsoupSelectElements *)parents {
  OrgJsoupSelectElements *parents = new_OrgJsoupSelectElements_init();
  OrgJsoupNodesElement_accumulateParentsWithOrgJsoupNodesElement_withOrgJsoupSelectElements_(self, parents);
  return parents;
}

+ (void)accumulateParentsWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)el
                       withOrgJsoupSelectElements:(OrgJsoupSelectElements *)parents {
  OrgJsoupNodesElement_accumulateParentsWithOrgJsoupNodesElement_withOrgJsoupSelectElements_(el, parents);
}

- (OrgJsoupNodesElement *)childWithInt:(jint)index {
  return [((OrgJsoupSelectElements *) nil_chk([self children])) getWithInt:index];
}

- (OrgJsoupSelectElements *)children {
  id<JavaUtilList> elements = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(childNodes_)) size]);
  for (OrgJsoupNodesNode * __strong node in nil_chk(childNodes_)) {
    if ([node isKindOfClass:[OrgJsoupNodesElement class]]) [elements addWithId:(OrgJsoupNodesElement *) cast_chk(node, [OrgJsoupNodesElement class])];
  }
  return new_OrgJsoupSelectElements_initWithJavaUtilList_(elements);
}

- (id<JavaUtilList>)textNodes {
  id<JavaUtilList> textNodes = new_JavaUtilArrayList_init();
  for (OrgJsoupNodesNode * __strong node in nil_chk(childNodes_)) {
    if ([node isKindOfClass:[OrgJsoupNodesTextNode class]]) [textNodes addWithId:(OrgJsoupNodesTextNode *) cast_chk(node, [OrgJsoupNodesTextNode class])];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(textNodes);
}

- (id<JavaUtilList>)dataNodes {
  id<JavaUtilList> dataNodes = new_JavaUtilArrayList_init();
  for (OrgJsoupNodesNode * __strong node in nil_chk(childNodes_)) {
    if ([node isKindOfClass:[OrgJsoupNodesDataNode class]]) [dataNodes addWithId:(OrgJsoupNodesDataNode *) cast_chk(node, [OrgJsoupNodesDataNode class])];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(dataNodes);
}

- (OrgJsoupSelectElements *)selectWithNSString:(NSString *)cssQuery {
  return OrgJsoupSelectSelector_selectWithNSString_withOrgJsoupNodesElement_(cssQuery, self);
}

- (OrgJsoupNodesElement *)appendChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)child {
  OrgJsoupHelperValidate_notNullWithId_(child);
  [self reparentChildWithOrgJsoupNodesNode:child];
  [self ensureChildNodes];
  [((id<JavaUtilList>) nil_chk(childNodes_)) addWithId:child];
  [((OrgJsoupNodesNode *) nil_chk(child)) setSiblingIndexWithInt:[((id<JavaUtilList>) nil_chk(childNodes_)) size] - 1];
  return self;
}

- (OrgJsoupNodesElement *)prependChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)child {
  OrgJsoupHelperValidate_notNullWithId_(child);
  [self addChildrenWithInt:0 withOrgJsoupNodesNodeArray:[IOSObjectArray newArrayWithObjects:(id[]){ child } count:1 type:OrgJsoupNodesNode_class_()]];
  return self;
}

- (OrgJsoupNodesElement *)insertChildrenWithInt:(jint)index
                         withJavaUtilCollection:(id<JavaUtilCollection>)children {
  OrgJsoupHelperValidate_notNullWithId_withNSString_(children, @"Children collection to be inserted must not be null.");
  jint currentSize = [self childNodeSize];
  if (index < 0) index += currentSize + 1;
  OrgJsoupHelperValidate_isTrueWithBoolean_withNSString_(index >= 0 && index <= currentSize, @"Insert position out of bounds.");
  JavaUtilArrayList *nodes = new_JavaUtilArrayList_initWithJavaUtilCollection_(children);
  IOSObjectArray *nodeArray = [nodes toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[nodes size] type:OrgJsoupNodesNode_class_()]];
  [self addChildrenWithInt:index withOrgJsoupNodesNodeArray:nodeArray];
  return self;
}

- (OrgJsoupNodesElement *)appendElementWithNSString:(NSString *)tagName {
  OrgJsoupNodesElement *child = new_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupParserTag_valueOfWithNSString_(tagName), [self baseUri]);
  (void) [self appendChildWithOrgJsoupNodesNode:child];
  return child;
}

- (OrgJsoupNodesElement *)prependElementWithNSString:(NSString *)tagName {
  OrgJsoupNodesElement *child = new_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupParserTag_valueOfWithNSString_(tagName), [self baseUri]);
  (void) [self prependChildWithOrgJsoupNodesNode:child];
  return child;
}

- (OrgJsoupNodesElement *)appendTextWithNSString:(NSString *)text {
  OrgJsoupNodesTextNode *node = new_OrgJsoupNodesTextNode_initWithNSString_withNSString_(text, [self baseUri]);
  (void) [self appendChildWithOrgJsoupNodesNode:node];
  return self;
}

- (OrgJsoupNodesElement *)prependTextWithNSString:(NSString *)text {
  OrgJsoupNodesTextNode *node = new_OrgJsoupNodesTextNode_initWithNSString_withNSString_(text, [self baseUri]);
  (void) [self prependChildWithOrgJsoupNodesNode:node];
  return self;
}

- (OrgJsoupNodesElement *)appendWithNSString:(NSString *)html {
  OrgJsoupHelperValidate_notNullWithId_(html);
  id<JavaUtilList> nodes = OrgJsoupParserParser_parseFragmentWithNSString_withOrgJsoupNodesElement_withNSString_(html, self, [self baseUri]);
  [self addChildrenWithOrgJsoupNodesNodeArray:[((id<JavaUtilList>) nil_chk(nodes)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[nodes size] type:OrgJsoupNodesNode_class_()]]];
  return self;
}

- (OrgJsoupNodesElement *)prependWithNSString:(NSString *)html {
  OrgJsoupHelperValidate_notNullWithId_(html);
  id<JavaUtilList> nodes = OrgJsoupParserParser_parseFragmentWithNSString_withOrgJsoupNodesElement_withNSString_(html, self, [self baseUri]);
  [self addChildrenWithInt:0 withOrgJsoupNodesNodeArray:[((id<JavaUtilList>) nil_chk(nodes)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[nodes size] type:OrgJsoupNodesNode_class_()]]];
  return self;
}

- (OrgJsoupNodesElement *)beforeWithNSString:(NSString *)html {
  return (OrgJsoupNodesElement *) cast_chk([super beforeWithNSString:html], [OrgJsoupNodesElement class]);
}

- (OrgJsoupNodesElement *)beforeWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node {
  return (OrgJsoupNodesElement *) cast_chk([super beforeWithOrgJsoupNodesNode:node], [OrgJsoupNodesElement class]);
}

- (OrgJsoupNodesElement *)afterWithNSString:(NSString *)html {
  return (OrgJsoupNodesElement *) cast_chk([super afterWithNSString:html], [OrgJsoupNodesElement class]);
}

- (OrgJsoupNodesElement *)afterWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node {
  return (OrgJsoupNodesElement *) cast_chk([super afterWithOrgJsoupNodesNode:node], [OrgJsoupNodesElement class]);
}

- (OrgJsoupNodesElement *)empty {
  [((id<JavaUtilList>) nil_chk(childNodes_)) clear];
  return self;
}

- (OrgJsoupNodesElement *)wrapWithNSString:(NSString *)html {
  return (OrgJsoupNodesElement *) cast_chk([super wrapWithNSString:html], [OrgJsoupNodesElement class]);
}

- (NSString *)cssSelector {
  if ([((NSString *) nil_chk([self id__])) java_length] > 0) return JreStrcat("C$", '#', [self id__]);
  JavaLangStringBuilder *selector = new_JavaLangStringBuilder_initWithNSString_([self tagName]);
  NSString *classes = OrgJsoupHelperStringUtil_joinWithJavaUtilCollection_withNSString_([self classNames], @".");
  if ([((NSString *) nil_chk(classes)) java_length] > 0) (void) [((JavaLangStringBuilder *) nil_chk([selector appendWithChar:'.'])) appendWithNSString:classes];
  if (OrgJsoupNodesElement_parent(self) == nil || [OrgJsoupNodesElement_parent(self) isKindOfClass:[OrgJsoupNodesDocument class]]) return [selector description];
  (void) [selector insertWithInt:0 withNSString:@" > "];
  if ([((OrgJsoupSelectElements *) nil_chk([((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) selectWithNSString:[selector description]])) size] > 1) (void) [selector appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@":nth-child(%d)", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([self elementSiblingIndex])) intValue] + 1) } count:1 type:NSObject_class_()])];
  return JreStrcat("$$", [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) cssSelector], [selector description]);
}

- (OrgJsoupSelectElements *)siblingElements {
  if (parentNode_ == nil) return new_OrgJsoupSelectElements_initWithInt_(0);
  id<JavaUtilList> elements = [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) children];
  OrgJsoupSelectElements *siblings = new_OrgJsoupSelectElements_initWithInt_([((id<JavaUtilList>) nil_chk(elements)) size] - 1);
  for (OrgJsoupNodesElement * __strong el in elements) if (el != self) [siblings addWithId:el];
  return siblings;
}

- (OrgJsoupNodesElement *)nextElementSibling {
  if (parentNode_ == nil) return nil;
  id<JavaUtilList> siblings = [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) children];
  JavaLangInteger *index = OrgJsoupNodesElement_indexInListWithOrgJsoupNodesElement_withJavaUtilList_(self, siblings);
  OrgJsoupHelperValidate_notNullWithId_(index);
  if ([((id<JavaUtilList>) nil_chk(siblings)) size] > [((JavaLangInteger *) nil_chk(index)) intValue] + 1) return [siblings getWithInt:[index intValue] + 1];
  else return nil;
}

- (OrgJsoupNodesElement *)previousElementSibling {
  if (parentNode_ == nil) return nil;
  id<JavaUtilList> siblings = [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) children];
  JavaLangInteger *index = OrgJsoupNodesElement_indexInListWithOrgJsoupNodesElement_withJavaUtilList_(self, siblings);
  OrgJsoupHelperValidate_notNullWithId_(index);
  if ([((JavaLangInteger *) nil_chk(index)) intValue] > 0) return [((id<JavaUtilList>) nil_chk(siblings)) getWithInt:[index intValue] - 1];
  else return nil;
}

- (OrgJsoupNodesElement *)firstElementSibling {
  id<JavaUtilList> siblings = [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) children];
  return [((id<JavaUtilList>) nil_chk(siblings)) size] > 1 ? [siblings getWithInt:0] : nil;
}

- (JavaLangInteger *)elementSiblingIndex {
  if (OrgJsoupNodesElement_parent(self) == nil) return JavaLangInteger_valueOfWithInt_(0);
  return OrgJsoupNodesElement_indexInListWithOrgJsoupNodesElement_withJavaUtilList_(self, [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) children]);
}

- (OrgJsoupNodesElement *)lastElementSibling {
  id<JavaUtilList> siblings = [((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) children];
  return [((id<JavaUtilList>) nil_chk(siblings)) size] > 1 ? [siblings getWithInt:[siblings size] - 1] : nil;
}

+ (JavaLangInteger *)indexInListWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)search
                                        withJavaUtilList:(id<JavaUtilList>)elements {
  return OrgJsoupNodesElement_indexInListWithOrgJsoupNodesElement_withJavaUtilList_(search, elements);
}

- (OrgJsoupSelectElements *)getElementsByTagWithNSString:(NSString *)tagName {
  OrgJsoupHelperValidate_notEmptyWithNSString_(tagName);
  tagName = [((NSString *) nil_chk([((NSString *) nil_chk(tagName)) lowercaseString])) java_trim];
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_Tag_initWithNSString_(tagName), self);
}

- (OrgJsoupNodesElement *)getElementByIdWithNSString:(NSString *)id_ {
  OrgJsoupHelperValidate_notEmptyWithNSString_(id_);
  OrgJsoupSelectElements *elements = OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_Id_initWithNSString_(id_), self);
  if ([((OrgJsoupSelectElements *) nil_chk(elements)) size] > 0) return [elements getWithInt:0];
  else return nil;
}

- (OrgJsoupSelectElements *)getElementsByClassWithNSString:(NSString *)className_ {
  OrgJsoupHelperValidate_notEmptyWithNSString_(className_);
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_Class_initWithNSString_(className_), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeWithNSString:(NSString *)key {
  OrgJsoupHelperValidate_notEmptyWithNSString_(key);
  key = [((NSString *) nil_chk([((NSString *) nil_chk(key)) java_trim])) lowercaseString];
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_Attribute_initWithNSString_(key), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeStartingWithNSString:(NSString *)keyPrefix {
  OrgJsoupHelperValidate_notEmptyWithNSString_(keyPrefix);
  keyPrefix = [((NSString *) nil_chk([((NSString *) nil_chk(keyPrefix)) java_trim])) lowercaseString];
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeStarting_initWithNSString_(keyPrefix), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueWithNSString:(NSString *)key
                                                       withNSString:(NSString *)value {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeWithValue_initWithNSString_withNSString_(key, value), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueNotWithNSString:(NSString *)key
                                                          withNSString:(NSString *)value {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeWithValueNot_initWithNSString_withNSString_(key, value), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueStartingWithNSString:(NSString *)key
                                                               withNSString:(NSString *)valuePrefix {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeWithValueStarting_initWithNSString_withNSString_(key, valuePrefix), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueEndingWithNSString:(NSString *)key
                                                             withNSString:(NSString *)valueSuffix {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeWithValueEnding_initWithNSString_withNSString_(key, valueSuffix), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueContainingWithNSString:(NSString *)key
                                                                 withNSString:(NSString *)match {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeWithValueContaining_initWithNSString_withNSString_(key, match), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueMatchingWithNSString:(NSString *)key
                                                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AttributeWithValueMatching_initWithNSString_withJavaUtilRegexPattern_(key, pattern), self);
}

- (OrgJsoupSelectElements *)getElementsByAttributeValueMatchingWithNSString:(NSString *)key
                                                               withNSString:(NSString *)regex {
  JavaUtilRegexPattern *pattern;
  @try {
    pattern = JavaUtilRegexPattern_compileWithNSString_(regex);
  }
  @catch (JavaUtilRegexPatternSyntaxException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Pattern syntax error: ", regex), e);
  }
  return [self getElementsByAttributeValueMatchingWithNSString:key withJavaUtilRegexPattern:pattern];
}

- (OrgJsoupSelectElements *)getElementsByIndexLessThanWithInt:(jint)index {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_IndexLessThan_initWithInt_(index), self);
}

- (OrgJsoupSelectElements *)getElementsByIndexGreaterThanWithInt:(jint)index {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_IndexGreaterThan_initWithInt_(index), self);
}

- (OrgJsoupSelectElements *)getElementsByIndexEqualsWithInt:(jint)index {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_IndexEquals_initWithInt_(index), self);
}

- (OrgJsoupSelectElements *)getElementsContainingTextWithNSString:(NSString *)searchText {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_ContainsText_initWithNSString_(searchText), self);
}

- (OrgJsoupSelectElements *)getElementsContainingOwnTextWithNSString:(NSString *)searchText {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_ContainsOwnText_initWithNSString_(searchText), self);
}

- (OrgJsoupSelectElements *)getElementsMatchingTextWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_Matches_initWithJavaUtilRegexPattern_(pattern), self);
}

- (OrgJsoupSelectElements *)getElementsMatchingTextWithNSString:(NSString *)regex {
  JavaUtilRegexPattern *pattern;
  @try {
    pattern = JavaUtilRegexPattern_compileWithNSString_(regex);
  }
  @catch (JavaUtilRegexPatternSyntaxException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Pattern syntax error: ", regex), e);
  }
  return [self getElementsMatchingTextWithJavaUtilRegexPattern:pattern];
}

- (OrgJsoupSelectElements *)getElementsMatchingOwnTextWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_MatchesOwn_initWithJavaUtilRegexPattern_(pattern), self);
}

- (OrgJsoupSelectElements *)getElementsMatchingOwnTextWithNSString:(NSString *)regex {
  JavaUtilRegexPattern *pattern;
  @try {
    pattern = JavaUtilRegexPattern_compileWithNSString_(regex);
  }
  @catch (JavaUtilRegexPatternSyntaxException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Pattern syntax error: ", regex), e);
  }
  return [self getElementsMatchingOwnTextWithJavaUtilRegexPattern:pattern];
}

- (OrgJsoupSelectElements *)getAllElements {
  return OrgJsoupSelectCollector_collectWithOrgJsoupSelectEvaluator_withOrgJsoupNodesElement_(new_OrgJsoupSelectEvaluator_AllElements_init(), self);
}

- (NSString *)text {
  JavaLangStringBuilder *accum = new_JavaLangStringBuilder_init();
  [new_OrgJsoupSelectNodeTraversor_initWithOrgJsoupSelectNodeVisitor_(new_OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(accum)) traverseWithOrgJsoupNodesNode:self];
  return [((NSString *) nil_chk([accum description])) java_trim];
}

- (NSString *)ownText {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  OrgJsoupNodesElement_ownTextWithJavaLangStringBuilder_(self, sb);
  return [((NSString *) nil_chk([sb description])) java_trim];
}

- (void)ownTextWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum {
  OrgJsoupNodesElement_ownTextWithJavaLangStringBuilder_(self, accum);
}

+ (void)appendNormalisedTextWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                            withOrgJsoupNodesTextNode:(OrgJsoupNodesTextNode *)textNode {
  OrgJsoupNodesElement_appendNormalisedTextWithJavaLangStringBuilder_withOrgJsoupNodesTextNode_(accum, textNode);
}

+ (void)appendWhitespaceIfBrWithOrgJsoupNodesElement:(OrgJsoupNodesElement *)element
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)accum {
  OrgJsoupNodesElement_appendWhitespaceIfBrWithOrgJsoupNodesElement_withJavaLangStringBuilder_(element, accum);
}

+ (jboolean)preserveWhitespaceWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node {
  return OrgJsoupNodesElement_preserveWhitespaceWithOrgJsoupNodesNode_(node);
}

- (OrgJsoupNodesElement *)textWithNSString:(NSString *)text {
  OrgJsoupHelperValidate_notNullWithId_(text);
  (void) [self empty];
  OrgJsoupNodesTextNode *textNode = new_OrgJsoupNodesTextNode_initWithNSString_withNSString_(text, baseUri_);
  (void) [self appendChildWithOrgJsoupNodesNode:textNode];
  return self;
}

- (jboolean)hasText {
  for (OrgJsoupNodesNode * __strong child in nil_chk(childNodes_)) {
    if ([child isKindOfClass:[OrgJsoupNodesTextNode class]]) {
      OrgJsoupNodesTextNode *textNode = (OrgJsoupNodesTextNode *) cast_chk(child, [OrgJsoupNodesTextNode class]);
      if (![((OrgJsoupNodesTextNode *) nil_chk(textNode)) isBlank]) return true;
    }
    else if ([child isKindOfClass:[OrgJsoupNodesElement class]]) {
      OrgJsoupNodesElement *el = (OrgJsoupNodesElement *) cast_chk(child, [OrgJsoupNodesElement class]);
      if ([((OrgJsoupNodesElement *) nil_chk(el)) hasText]) return true;
    }
  }
  return false;
}

- (NSString *)data {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (OrgJsoupNodesNode * __strong childNode in nil_chk(childNodes_)) {
    if ([childNode isKindOfClass:[OrgJsoupNodesDataNode class]]) {
      OrgJsoupNodesDataNode *data = (OrgJsoupNodesDataNode *) cast_chk(childNode, [OrgJsoupNodesDataNode class]);
      (void) [sb appendWithNSString:[((OrgJsoupNodesDataNode *) nil_chk(data)) getWholeData]];
    }
    else if ([childNode isKindOfClass:[OrgJsoupNodesElement class]]) {
      OrgJsoupNodesElement *element = (OrgJsoupNodesElement *) cast_chk(childNode, [OrgJsoupNodesElement class]);
      NSString *elementData = [((OrgJsoupNodesElement *) nil_chk(element)) data];
      (void) [sb appendWithNSString:elementData];
    }
  }
  return [sb description];
}

- (NSString *)className__ {
  return [((NSString *) nil_chk([self attrWithNSString:@"class"])) java_trim];
}

- (id<JavaUtilSet>)classNames {
  IOSObjectArray *names = [((JavaUtilRegexPattern *) nil_chk(OrgJsoupNodesElement_classSplit)) splitWithJavaLangCharSequence:[self className__]];
  id<JavaUtilSet> classNames = new_JavaUtilLinkedHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(names));
  [classNames removeWithId:@""];
  return classNames;
}

- (OrgJsoupNodesElement *)classNamesWithJavaUtilSet:(id<JavaUtilSet>)classNames {
  OrgJsoupHelperValidate_notNullWithId_(classNames);
  [((OrgJsoupNodesAttributes *) nil_chk(attributes_)) putWithNSString:@"class" withNSString:OrgJsoupHelperStringUtil_joinWithJavaUtilCollection_withNSString_(classNames, @" ")];
  return self;
}

- (jboolean)hasClassWithNSString:(NSString *)className_ {
  NSString *classAttr = [((OrgJsoupNodesAttributes *) nil_chk(attributes_)) getWithNSString:@"class"];
  if ([((NSString *) nil_chk(classAttr)) isEqual:@""] || [classAttr java_length] < [((NSString *) nil_chk(className_)) java_length]) return false;
  IOSObjectArray *classes = [((JavaUtilRegexPattern *) nil_chk(OrgJsoupNodesElement_classSplit)) splitWithJavaLangCharSequence:classAttr];
  {
    IOSObjectArray *a__ = classes;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      if ([((NSString *) nil_chk(className_)) java_equalsIgnoreCase:name]) return true;
    }
  }
  return false;
}

- (OrgJsoupNodesElement *)addClassWithNSString:(NSString *)className_ {
  OrgJsoupHelperValidate_notNullWithId_(className_);
  id<JavaUtilSet> classes = [self classNames];
  [((id<JavaUtilSet>) nil_chk(classes)) addWithId:className_];
  (void) [self classNamesWithJavaUtilSet:classes];
  return self;
}

- (OrgJsoupNodesElement *)removeClassWithNSString:(NSString *)className_ {
  OrgJsoupHelperValidate_notNullWithId_(className_);
  id<JavaUtilSet> classes = [self classNames];
  [((id<JavaUtilSet>) nil_chk(classes)) removeWithId:className_];
  (void) [self classNamesWithJavaUtilSet:classes];
  return self;
}

- (OrgJsoupNodesElement *)toggleClassWithNSString:(NSString *)className_ {
  OrgJsoupHelperValidate_notNullWithId_(className_);
  id<JavaUtilSet> classes = [self classNames];
  if ([((id<JavaUtilSet>) nil_chk(classes)) containsWithId:className_]) [classes removeWithId:className_];
  else [classes addWithId:className_];
  (void) [self classNamesWithJavaUtilSet:classes];
  return self;
}

- (NSString *)val {
  if ([((NSString *) nil_chk([self tagName])) isEqual:@"textarea"]) return [self text];
  else return [self attrWithNSString:@"value"];
}

- (OrgJsoupNodesElement *)valWithNSString:(NSString *)value {
  if ([((NSString *) nil_chk([self tagName])) isEqual:@"textarea"]) (void) [self textWithNSString:value];
  else (void) [self attrWithNSString:@"value" withNSString:value];
  return self;
}

- (void)outerHtmlHeadWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg {
  if ([((JavaLangStringBuilder *) nil_chk(accum)) java_length] > 0 && [((OrgJsoupNodesDocument_OutputSettings *) nil_chk(outArg)) prettyPrint] && ([((OrgJsoupParserTag *) nil_chk(tag_)) formatAsBlock] || (OrgJsoupNodesElement_parent(self) != nil && [((OrgJsoupParserTag *) nil_chk([((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(self))) tag])) formatAsBlock]) || [outArg outline])) [self indentWithJavaLangStringBuilder:accum withInt:depth withOrgJsoupNodesDocument_OutputSettings:outArg];
  (void) [((JavaLangStringBuilder *) nil_chk([accum appendWithNSString:@"<"])) appendWithNSString:[self tagName]];
  [((OrgJsoupNodesAttributes *) nil_chk(attributes_)) htmlWithJavaLangStringBuilder:accum withOrgJsoupNodesDocument_OutputSettings:outArg];
  if ([((id<JavaUtilList>) nil_chk(childNodes_)) isEmpty] && [((OrgJsoupParserTag *) nil_chk(tag_)) isSelfClosing]) {
    if ([((OrgJsoupNodesDocument_OutputSettings *) nil_chk(outArg)) syntax] == JreLoadEnum(OrgJsoupNodesDocument_OutputSettings_Syntax, html) && [((OrgJsoupParserTag *) nil_chk(tag_)) isEmpty]) (void) [accum appendWithChar:'>'];
    else (void) [accum appendWithNSString:@" />"];
  }
  else (void) [accum appendWithNSString:@">"];
}

- (void)outerHtmlTailWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg {
  if (!([((id<JavaUtilList>) nil_chk(childNodes_)) isEmpty] && [((OrgJsoupParserTag *) nil_chk(tag_)) isSelfClosing])) {
    if ([((OrgJsoupNodesDocument_OutputSettings *) nil_chk(outArg)) prettyPrint] && (![((id<JavaUtilList>) nil_chk(childNodes_)) isEmpty] && ([((OrgJsoupParserTag *) nil_chk(tag_)) formatAsBlock] || ([outArg outline] && ([((id<JavaUtilList>) nil_chk(childNodes_)) size] > 1 || ([((id<JavaUtilList>) nil_chk(childNodes_)) size] == 1 && !([[((id<JavaUtilList>) nil_chk(childNodes_)) getWithInt:0] isKindOfClass:[OrgJsoupNodesTextNode class]]))))))) [self indentWithJavaLangStringBuilder:accum withInt:depth withOrgJsoupNodesDocument_OutputSettings:outArg];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"</"])) appendWithNSString:[self tagName]])) appendWithNSString:@">"];
  }
}

- (NSString *)html {
  JavaLangStringBuilder *accum = new_JavaLangStringBuilder_init();
  OrgJsoupNodesElement_htmlWithJavaLangStringBuilder_(self, accum);
  return [((OrgJsoupNodesDocument_OutputSettings *) nil_chk([self getOutputSettings])) prettyPrint] ? [((NSString *) nil_chk([accum description])) java_trim] : [accum description];
}

- (void)htmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum {
  OrgJsoupNodesElement_htmlWithJavaLangStringBuilder_(self, accum);
}

- (OrgJsoupNodesElement *)htmlWithNSString:(NSString *)html {
  (void) [self empty];
  (void) [self appendWithNSString:html];
  return self;
}

- (NSString *)description {
  return [self outerHtml];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  if (![super isEqual:o]) return false;
  OrgJsoupNodesElement *element = (OrgJsoupNodesElement *) cast_chk(o, [OrgJsoupNodesElement class]);
  return [((OrgJsoupParserTag *) nil_chk(tag_)) isEqual:element->tag_];
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + (tag_ != nil ? ((jint) [tag_ hash]) : 0);
  return result;
}

- (OrgJsoupNodesElement *)java_clone {
  return (OrgJsoupNodesElement *) cast_chk([super java_clone], [OrgJsoupNodesElement class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupParserTag;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 22, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 23, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 24, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 25, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 26, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 27, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 28, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 28, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 29, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 29, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 30, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0xa, 31, 32, -1, 33, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 34, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 35, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 36, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 37, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 38, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 39, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 40, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 41, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 42, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 43, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 44, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 46, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 47, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 48, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 49, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 50, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 51, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 53, 52, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, 53, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupSelectElements;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 55, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 58, 59, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 60, 17, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 61, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 62, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 63, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 64, 65, -1, 66, -1, -1 },
    { NULL, "Z", 0x1, 67, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 68, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 69, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 70, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 71, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 72, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 74, 73, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 55, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 75, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 76, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 77, 78, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 79, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesElement;", 0x1, 80, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJsoupParserTag:withNSString:withOrgJsoupNodesAttributes:);
  methods[1].selector = @selector(initWithOrgJsoupParserTag:withNSString:);
  methods[2].selector = @selector(nodeName);
  methods[3].selector = @selector(tagName);
  methods[4].selector = @selector(tagNameWithNSString:);
  methods[5].selector = @selector(tag);
  methods[6].selector = @selector(isBlock);
  methods[7].selector = @selector(id__);
  methods[8].selector = @selector(attrWithNSString:withNSString:);
  methods[9].selector = @selector(attrWithNSString:withBoolean:);
  methods[10].selector = @selector(dataset);
  methods[11].selector = @selector(parent);
  methods[12].selector = @selector(parents);
  methods[13].selector = @selector(accumulateParentsWithOrgJsoupNodesElement:withOrgJsoupSelectElements:);
  methods[14].selector = @selector(childWithInt:);
  methods[15].selector = @selector(children);
  methods[16].selector = @selector(textNodes);
  methods[17].selector = @selector(dataNodes);
  methods[18].selector = @selector(selectWithNSString:);
  methods[19].selector = @selector(appendChildWithOrgJsoupNodesNode:);
  methods[20].selector = @selector(prependChildWithOrgJsoupNodesNode:);
  methods[21].selector = @selector(insertChildrenWithInt:withJavaUtilCollection:);
  methods[22].selector = @selector(appendElementWithNSString:);
  methods[23].selector = @selector(prependElementWithNSString:);
  methods[24].selector = @selector(appendTextWithNSString:);
  methods[25].selector = @selector(prependTextWithNSString:);
  methods[26].selector = @selector(appendWithNSString:);
  methods[27].selector = @selector(prependWithNSString:);
  methods[28].selector = @selector(beforeWithNSString:);
  methods[29].selector = @selector(beforeWithOrgJsoupNodesNode:);
  methods[30].selector = @selector(afterWithNSString:);
  methods[31].selector = @selector(afterWithOrgJsoupNodesNode:);
  methods[32].selector = @selector(empty);
  methods[33].selector = @selector(wrapWithNSString:);
  methods[34].selector = @selector(cssSelector);
  methods[35].selector = @selector(siblingElements);
  methods[36].selector = @selector(nextElementSibling);
  methods[37].selector = @selector(previousElementSibling);
  methods[38].selector = @selector(firstElementSibling);
  methods[39].selector = @selector(elementSiblingIndex);
  methods[40].selector = @selector(lastElementSibling);
  methods[41].selector = @selector(indexInListWithOrgJsoupNodesElement:withJavaUtilList:);
  methods[42].selector = @selector(getElementsByTagWithNSString:);
  methods[43].selector = @selector(getElementByIdWithNSString:);
  methods[44].selector = @selector(getElementsByClassWithNSString:);
  methods[45].selector = @selector(getElementsByAttributeWithNSString:);
  methods[46].selector = @selector(getElementsByAttributeStartingWithNSString:);
  methods[47].selector = @selector(getElementsByAttributeValueWithNSString:withNSString:);
  methods[48].selector = @selector(getElementsByAttributeValueNotWithNSString:withNSString:);
  methods[49].selector = @selector(getElementsByAttributeValueStartingWithNSString:withNSString:);
  methods[50].selector = @selector(getElementsByAttributeValueEndingWithNSString:withNSString:);
  methods[51].selector = @selector(getElementsByAttributeValueContainingWithNSString:withNSString:);
  methods[52].selector = @selector(getElementsByAttributeValueMatchingWithNSString:withJavaUtilRegexPattern:);
  methods[53].selector = @selector(getElementsByAttributeValueMatchingWithNSString:withNSString:);
  methods[54].selector = @selector(getElementsByIndexLessThanWithInt:);
  methods[55].selector = @selector(getElementsByIndexGreaterThanWithInt:);
  methods[56].selector = @selector(getElementsByIndexEqualsWithInt:);
  methods[57].selector = @selector(getElementsContainingTextWithNSString:);
  methods[58].selector = @selector(getElementsContainingOwnTextWithNSString:);
  methods[59].selector = @selector(getElementsMatchingTextWithJavaUtilRegexPattern:);
  methods[60].selector = @selector(getElementsMatchingTextWithNSString:);
  methods[61].selector = @selector(getElementsMatchingOwnTextWithJavaUtilRegexPattern:);
  methods[62].selector = @selector(getElementsMatchingOwnTextWithNSString:);
  methods[63].selector = @selector(getAllElements);
  methods[64].selector = @selector(text);
  methods[65].selector = @selector(ownText);
  methods[66].selector = @selector(ownTextWithJavaLangStringBuilder:);
  methods[67].selector = @selector(appendNormalisedTextWithJavaLangStringBuilder:withOrgJsoupNodesTextNode:);
  methods[68].selector = @selector(appendWhitespaceIfBrWithOrgJsoupNodesElement:withJavaLangStringBuilder:);
  methods[69].selector = @selector(preserveWhitespaceWithOrgJsoupNodesNode:);
  methods[70].selector = @selector(textWithNSString:);
  methods[71].selector = @selector(hasText);
  methods[72].selector = @selector(data);
  methods[73].selector = @selector(className__);
  methods[74].selector = @selector(classNames);
  methods[75].selector = @selector(classNamesWithJavaUtilSet:);
  methods[76].selector = @selector(hasClassWithNSString:);
  methods[77].selector = @selector(addClassWithNSString:);
  methods[78].selector = @selector(removeClassWithNSString:);
  methods[79].selector = @selector(toggleClassWithNSString:);
  methods[80].selector = @selector(val);
  methods[81].selector = @selector(valWithNSString:);
  methods[82].selector = @selector(outerHtmlHeadWithJavaLangStringBuilder:withInt:withOrgJsoupNodesDocument_OutputSettings:);
  methods[83].selector = @selector(outerHtmlTailWithJavaLangStringBuilder:withInt:withOrgJsoupNodesDocument_OutputSettings:);
  methods[84].selector = @selector(html);
  methods[85].selector = @selector(htmlWithJavaLangStringBuilder:);
  methods[86].selector = @selector(htmlWithNSString:);
  methods[87].selector = @selector(description);
  methods[88].selector = @selector(isEqual:);
  methods[89].selector = @selector(hash);
  methods[90].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tag_", "LOrgJsoupParserTag;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "classSplit", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 81, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJsoupParserTag;LNSString;LOrgJsoupNodesAttributes;", "LOrgJsoupParserTag;LNSString;", "tagName", "LNSString;", "id", "attr", "LNSString;LNSString;", "LNSString;Z", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "accumulateParents", "LOrgJsoupNodesElement;LOrgJsoupSelectElements;", "child", "I", "()Ljava/util/List<Lorg/jsoup/nodes/TextNode;>;", "()Ljava/util/List<Lorg/jsoup/nodes/DataNode;>;", "select", "appendChild", "LOrgJsoupNodesNode;", "prependChild", "insertChildren", "ILJavaUtilCollection;", "(ILjava/util/Collection<+Lorg/jsoup/nodes/Node;>;)Lorg/jsoup/nodes/Element;", "appendElement", "prependElement", "appendText", "prependText", "append", "prepend", "before", "after", "wrap", "indexInList", "LOrgJsoupNodesElement;LJavaUtilList;", "<E:Lorg/jsoup/nodes/Element;>(Lorg/jsoup/nodes/Element;Ljava/util/List<TE;>;)Ljava/lang/Integer;", "getElementsByTag", "getElementById", "getElementsByClass", "getElementsByAttribute", "getElementsByAttributeStarting", "getElementsByAttributeValue", "getElementsByAttributeValueNot", "getElementsByAttributeValueStarting", "getElementsByAttributeValueEnding", "getElementsByAttributeValueContaining", "getElementsByAttributeValueMatching", "LNSString;LJavaUtilRegexPattern;", "getElementsByIndexLessThan", "getElementsByIndexGreaterThan", "getElementsByIndexEquals", "getElementsContainingText", "getElementsContainingOwnText", "getElementsMatchingText", "LJavaUtilRegexPattern;", "getElementsMatchingOwnText", "ownText", "LJavaLangStringBuilder;", "appendNormalisedText", "LJavaLangStringBuilder;LOrgJsoupNodesTextNode;", "appendWhitespaceIfBr", "LOrgJsoupNodesElement;LJavaLangStringBuilder;", "preserveWhitespace", "text", "className", "()Ljava/util/Set<Ljava/lang/String;>;", "classNames", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)Lorg/jsoup/nodes/Element;", "hasClass", "addClass", "removeClass", "toggleClass", "val", "outerHtmlHead", "LJavaLangStringBuilder;ILOrgJsoupNodesDocument_OutputSettings;", "outerHtmlTail", "html", "toString", "equals", "LNSObject;", "hashCode", "clone", &OrgJsoupNodesElement_classSplit };
  static const J2ObjcClassInfo _OrgJsoupNodesElement = { "Element", "org.jsoup.nodes", ptrTable, methods, fields, 7, 0x1, 91, 2, -1, -1, -1, -1, -1 };
  return &_OrgJsoupNodesElement;
}

+ (void)initialize {
  if (self == [OrgJsoupNodesElement class]) {
    OrgJsoupNodesElement_classSplit = JavaUtilRegexPattern_compileWithNSString_(@"\\s+");
    J2OBJC_SET_INITIALIZED(OrgJsoupNodesElement)
  }
}

@end

void OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(OrgJsoupNodesElement *self, OrgJsoupParserTag *tag, NSString *baseUri, OrgJsoupNodesAttributes *attributes) {
  OrgJsoupNodesNode_initWithNSString_withOrgJsoupNodesAttributes_(self, baseUri, attributes);
  OrgJsoupHelperValidate_notNullWithId_(tag);
  self->tag_ = tag;
}

OrgJsoupNodesElement *new_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(OrgJsoupParserTag *tag, NSString *baseUri, OrgJsoupNodesAttributes *attributes) {
  J2OBJC_NEW_IMPL(OrgJsoupNodesElement, initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_, tag, baseUri, attributes)
}

OrgJsoupNodesElement *create_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(OrgJsoupParserTag *tag, NSString *baseUri, OrgJsoupNodesAttributes *attributes) {
  J2OBJC_CREATE_IMPL(OrgJsoupNodesElement, initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_, tag, baseUri, attributes)
}

void OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupNodesElement *self, OrgJsoupParserTag *tag, NSString *baseUri) {
  OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(self, tag, baseUri, new_OrgJsoupNodesAttributes_init());
}

OrgJsoupNodesElement *new_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupParserTag *tag, NSString *baseUri) {
  J2OBJC_NEW_IMPL(OrgJsoupNodesElement, initWithOrgJsoupParserTag_withNSString_, tag, baseUri)
}

OrgJsoupNodesElement *create_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupParserTag *tag, NSString *baseUri) {
  J2OBJC_CREATE_IMPL(OrgJsoupNodesElement, initWithOrgJsoupParserTag_withNSString_, tag, baseUri)
}

OrgJsoupNodesElement *OrgJsoupNodesElement_parent(OrgJsoupNodesElement *self) {
  return (OrgJsoupNodesElement *) cast_chk(self->parentNode_, [OrgJsoupNodesElement class]);
}

void OrgJsoupNodesElement_accumulateParentsWithOrgJsoupNodesElement_withOrgJsoupSelectElements_(OrgJsoupNodesElement *el, OrgJsoupSelectElements *parents) {
  OrgJsoupNodesElement_initialize();
  OrgJsoupNodesElement *parent = OrgJsoupNodesElement_parent(nil_chk(el));
  if (parent != nil && ![((NSString *) nil_chk([parent tagName])) isEqual:@"#root"]) {
    [((OrgJsoupSelectElements *) nil_chk(parents)) addWithId:parent];
    OrgJsoupNodesElement_accumulateParentsWithOrgJsoupNodesElement_withOrgJsoupSelectElements_(parent, parents);
  }
}

JavaLangInteger *OrgJsoupNodesElement_indexInListWithOrgJsoupNodesElement_withJavaUtilList_(OrgJsoupNodesElement *search, id<JavaUtilList> elements) {
  OrgJsoupNodesElement_initialize();
  OrgJsoupHelperValidate_notNullWithId_(search);
  OrgJsoupHelperValidate_notNullWithId_(elements);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(elements)) size]; i++) {
    OrgJsoupNodesElement *element = [elements getWithInt:i];
    if (element == search) return JavaLangInteger_valueOfWithInt_(i);
  }
  return nil;
}

void OrgJsoupNodesElement_ownTextWithJavaLangStringBuilder_(OrgJsoupNodesElement *self, JavaLangStringBuilder *accum) {
  for (OrgJsoupNodesNode * __strong child in nil_chk(self->childNodes_)) {
    if ([child isKindOfClass:[OrgJsoupNodesTextNode class]]) {
      OrgJsoupNodesTextNode *textNode = (OrgJsoupNodesTextNode *) cast_chk(child, [OrgJsoupNodesTextNode class]);
      OrgJsoupNodesElement_appendNormalisedTextWithJavaLangStringBuilder_withOrgJsoupNodesTextNode_(accum, textNode);
    }
    else if ([child isKindOfClass:[OrgJsoupNodesElement class]]) {
      OrgJsoupNodesElement_appendWhitespaceIfBrWithOrgJsoupNodesElement_withJavaLangStringBuilder_((OrgJsoupNodesElement *) cast_chk(child, [OrgJsoupNodesElement class]), accum);
    }
  }
}

void OrgJsoupNodesElement_appendNormalisedTextWithJavaLangStringBuilder_withOrgJsoupNodesTextNode_(JavaLangStringBuilder *accum, OrgJsoupNodesTextNode *textNode) {
  OrgJsoupNodesElement_initialize();
  NSString *text = [((OrgJsoupNodesTextNode *) nil_chk(textNode)) getWholeText];
  if (OrgJsoupNodesElement_preserveWhitespaceWithOrgJsoupNodesNode_(textNode->parentNode_)) (void) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:text];
  else OrgJsoupHelperStringUtil_appendNormalisedWhitespaceWithJavaLangStringBuilder_withNSString_withBoolean_(accum, text, OrgJsoupNodesTextNode_lastCharIsWhitespaceWithJavaLangStringBuilder_(accum));
}

void OrgJsoupNodesElement_appendWhitespaceIfBrWithOrgJsoupNodesElement_withJavaLangStringBuilder_(OrgJsoupNodesElement *element, JavaLangStringBuilder *accum) {
  OrgJsoupNodesElement_initialize();
  if ([((NSString *) nil_chk([((OrgJsoupParserTag *) nil_chk(((OrgJsoupNodesElement *) nil_chk(element))->tag_)) getName])) isEqual:@"br"] && !OrgJsoupNodesTextNode_lastCharIsWhitespaceWithJavaLangStringBuilder_(accum)) (void) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@" "];
}

jboolean OrgJsoupNodesElement_preserveWhitespaceWithOrgJsoupNodesNode_(OrgJsoupNodesNode *node) {
  OrgJsoupNodesElement_initialize();
  if (node != nil && [node isKindOfClass:[OrgJsoupNodesElement class]]) {
    OrgJsoupNodesElement *element = (OrgJsoupNodesElement *) cast_chk(node, [OrgJsoupNodesElement class]);
    return [((OrgJsoupParserTag *) nil_chk(element->tag_)) preserveWhitespace] || (OrgJsoupNodesElement_parent(element) != nil && [((OrgJsoupParserTag *) nil_chk(((OrgJsoupNodesElement *) nil_chk(OrgJsoupNodesElement_parent(element)))->tag_)) preserveWhitespace]);
  }
  return false;
}

void OrgJsoupNodesElement_htmlWithJavaLangStringBuilder_(OrgJsoupNodesElement *self, JavaLangStringBuilder *accum) {
  for (OrgJsoupNodesNode * __strong node in nil_chk(self->childNodes_)) [((OrgJsoupNodesNode *) nil_chk(node)) outerHtmlWithJavaLangStringBuilder:accum];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupNodesElement)

@implementation OrgJsoupNodesElement_1

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(self, capture$0);
  return self;
}

- (void)headWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node
                          withInt:(jint)depth {
  if ([node isKindOfClass:[OrgJsoupNodesTextNode class]]) {
    OrgJsoupNodesTextNode *textNode = (OrgJsoupNodesTextNode *) cast_chk(node, [OrgJsoupNodesTextNode class]);
    OrgJsoupNodesElement_appendNormalisedTextWithJavaLangStringBuilder_withOrgJsoupNodesTextNode_(val$accum_, textNode);
  }
  else if ([node isKindOfClass:[OrgJsoupNodesElement class]]) {
    OrgJsoupNodesElement *element = (OrgJsoupNodesElement *) cast_chk(node, [OrgJsoupNodesElement class]);
    if ([((JavaLangStringBuilder *) nil_chk(val$accum_)) java_length] > 0 && ([((OrgJsoupNodesElement *) nil_chk(element)) isBlock] || [((NSString *) nil_chk([((OrgJsoupParserTag *) nil_chk(element->tag_)) getName])) isEqual:@"br"]) && !OrgJsoupNodesTextNode_lastCharIsWhitespaceWithJavaLangStringBuilder_(val$accum_)) (void) [val$accum_ appendWithNSString:@" "];
  }
}

- (void)tailWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node
                          withInt:(jint)depth {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangStringBuilder:);
  methods[1].selector = @selector(headWithOrgJsoupNodesNode:withInt:);
  methods[2].selector = @selector(tailWithOrgJsoupNodesNode:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$accum_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "head", "LOrgJsoupNodesNode;I", "tail", "LOrgJsoupNodesElement;", "text" };
  static const J2ObjcClassInfo _OrgJsoupNodesElement_1 = { "", "org.jsoup.nodes", ptrTable, methods, fields, 7, 0x8018, 3, 1, 3, -1, 4, -1, -1 };
  return &_OrgJsoupNodesElement_1;
}

@end

void OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(OrgJsoupNodesElement_1 *self, JavaLangStringBuilder *capture$0) {
  self->val$accum_ = capture$0;
  NSObject_init(self);
}

OrgJsoupNodesElement_1 *new_OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0) {
  J2OBJC_NEW_IMPL(OrgJsoupNodesElement_1, initWithJavaLangStringBuilder_, capture$0)
}

OrgJsoupNodesElement_1 *create_OrgJsoupNodesElement_1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0) {
  J2OBJC_CREATE_IMPL(OrgJsoupNodesElement_1, initWithJavaLangStringBuilder_, capture$0)
}
