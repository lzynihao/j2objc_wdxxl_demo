//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/builder/EqualsBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/reflect/AccessibleObject.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/apache/commons/lang3/ArrayUtils.h"
#include "org/apache/commons/lang3/builder/EqualsBuilder.h"
#include "org/apache/commons/lang3/builder/IDKey.h"
#include "org/apache/commons/lang3/builder/ReflectionToStringBuilder.h"
#include "org/apache/commons/lang3/tuple/Pair.h"

@interface OrgApacheCommonsLang3BuilderEqualsBuilder () {
 @public
  jboolean isEquals_;
}

+ (void)reflectionAppendWithId:(id)lhs
                        withId:(id)rhs
                  withIOSClass:(IOSClass *)clazz
withOrgApacheCommonsLang3BuilderEqualsBuilder:(OrgApacheCommonsLang3BuilderEqualsBuilder *)builder
                   withBoolean:(jboolean)useTransients
             withNSStringArray:(IOSObjectArray *)excludeFields;

@end

inline JavaLangThreadLocal *OrgApacheCommonsLang3BuilderEqualsBuilder_get_REGISTRY(void);
static JavaLangThreadLocal *OrgApacheCommonsLang3BuilderEqualsBuilder_REGISTRY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3BuilderEqualsBuilder, REGISTRY, JavaLangThreadLocal *)

__attribute__((unused)) static void OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionAppendWithId_withId_withIOSClass_withOrgApacheCommonsLang3BuilderEqualsBuilder_withBoolean_withNSStringArray_(id lhs, id rhs, IOSClass *clazz, OrgApacheCommonsLang3BuilderEqualsBuilder *builder, jboolean useTransients, IOSObjectArray *excludeFields);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3BuilderEqualsBuilder)

@implementation OrgApacheCommonsLang3BuilderEqualsBuilder

+ (id<JavaUtilSet>)getRegistry {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry();
}

+ (OrgApacheCommonsLang3TuplePair *)getRegisterPairWithId:(id)lhs
                                                   withId:(id)rhs {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_getRegisterPairWithId_withId_(lhs, rhs);
}

+ (jboolean)isRegisteredWithId:(id)lhs
                        withId:(id)rhs {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_isRegisteredWithId_withId_(lhs, rhs);
}

+ (void)register__WithId:(id)lhs
                  withId:(id)rhs {
  OrgApacheCommonsLang3BuilderEqualsBuilder_register__WithId_withId_(lhs, rhs);
}

+ (void)unregisterWithId:(id)lhs
                  withId:(id)rhs {
  OrgApacheCommonsLang3BuilderEqualsBuilder_unregisterWithId_withId_(lhs, rhs);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3BuilderEqualsBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)reflectionEqualsWithId:(id)lhs
                            withId:(id)rhs
            withJavaUtilCollection:(id<JavaUtilCollection>)excludeFields {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withJavaUtilCollection_(lhs, rhs, excludeFields);
}

+ (jboolean)reflectionEqualsWithId:(id)lhs
                            withId:(id)rhs
                 withNSStringArray:(IOSObjectArray *)excludeFields {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(lhs, rhs, excludeFields);
}

+ (jboolean)reflectionEqualsWithId:(id)lhs
                            withId:(id)rhs
                       withBoolean:(jboolean)testTransients {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withBoolean_(lhs, rhs, testTransients);
}

+ (jboolean)reflectionEqualsWithId:(id)lhs
                            withId:(id)rhs
                       withBoolean:(jboolean)testTransients
                      withIOSClass:(IOSClass *)reflectUpToClass
                 withNSStringArray:(IOSObjectArray *)excludeFields {
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withBoolean_withIOSClass_withNSStringArray_(lhs, rhs, testTransients, reflectUpToClass, excludeFields);
}

+ (void)reflectionAppendWithId:(id)lhs
                        withId:(id)rhs
                  withIOSClass:(IOSClass *)clazz
withOrgApacheCommonsLang3BuilderEqualsBuilder:(OrgApacheCommonsLang3BuilderEqualsBuilder *)builder
                   withBoolean:(jboolean)useTransients
             withNSStringArray:(IOSObjectArray *)excludeFields {
  OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionAppendWithId_withId_withIOSClass_withOrgApacheCommonsLang3BuilderEqualsBuilder_withBoolean_withNSStringArray_(lhs, rhs, clazz, builder, useTransients, excludeFields);
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendSuperWithBoolean:(jboolean)superEquals {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = superEquals;
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithId:(id)lhs
                                                     withId:(id)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  IOSClass *lhsClass = [lhs java_getClass];
  if (![lhsClass isArray]) {
    isEquals_ = [lhs isEqual:rhs];
  }
  else if ([lhs java_getClass] != [rhs java_getClass]) {
    [self setEqualsWithBoolean:false];
  }
  else if ([lhs isKindOfClass:[IOSLongArray class]]) {
    (void) [self appendWithLongArray:(IOSLongArray *) cast_chk(lhs, [IOSLongArray class]) withLongArray:(IOSLongArray *) cast_chk(rhs, [IOSLongArray class])];
  }
  else if ([lhs isKindOfClass:[IOSIntArray class]]) {
    (void) [self appendWithIntArray:(IOSIntArray *) cast_chk(lhs, [IOSIntArray class]) withIntArray:(IOSIntArray *) cast_chk(rhs, [IOSIntArray class])];
  }
  else if ([lhs isKindOfClass:[IOSShortArray class]]) {
    (void) [self appendWithShortArray:(IOSShortArray *) cast_chk(lhs, [IOSShortArray class]) withShortArray:(IOSShortArray *) cast_chk(rhs, [IOSShortArray class])];
  }
  else if ([lhs isKindOfClass:[IOSCharArray class]]) {
    (void) [self appendWithCharArray:(IOSCharArray *) cast_chk(lhs, [IOSCharArray class]) withCharArray:(IOSCharArray *) cast_chk(rhs, [IOSCharArray class])];
  }
  else if ([lhs isKindOfClass:[IOSByteArray class]]) {
    (void) [self appendWithByteArray:(IOSByteArray *) cast_chk(lhs, [IOSByteArray class]) withByteArray:(IOSByteArray *) cast_chk(rhs, [IOSByteArray class])];
  }
  else if ([lhs isKindOfClass:[IOSDoubleArray class]]) {
    (void) [self appendWithDoubleArray:(IOSDoubleArray *) cast_chk(lhs, [IOSDoubleArray class]) withDoubleArray:(IOSDoubleArray *) cast_chk(rhs, [IOSDoubleArray class])];
  }
  else if ([lhs isKindOfClass:[IOSFloatArray class]]) {
    (void) [self appendWithFloatArray:(IOSFloatArray *) cast_chk(lhs, [IOSFloatArray class]) withFloatArray:(IOSFloatArray *) cast_chk(rhs, [IOSFloatArray class])];
  }
  else if ([lhs isKindOfClass:[IOSBooleanArray class]]) {
    (void) [self appendWithBooleanArray:(IOSBooleanArray *) cast_chk(lhs, [IOSBooleanArray class]) withBooleanArray:(IOSBooleanArray *) cast_chk(rhs, [IOSBooleanArray class])];
  }
  else {
    (void) [self appendWithNSObjectArray:(IOSObjectArray *) cast_check(lhs, IOSClass_arrayType(NSObject_class_(), 1)) withNSObjectArray:(IOSObjectArray *) cast_check(rhs, IOSClass_arrayType(NSObject_class_(), 1))];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithLong:(jlong)lhs
                                                     withLong:(jlong)rhs {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = (lhs == rhs);
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithInt:(jint)lhs
                                                     withInt:(jint)rhs {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = (lhs == rhs);
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithShort:(jshort)lhs
                                                     withShort:(jshort)rhs {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = (lhs == rhs);
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithChar:(jchar)lhs
                                                     withChar:(jchar)rhs {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = (lhs == rhs);
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithByte:(jbyte)lhs
                                                     withByte:(jbyte)rhs {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = (lhs == rhs);
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithDouble:(jdouble)lhs
                                                     withDouble:(jdouble)rhs {
  if (isEquals_ == false) {
    return self;
  }
  return [self appendWithLong:JavaLangDouble_doubleToLongBitsWithDouble_(lhs) withLong:JavaLangDouble_doubleToLongBitsWithDouble_(rhs)];
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithFloat:(jfloat)lhs
                                                     withFloat:(jfloat)rhs {
  if (isEquals_ == false) {
    return self;
  }
  return [self appendWithInt:JavaLangFloat_floatToIntBitsWithFloat_(lhs) withInt:JavaLangFloat_floatToIntBitsWithFloat_(rhs)];
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithBoolean:(jboolean)lhs
                                                     withBoolean:(jboolean)rhs {
  if (isEquals_ == false) {
    return self;
  }
  isEquals_ = (lhs == rhs);
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithNSObjectArray:(IOSObjectArray *)lhs
                                                     withNSObjectArray:(IOSObjectArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithId:IOSObjectArray_Get(lhs, i) withId:IOSObjectArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithLongArray:(IOSLongArray *)lhs
                                                     withLongArray:(IOSLongArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithLong:IOSLongArray_Get(lhs, i) withLong:IOSLongArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithIntArray:(IOSIntArray *)lhs
                                                     withIntArray:(IOSIntArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithInt:IOSIntArray_Get(lhs, i) withInt:IOSIntArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithShortArray:(IOSShortArray *)lhs
                                                     withShortArray:(IOSShortArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithShort:IOSShortArray_Get(lhs, i) withShort:IOSShortArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithCharArray:(IOSCharArray *)lhs
                                                     withCharArray:(IOSCharArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithChar:IOSCharArray_Get(lhs, i) withChar:IOSCharArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithByteArray:(IOSByteArray *)lhs
                                                     withByteArray:(IOSByteArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithByte:IOSByteArray_Get(lhs, i) withByte:IOSByteArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithDoubleArray:(IOSDoubleArray *)lhs
                                                     withDoubleArray:(IOSDoubleArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithDouble:IOSDoubleArray_Get(lhs, i) withDouble:IOSDoubleArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithFloatArray:(IOSFloatArray *)lhs
                                                     withFloatArray:(IOSFloatArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithFloat:IOSFloatArray_Get(lhs, i) withFloat:IOSFloatArray_Get(rhs, i)];
  }
  return self;
}

- (OrgApacheCommonsLang3BuilderEqualsBuilder *)appendWithBooleanArray:(IOSBooleanArray *)lhs
                                                     withBooleanArray:(IOSBooleanArray *)rhs {
  if (isEquals_ == false) {
    return self;
  }
  if (lhs == rhs) {
    return self;
  }
  if (lhs == nil || rhs == nil) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  if (lhs->size_ != rhs->size_) {
    [self setEqualsWithBoolean:false];
    return self;
  }
  for (jint i = 0; i < lhs->size_ && isEquals_; ++i) {
    (void) [self appendWithBoolean:IOSBooleanArray_Get(lhs, i) withBoolean:IOSBooleanArray_Get(rhs, i)];
  }
  return self;
}

- (jboolean)isEquals {
  return self->isEquals_;
}

- (JavaLangBoolean *)build {
  return JavaLangBoolean_valueOfWithBoolean_([self isEquals]);
}

- (void)setEqualsWithBoolean:(jboolean)isEquals {
  self->isEquals_ = isEquals;
}

- (void)reset {
  self->isEquals_ = true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilSet;", 0x8, -1, -1, -1, 0, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TuplePair;", 0x8, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x8, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 6, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x89, 7, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 7, 12, -1, 13, -1, -1 },
    { NULL, "V", 0xa, 14, 15, -1, 16, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 23, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 25, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 26, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 27, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 28, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 29, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 30, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 31, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 32, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 34, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 35, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3BuilderEqualsBuilder;", 0x1, 19, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 37, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getRegistry);
  methods[1].selector = @selector(getRegisterPairWithId:withId:);
  methods[2].selector = @selector(isRegisteredWithId:withId:);
  methods[3].selector = @selector(register__WithId:withId:);
  methods[4].selector = @selector(unregisterWithId:withId:);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(reflectionEqualsWithId:withId:withJavaUtilCollection:);
  methods[7].selector = @selector(reflectionEqualsWithId:withId:withNSStringArray:);
  methods[8].selector = @selector(reflectionEqualsWithId:withId:withBoolean:);
  methods[9].selector = @selector(reflectionEqualsWithId:withId:withBoolean:withIOSClass:withNSStringArray:);
  methods[10].selector = @selector(reflectionAppendWithId:withId:withIOSClass:withOrgApacheCommonsLang3BuilderEqualsBuilder:withBoolean:withNSStringArray:);
  methods[11].selector = @selector(appendSuperWithBoolean:);
  methods[12].selector = @selector(appendWithId:withId:);
  methods[13].selector = @selector(appendWithLong:withLong:);
  methods[14].selector = @selector(appendWithInt:withInt:);
  methods[15].selector = @selector(appendWithShort:withShort:);
  methods[16].selector = @selector(appendWithChar:withChar:);
  methods[17].selector = @selector(appendWithByte:withByte:);
  methods[18].selector = @selector(appendWithDouble:withDouble:);
  methods[19].selector = @selector(appendWithFloat:withFloat:);
  methods[20].selector = @selector(appendWithBoolean:withBoolean:);
  methods[21].selector = @selector(appendWithNSObjectArray:withNSObjectArray:);
  methods[22].selector = @selector(appendWithLongArray:withLongArray:);
  methods[23].selector = @selector(appendWithIntArray:withIntArray:);
  methods[24].selector = @selector(appendWithShortArray:withShortArray:);
  methods[25].selector = @selector(appendWithCharArray:withCharArray:);
  methods[26].selector = @selector(appendWithByteArray:withByteArray:);
  methods[27].selector = @selector(appendWithDoubleArray:withDoubleArray:);
  methods[28].selector = @selector(appendWithFloatArray:withFloatArray:);
  methods[29].selector = @selector(appendWithBooleanArray:withBooleanArray:);
  methods[30].selector = @selector(isEquals);
  methods[31].selector = @selector(build);
  methods[32].selector = @selector(setEqualsWithBoolean:);
  methods[33].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REGISTRY", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 38, 39, -1 },
    { "isEquals_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Set<Lorg/apache/commons/lang3/tuple/Pair<Lorg/apache/commons/lang3/builder/IDKey;Lorg/apache/commons/lang3/builder/IDKey;>;>;", "getRegisterPair", "LNSObject;LNSObject;", "(Ljava/lang/Object;Ljava/lang/Object;)Lorg/apache/commons/lang3/tuple/Pair<Lorg/apache/commons/lang3/builder/IDKey;Lorg/apache/commons/lang3/builder/IDKey;>;", "isRegistered", "register", "unregister", "reflectionEquals", "LNSObject;LNSObject;LJavaUtilCollection;", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Collection<Ljava/lang/String;>;)Z", "LNSObject;LNSObject;[LNSString;", "LNSObject;LNSObject;Z", "LNSObject;LNSObject;ZLIOSClass;[LNSString;", "(Ljava/lang/Object;Ljava/lang/Object;ZLjava/lang/Class<*>;[Ljava/lang/String;)Z", "reflectionAppend", "LNSObject;LNSObject;LIOSClass;LOrgApacheCommonsLang3BuilderEqualsBuilder;Z[LNSString;", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Class<*>;Lorg/apache/commons/lang3/builder/EqualsBuilder;Z[Ljava/lang/String;)V", "appendSuper", "Z", "append", "JJ", "II", "SS", "CC", "BB", "DD", "FF", "ZZ", "[LNSObject;[LNSObject;", "[J[J", "[I[I", "[S[S", "[C[C", "[B[B", "[D[D", "[F[F", "[Z[Z", "setEquals", &OrgApacheCommonsLang3BuilderEqualsBuilder_REGISTRY, "Ljava/lang/ThreadLocal<Ljava/util/Set<Lorg/apache/commons/lang3/tuple/Pair<Lorg/apache/commons/lang3/builder/IDKey;Lorg/apache/commons/lang3/builder/IDKey;>;>;>;", "Ljava/lang/Object;Lorg/apache/commons/lang3/builder/Builder<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3BuilderEqualsBuilder = { "EqualsBuilder", "org.apache.commons.lang3.builder", ptrTable, methods, fields, 7, 0x1, 34, 2, -1, -1, -1, 40, -1 };
  return &_OrgApacheCommonsLang3BuilderEqualsBuilder;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3BuilderEqualsBuilder class]) {
    OrgApacheCommonsLang3BuilderEqualsBuilder_REGISTRY = new_JavaLangThreadLocal_init();
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3BuilderEqualsBuilder)
  }
}

@end

id<JavaUtilSet> OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry() {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  return [((JavaLangThreadLocal *) nil_chk(OrgApacheCommonsLang3BuilderEqualsBuilder_REGISTRY)) get];
}

OrgApacheCommonsLang3TuplePair *OrgApacheCommonsLang3BuilderEqualsBuilder_getRegisterPairWithId_withId_(id lhs, id rhs) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  OrgApacheCommonsLang3BuilderIDKey *left = new_OrgApacheCommonsLang3BuilderIDKey_initWithId_(lhs);
  OrgApacheCommonsLang3BuilderIDKey *right = new_OrgApacheCommonsLang3BuilderIDKey_initWithId_(rhs);
  return OrgApacheCommonsLang3TuplePair_ofWithId_withId_(left, right);
}

jboolean OrgApacheCommonsLang3BuilderEqualsBuilder_isRegisteredWithId_withId_(id lhs, id rhs) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  id<JavaUtilSet> registry = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry();
  OrgApacheCommonsLang3TuplePair *pair = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegisterPairWithId_withId_(lhs, rhs);
  OrgApacheCommonsLang3TuplePair *swappedPair = OrgApacheCommonsLang3TuplePair_ofWithId_withId_([((OrgApacheCommonsLang3TuplePair *) nil_chk(pair)) getLeft], [pair getRight]);
  return registry != nil && ([registry containsWithId:pair] || [registry containsWithId:swappedPair]);
}

void OrgApacheCommonsLang3BuilderEqualsBuilder_register__WithId_withId_(id lhs, id rhs) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  @synchronized(OrgApacheCommonsLang3BuilderEqualsBuilder_class_()) {
    if (OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry() == nil) {
      [((JavaLangThreadLocal *) nil_chk(OrgApacheCommonsLang3BuilderEqualsBuilder_REGISTRY)) setWithId:new_JavaUtilHashSet_init()];
    }
  }
  id<JavaUtilSet> registry = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry();
  OrgApacheCommonsLang3TuplePair *pair = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegisterPairWithId_withId_(lhs, rhs);
  [((id<JavaUtilSet>) nil_chk(registry)) addWithId:pair];
}

void OrgApacheCommonsLang3BuilderEqualsBuilder_unregisterWithId_withId_(id lhs, id rhs) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  id<JavaUtilSet> registry = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry();
  if (registry != nil) {
    OrgApacheCommonsLang3TuplePair *pair = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegisterPairWithId_withId_(lhs, rhs);
    [registry removeWithId:pair];
    @synchronized(OrgApacheCommonsLang3BuilderEqualsBuilder_class_()) {
      registry = OrgApacheCommonsLang3BuilderEqualsBuilder_getRegistry();
      if (registry != nil && [registry isEmpty]) {
        [((JavaLangThreadLocal *) nil_chk(OrgApacheCommonsLang3BuilderEqualsBuilder_REGISTRY)) remove];
      }
    }
  }
}

void OrgApacheCommonsLang3BuilderEqualsBuilder_init(OrgApacheCommonsLang3BuilderEqualsBuilder *self) {
  NSObject_init(self);
  self->isEquals_ = true;
}

OrgApacheCommonsLang3BuilderEqualsBuilder *new_OrgApacheCommonsLang3BuilderEqualsBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3BuilderEqualsBuilder, init)
}

OrgApacheCommonsLang3BuilderEqualsBuilder *create_OrgApacheCommonsLang3BuilderEqualsBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3BuilderEqualsBuilder, init)
}

jboolean OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withJavaUtilCollection_(id lhs, id rhs, id<JavaUtilCollection> excludeFields) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(lhs, rhs, OrgApacheCommonsLang3BuilderReflectionToStringBuilder_toNoNullStringArrayWithJavaUtilCollection_(excludeFields));
}

jboolean OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(id lhs, id rhs, IOSObjectArray *excludeFields) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withBoolean_withIOSClass_withNSStringArray_(lhs, rhs, false, nil, excludeFields);
}

jboolean OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withBoolean_(id lhs, id rhs, jboolean testTransients) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  return OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withBoolean_withIOSClass_withNSStringArray_(lhs, rhs, testTransients, nil, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

jboolean OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withBoolean_withIOSClass_withNSStringArray_(id lhs, id rhs, jboolean testTransients, IOSClass *reflectUpToClass, IOSObjectArray *excludeFields) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  if (lhs == rhs) {
    return true;
  }
  if (lhs == nil || rhs == nil) {
    return false;
  }
  IOSClass *lhsClass = [lhs java_getClass];
  IOSClass *rhsClass = [rhs java_getClass];
  IOSClass *testClass;
  if ([lhsClass isInstance:rhs]) {
    testClass = lhsClass;
    if (![rhsClass isInstance:lhs]) {
      testClass = rhsClass;
    }
  }
  else if ([rhsClass isInstance:lhs]) {
    testClass = rhsClass;
    if (![lhsClass isInstance:rhs]) {
      testClass = lhsClass;
    }
  }
  else {
    return false;
  }
  OrgApacheCommonsLang3BuilderEqualsBuilder *equalsBuilder = new_OrgApacheCommonsLang3BuilderEqualsBuilder_init();
  @try {
    if ([testClass isArray]) {
      (void) [equalsBuilder appendWithId:lhs withId:rhs];
    }
    else {
      OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionAppendWithId_withId_withIOSClass_withOrgApacheCommonsLang3BuilderEqualsBuilder_withBoolean_withNSStringArray_(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
      while ([((IOSClass *) nil_chk(testClass)) getSuperclass] != nil && testClass != reflectUpToClass) {
        testClass = [testClass getSuperclass];
        OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionAppendWithId_withId_withIOSClass_withOrgApacheCommonsLang3BuilderEqualsBuilder_withBoolean_withNSStringArray_(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    return false;
  }
  return [equalsBuilder isEquals];
}

void OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionAppendWithId_withId_withIOSClass_withOrgApacheCommonsLang3BuilderEqualsBuilder_withBoolean_withNSStringArray_(id lhs, id rhs, IOSClass *clazz, OrgApacheCommonsLang3BuilderEqualsBuilder *builder, jboolean useTransients, IOSObjectArray *excludeFields) {
  OrgApacheCommonsLang3BuilderEqualsBuilder_initialize();
  if (OrgApacheCommonsLang3BuilderEqualsBuilder_isRegisteredWithId_withId_(lhs, rhs)) {
    return;
  }
  @try {
    OrgApacheCommonsLang3BuilderEqualsBuilder_register__WithId_withId_(lhs, rhs);
    IOSObjectArray *fields = [((IOSClass *) nil_chk(clazz)) getDeclaredFields];
    JavaLangReflectAccessibleObject_setAccessibleWithJavaLangReflectAccessibleObjectArray_withBoolean_(fields, true);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_ && ((OrgApacheCommonsLang3BuilderEqualsBuilder *) nil_chk(builder))->isEquals_; i++) {
      JavaLangReflectField *f = IOSObjectArray_Get(fields, i);
      if (!OrgApacheCommonsLang3ArrayUtils_containsWithNSObjectArray_withId_(excludeFields, [((JavaLangReflectField *) nil_chk(f)) getName]) && ([((NSString *) nil_chk([f getName])) java_indexOf:'$'] == -1) && (useTransients || !JavaLangReflectModifier_isTransientWithInt_([f getModifiers])) && (!JavaLangReflectModifier_isStaticWithInt_([f getModifiers]))) {
        @try {
          (void) [((OrgApacheCommonsLang3BuilderEqualsBuilder *) nil_chk(builder)) appendWithId:[f getWithId:lhs] withId:[f getWithId:rhs]];
        }
        @catch (JavaLangIllegalAccessException *e) {
          @throw new_JavaLangInternalError_initWithNSString_(@"Unexpected IllegalAccessException");
        }
      }
    }
  }
  @finally {
    OrgApacheCommonsLang3BuilderEqualsBuilder_unregisterWithId_withId_(lhs, rhs);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3BuilderEqualsBuilder)
