//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/LocaleUtils.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "org/apache/commons/lang3/LocaleUtils.h"
#include "org/apache/commons/lang3/StringUtils.h"

inline id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3LocaleUtils_get_cLanguagesByCountry(void);
static id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3LocaleUtils_cLanguagesByCountry;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3LocaleUtils, cLanguagesByCountry, id<JavaUtilConcurrentConcurrentMap>)

inline id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3LocaleUtils_get_cCountriesByLanguage(void);
static id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3LocaleUtils_cCountriesByLanguage;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3LocaleUtils, cCountriesByLanguage, id<JavaUtilConcurrentConcurrentMap>)

inline id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_SyncAvoid_get_AVAILABLE_LOCALE_LIST(void);
static id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_SyncAvoid_AVAILABLE_LOCALE_LIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3LocaleUtils_SyncAvoid, AVAILABLE_LOCALE_LIST, id<JavaUtilList>)

inline id<JavaUtilSet> OrgApacheCommonsLang3LocaleUtils_SyncAvoid_get_AVAILABLE_LOCALE_SET(void);
static id<JavaUtilSet> OrgApacheCommonsLang3LocaleUtils_SyncAvoid_AVAILABLE_LOCALE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3LocaleUtils_SyncAvoid, AVAILABLE_LOCALE_SET, id<JavaUtilSet>)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3LocaleUtils)

@implementation OrgApacheCommonsLang3LocaleUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3LocaleUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaUtilLocale *)toLocaleWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3LocaleUtils_toLocaleWithNSString_(str);
}

+ (id<JavaUtilList>)localeLookupListWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3LocaleUtils_localeLookupListWithJavaUtilLocale_(locale);
}

+ (id<JavaUtilList>)localeLookupListWithJavaUtilLocale:(JavaUtilLocale *)locale
                                    withJavaUtilLocale:(JavaUtilLocale *)defaultLocale {
  return OrgApacheCommonsLang3LocaleUtils_localeLookupListWithJavaUtilLocale_withJavaUtilLocale_(locale, defaultLocale);
}

+ (id<JavaUtilList>)availableLocaleList {
  return OrgApacheCommonsLang3LocaleUtils_availableLocaleList();
}

+ (id<JavaUtilSet>)availableLocaleSet {
  return OrgApacheCommonsLang3LocaleUtils_availableLocaleSet();
}

+ (jboolean)isAvailableLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3LocaleUtils_isAvailableLocaleWithJavaUtilLocale_(locale);
}

+ (id<JavaUtilList>)languagesByCountryWithNSString:(NSString *)countryCode {
  return OrgApacheCommonsLang3LocaleUtils_languagesByCountryWithNSString_(countryCode);
}

+ (id<JavaUtilList>)countriesByLanguageWithNSString:(NSString *)languageCode {
  return OrgApacheCommonsLang3LocaleUtils_countriesByLanguageWithNSString_(languageCode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 2, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, -1, -1, -1, 8, -1, -1 },
    { NULL, "Z", 0x9, 9, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 10, 1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 12, 1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toLocaleWithNSString:);
  methods[2].selector = @selector(localeLookupListWithJavaUtilLocale:);
  methods[3].selector = @selector(localeLookupListWithJavaUtilLocale:withJavaUtilLocale:);
  methods[4].selector = @selector(availableLocaleList);
  methods[5].selector = @selector(availableLocaleSet);
  methods[6].selector = @selector(isAvailableLocaleWithJavaUtilLocale:);
  methods[7].selector = @selector(languagesByCountryWithNSString:);
  methods[8].selector = @selector(countriesByLanguageWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cLanguagesByCountry", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 13, 14, -1 },
    { "cCountriesByLanguage", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 15, 14, -1 },
  };
  static const void *ptrTable[] = { "toLocale", "LNSString;", "localeLookupList", "LJavaUtilLocale;", "(Ljava/util/Locale;)Ljava/util/List<Ljava/util/Locale;>;", "LJavaUtilLocale;LJavaUtilLocale;", "(Ljava/util/Locale;Ljava/util/Locale;)Ljava/util/List<Ljava/util/Locale;>;", "()Ljava/util/List<Ljava/util/Locale;>;", "()Ljava/util/Set<Ljava/util/Locale;>;", "isAvailableLocale", "languagesByCountry", "(Ljava/lang/String;)Ljava/util/List<Ljava/util/Locale;>;", "countriesByLanguage", &OrgApacheCommonsLang3LocaleUtils_cLanguagesByCountry, "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Ljava/util/List<Ljava/util/Locale;>;>;", &OrgApacheCommonsLang3LocaleUtils_cCountriesByLanguage, "LOrgApacheCommonsLang3LocaleUtils_SyncAvoid;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3LocaleUtils = { "LocaleUtils", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, 16, -1, -1, -1 };
  return &_OrgApacheCommonsLang3LocaleUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3LocaleUtils class]) {
    OrgApacheCommonsLang3LocaleUtils_cLanguagesByCountry = new_JavaUtilConcurrentConcurrentHashMap_init();
    OrgApacheCommonsLang3LocaleUtils_cCountriesByLanguage = new_JavaUtilConcurrentConcurrentHashMap_init();
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3LocaleUtils)
  }
}

@end

void OrgApacheCommonsLang3LocaleUtils_init(OrgApacheCommonsLang3LocaleUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3LocaleUtils *new_OrgApacheCommonsLang3LocaleUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3LocaleUtils, init)
}

OrgApacheCommonsLang3LocaleUtils *create_OrgApacheCommonsLang3LocaleUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3LocaleUtils, init)
}

JavaUtilLocale *OrgApacheCommonsLang3LocaleUtils_toLocaleWithNSString_(NSString *str) {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if ([str java_isEmpty]) {
    return new_JavaUtilLocale_initWithNSString_withNSString_(@"", @"");
  }
  if ([str java_contains:@"#"]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
  }
  jint len = [str java_length];
  if (len < 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
  }
  jchar ch0 = [str charAtWithInt:0];
  if (ch0 == '_') {
    if (len < 3) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
    }
    jchar ch1 = [str charAtWithInt:1];
    jchar ch2 = [str charAtWithInt:2];
    if (!JavaLangCharacter_isUpperCaseWithChar_(ch1) || !JavaLangCharacter_isUpperCaseWithChar_(ch2)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
    }
    if (len == 3) {
      return new_JavaUtilLocale_initWithNSString_withNSString_(@"", [str java_substring:1 endIndex:3]);
    }
    if (len < 5) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
    }
    if ([str charAtWithInt:3] != '_') {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
    }
    return new_JavaUtilLocale_initWithNSString_withNSString_withNSString_(@"", [str java_substring:1 endIndex:3], [str java_substring:4]);
  }
  IOSObjectArray *split = [str java_split:@"_" limit:-1];
  jint occurrences = ((IOSObjectArray *) nil_chk(split))->size_ - 1;
  switch (occurrences) {
    case 0:
    if (OrgApacheCommonsLang3StringUtils_isAllLowerCaseWithJavaLangCharSequence_(str) && (len == 2 || len == 3)) {
      return new_JavaUtilLocale_initWithNSString_(str);
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
    case 1:
    if (OrgApacheCommonsLang3StringUtils_isAllLowerCaseWithJavaLangCharSequence_(IOSObjectArray_Get(split, 0)) && ([((NSString *) nil_chk(IOSObjectArray_Get(split, 0))) java_length] == 2 || [((NSString *) nil_chk(IOSObjectArray_Get(split, 0))) java_length] == 3) && [((NSString *) nil_chk(IOSObjectArray_Get(split, 1))) java_length] == 2 && OrgApacheCommonsLang3StringUtils_isAllUpperCaseWithJavaLangCharSequence_(IOSObjectArray_Get(split, 1))) {
      return new_JavaUtilLocale_initWithNSString_withNSString_(IOSObjectArray_Get(split, 0), IOSObjectArray_Get(split, 1));
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
    case 2:
    if (OrgApacheCommonsLang3StringUtils_isAllLowerCaseWithJavaLangCharSequence_(IOSObjectArray_Get(split, 0)) && ([((NSString *) nil_chk(IOSObjectArray_Get(split, 0))) java_length] == 2 || [((NSString *) nil_chk(IOSObjectArray_Get(split, 0))) java_length] == 3) && ([((NSString *) nil_chk(IOSObjectArray_Get(split, 1))) java_length] == 0 || ([((NSString *) nil_chk(IOSObjectArray_Get(split, 1))) java_length] == 2 && OrgApacheCommonsLang3StringUtils_isAllUpperCaseWithJavaLangCharSequence_(IOSObjectArray_Get(split, 1)))) && [((NSString *) nil_chk(IOSObjectArray_Get(split, 2))) java_length] > 0) {
      return new_JavaUtilLocale_initWithNSString_withNSString_withNSString_(IOSObjectArray_Get(split, 0), IOSObjectArray_Get(split, 1), IOSObjectArray_Get(split, 2));
    }
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid locale format: ", str));
  }
}

id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_localeLookupListWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  return OrgApacheCommonsLang3LocaleUtils_localeLookupListWithJavaUtilLocale_withJavaUtilLocale_(locale, locale);
}

id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_localeLookupListWithJavaUtilLocale_withJavaUtilLocale_(JavaUtilLocale *locale, JavaUtilLocale *defaultLocale) {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  id<JavaUtilList> list = new_JavaUtilArrayList_initWithInt_(4);
  if (locale != nil) {
    [list addWithId:locale];
    if ([((NSString *) nil_chk([locale getVariant])) java_length] > 0) {
      [list addWithId:new_JavaUtilLocale_initWithNSString_withNSString_([locale getLanguage], [locale getCountry])];
    }
    if ([((NSString *) nil_chk([locale getCountry])) java_length] > 0) {
      [list addWithId:new_JavaUtilLocale_initWithNSString_withNSString_([locale getLanguage], @"")];
    }
    if ([list containsWithId:defaultLocale] == false) {
      [list addWithId:defaultLocale];
    }
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(list);
}

id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_availableLocaleList() {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  return JreLoadStatic(OrgApacheCommonsLang3LocaleUtils_SyncAvoid, AVAILABLE_LOCALE_LIST);
}

id<JavaUtilSet> OrgApacheCommonsLang3LocaleUtils_availableLocaleSet() {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  return JreLoadStatic(OrgApacheCommonsLang3LocaleUtils_SyncAvoid, AVAILABLE_LOCALE_SET);
}

jboolean OrgApacheCommonsLang3LocaleUtils_isAvailableLocaleWithJavaUtilLocale_(JavaUtilLocale *locale) {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  return [((id<JavaUtilList>) nil_chk(OrgApacheCommonsLang3LocaleUtils_availableLocaleList())) containsWithId:locale];
}

id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_languagesByCountryWithNSString_(NSString *countryCode) {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  if (countryCode == nil) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> langs = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgApacheCommonsLang3LocaleUtils_cLanguagesByCountry)) getWithId:countryCode];
  if (langs == nil) {
    langs = new_JavaUtilArrayList_init();
    id<JavaUtilList> locales = OrgApacheCommonsLang3LocaleUtils_availableLocaleList();
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(locales)) size]; i++) {
      JavaUtilLocale *locale = [locales getWithInt:i];
      if ([countryCode isEqual:[((JavaUtilLocale *) nil_chk(locale)) getCountry]] && [((NSString *) nil_chk([locale getVariant])) java_isEmpty]) {
        [langs addWithId:locale];
      }
    }
    langs = JavaUtilCollections_unmodifiableListWithJavaUtilList_(langs);
    (void) [OrgApacheCommonsLang3LocaleUtils_cLanguagesByCountry putIfAbsentWithId:countryCode withId:langs];
    langs = [OrgApacheCommonsLang3LocaleUtils_cLanguagesByCountry getWithId:countryCode];
  }
  return langs;
}

id<JavaUtilList> OrgApacheCommonsLang3LocaleUtils_countriesByLanguageWithNSString_(NSString *languageCode) {
  OrgApacheCommonsLang3LocaleUtils_initialize();
  if (languageCode == nil) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> countries = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgApacheCommonsLang3LocaleUtils_cCountriesByLanguage)) getWithId:languageCode];
  if (countries == nil) {
    countries = new_JavaUtilArrayList_init();
    id<JavaUtilList> locales = OrgApacheCommonsLang3LocaleUtils_availableLocaleList();
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(locales)) size]; i++) {
      JavaUtilLocale *locale = [locales getWithInt:i];
      if ([languageCode isEqual:[((JavaUtilLocale *) nil_chk(locale)) getLanguage]] && [((NSString *) nil_chk([locale getCountry])) java_length] != 0 && [((NSString *) nil_chk([locale getVariant])) java_isEmpty]) {
        [countries addWithId:locale];
      }
    }
    countries = JavaUtilCollections_unmodifiableListWithJavaUtilList_(countries);
    (void) [OrgApacheCommonsLang3LocaleUtils_cCountriesByLanguage putIfAbsentWithId:languageCode withId:countries];
    countries = [OrgApacheCommonsLang3LocaleUtils_cCountriesByLanguage getWithId:languageCode];
  }
  return countries;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3LocaleUtils)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3LocaleUtils_SyncAvoid)

@implementation OrgApacheCommonsLang3LocaleUtils_SyncAvoid

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3LocaleUtils_SyncAvoid_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AVAILABLE_LOCALE_LIST", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 0, 1, -1 },
    { "AVAILABLE_LOCALE_SET", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 2, 3, -1 },
  };
  static const void *ptrTable[] = { &OrgApacheCommonsLang3LocaleUtils_SyncAvoid_AVAILABLE_LOCALE_LIST, "Ljava/util/List<Ljava/util/Locale;>;", &OrgApacheCommonsLang3LocaleUtils_SyncAvoid_AVAILABLE_LOCALE_SET, "Ljava/util/Set<Ljava/util/Locale;>;", "LOrgApacheCommonsLang3LocaleUtils;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3LocaleUtils_SyncAvoid = { "SyncAvoid", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x8, 1, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3LocaleUtils_SyncAvoid;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3LocaleUtils_SyncAvoid class]) {
    {
      id<JavaUtilList> list = new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(JavaUtilLocale_getAvailableLocales()));
      OrgApacheCommonsLang3LocaleUtils_SyncAvoid_AVAILABLE_LOCALE_LIST = JavaUtilCollections_unmodifiableListWithJavaUtilList_(list);
      OrgApacheCommonsLang3LocaleUtils_SyncAvoid_AVAILABLE_LOCALE_SET = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(new_JavaUtilHashSet_initWithJavaUtilCollection_(list));
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3LocaleUtils_SyncAvoid)
  }
}

@end

void OrgApacheCommonsLang3LocaleUtils_SyncAvoid_init(OrgApacheCommonsLang3LocaleUtils_SyncAvoid *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3LocaleUtils_SyncAvoid *new_OrgApacheCommonsLang3LocaleUtils_SyncAvoid_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3LocaleUtils_SyncAvoid, init)
}

OrgApacheCommonsLang3LocaleUtils_SyncAvoid *create_OrgApacheCommonsLang3LocaleUtils_SyncAvoid_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3LocaleUtils_SyncAvoid, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3LocaleUtils_SyncAvoid)
