//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-lang3-3.4-fis-sources.jar!org/apache/commons/lang3/time/FormatCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/text/DateFormat.h"
#include "java/text/Format.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "org/apache/commons/lang3/time/FormatCache.h"

@interface OrgApacheCommonsLang3TimeFormatCache () {
 @public
  id<JavaUtilConcurrentConcurrentMap> cInstanceCache_;
}

- (JavaTextFormat *)getDateTimeInstanceWithJavaLangInteger:(JavaLangInteger *)dateStyle
                                       withJavaLangInteger:(JavaLangInteger *)timeStyle
                                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                        withJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFormatCache, cInstanceCache_, id<JavaUtilConcurrentConcurrentMap>)

inline id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFormatCache_get_cDateTimeInstanceCache(void);
static id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFormatCache_cDateTimeInstanceCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFormatCache, cDateTimeInstanceCache, id<JavaUtilConcurrentConcurrentMap>)

__attribute__((unused)) static JavaTextFormat *OrgApacheCommonsLang3TimeFormatCache_getDateTimeInstanceWithJavaLangInteger_withJavaLangInteger_withJavaUtilTimeZone_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFormatCache *self, JavaLangInteger *dateStyle, JavaLangInteger *timeStyle, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale);

@interface OrgApacheCommonsLang3TimeFormatCache_MultipartKey : NSObject {
 @public
  IOSObjectArray *keys_;
  jint hashCode_;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFormatCache_MultipartKey)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFormatCache_MultipartKey, keys_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(OrgApacheCommonsLang3TimeFormatCache_MultipartKey *self, IOSObjectArray *keys);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFormatCache_MultipartKey *new_OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(IOSObjectArray *keys) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFormatCache_MultipartKey *create_OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(IOSObjectArray *keys);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFormatCache_MultipartKey)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFormatCache)

@implementation OrgApacheCommonsLang3TimeFormatCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFormatCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaTextFormat *)getInstance {
  return [self getDateTimeInstanceWithInt:JavaTextDateFormat_SHORT withInt:JavaTextDateFormat_SHORT withJavaUtilTimeZone:JavaUtilTimeZone_getDefault() withJavaUtilLocale:JavaUtilLocale_getDefault()];
}

- (JavaTextFormat *)getInstanceWithNSString:(NSString *)pattern
                       withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                         withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (pattern == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"pattern must not be null");
  }
  if (timeZone == nil) {
    timeZone = JavaUtilTimeZone_getDefault();
  }
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  OrgApacheCommonsLang3TimeFormatCache_MultipartKey *key = new_OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ pattern, timeZone, locale } count:3 type:NSObject_class_()]);
  JavaTextFormat *format = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(cInstanceCache_)) getWithId:key];
  if (format == nil) {
    format = [self createInstanceWithNSString:pattern withJavaUtilTimeZone:timeZone withJavaUtilLocale:locale];
    JavaTextFormat *previousValue = [cInstanceCache_ putIfAbsentWithId:key withId:format];
    if (previousValue != nil) {
      format = previousValue;
    }
  }
  return format;
}

- (JavaTextFormat *)createInstanceWithNSString:(NSString *)pattern
                          withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaTextFormat *)getDateTimeInstanceWithJavaLangInteger:(JavaLangInteger *)dateStyle
                                       withJavaLangInteger:(JavaLangInteger *)timeStyle
                                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFormatCache_getDateTimeInstanceWithJavaLangInteger_withJavaLangInteger_withJavaUtilTimeZone_withJavaUtilLocale_(self, dateStyle, timeStyle, timeZone, locale);
}

- (JavaTextFormat *)getDateTimeInstanceWithInt:(jint)dateStyle
                                       withInt:(jint)timeStyle
                          withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFormatCache_getDateTimeInstanceWithJavaLangInteger_withJavaLangInteger_withJavaUtilTimeZone_withJavaUtilLocale_(self, JavaLangInteger_valueOfWithInt_(dateStyle), JavaLangInteger_valueOfWithInt_(timeStyle), timeZone, locale);
}

- (JavaTextFormat *)getDateInstanceWithInt:(jint)dateStyle
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFormatCache_getDateTimeInstanceWithJavaLangInteger_withJavaLangInteger_withJavaUtilTimeZone_withJavaUtilLocale_(self, JavaLangInteger_valueOfWithInt_(dateStyle), nil, timeZone, locale);
}

- (JavaTextFormat *)getTimeInstanceWithInt:(jint)timeStyle
                      withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                        withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFormatCache_getDateTimeInstanceWithJavaLangInteger_withJavaLangInteger_withJavaUtilTimeZone_withJavaUtilLocale_(self, nil, JavaLangInteger_valueOfWithInt_(timeStyle), timeZone, locale);
}

+ (NSString *)getPatternForStyleWithJavaLangInteger:(JavaLangInteger *)dateStyle
                                withJavaLangInteger:(JavaLangInteger *)timeStyle
                                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3TimeFormatCache_getPatternForStyleWithJavaLangInteger_withJavaLangInteger_withJavaUtilLocale_(dateStyle, timeStyle, locale);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x404, 4, 2, -1, 3, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x2, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x0, 5, 8, -1, 9, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x0, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaTextFormat;", 0x0, 13, 11, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x8, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(getInstanceWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[3].selector = @selector(createInstanceWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[4].selector = @selector(getDateTimeInstanceWithJavaLangInteger:withJavaLangInteger:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[5].selector = @selector(getDateTimeInstanceWithInt:withInt:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[6].selector = @selector(getDateInstanceWithInt:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[7].selector = @selector(getTimeInstanceWithInt:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[8].selector = @selector(getPatternForStyleWithJavaLangInteger:withJavaLangInteger:withJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFormatCache_NONE, 0x18, -1, -1, -1, -1 },
    { "cInstanceCache_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "cDateTimeInstanceCache", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 17, 18, -1 },
  };
  static const void *ptrTable[] = { "()TF;", "getInstance", "LNSString;LJavaUtilTimeZone;LJavaUtilLocale;", "(Ljava/lang/String;Ljava/util/TimeZone;Ljava/util/Locale;)TF;", "createInstance", "getDateTimeInstance", "LJavaLangInteger;LJavaLangInteger;LJavaUtilTimeZone;LJavaUtilLocale;", "(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/util/TimeZone;Ljava/util/Locale;)TF;", "IILJavaUtilTimeZone;LJavaUtilLocale;", "(IILjava/util/TimeZone;Ljava/util/Locale;)TF;", "getDateInstance", "ILJavaUtilTimeZone;LJavaUtilLocale;", "(ILjava/util/TimeZone;Ljava/util/Locale;)TF;", "getTimeInstance", "getPatternForStyle", "LJavaLangInteger;LJavaLangInteger;LJavaUtilLocale;", "Ljava/util/concurrent/ConcurrentMap<Lorg/apache/commons/lang3/time/FormatCache$MultipartKey;TF;>;", &OrgApacheCommonsLang3TimeFormatCache_cDateTimeInstanceCache, "Ljava/util/concurrent/ConcurrentMap<Lorg/apache/commons/lang3/time/FormatCache$MultipartKey;Ljava/lang/String;>;", "LOrgApacheCommonsLang3TimeFormatCache_MultipartKey;", "<F:Ljava/text/Format;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFormatCache = { "FormatCache", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x400, 9, 3, -1, 19, -1, 20, -1 };
  return &_OrgApacheCommonsLang3TimeFormatCache;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFormatCache class]) {
    OrgApacheCommonsLang3TimeFormatCache_cDateTimeInstanceCache = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(7);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFormatCache)
  }
}

@end

void OrgApacheCommonsLang3TimeFormatCache_init(OrgApacheCommonsLang3TimeFormatCache *self) {
  NSObject_init(self);
  self->cInstanceCache_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(7);
}

JavaTextFormat *OrgApacheCommonsLang3TimeFormatCache_getDateTimeInstanceWithJavaLangInteger_withJavaLangInteger_withJavaUtilTimeZone_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFormatCache *self, JavaLangInteger *dateStyle, JavaLangInteger *timeStyle, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  if (locale == nil) {
    locale = JavaUtilLocale_getDefault();
  }
  NSString *pattern = OrgApacheCommonsLang3TimeFormatCache_getPatternForStyleWithJavaLangInteger_withJavaLangInteger_withJavaUtilLocale_(dateStyle, timeStyle, locale);
  return [self getInstanceWithNSString:pattern withJavaUtilTimeZone:timeZone withJavaUtilLocale:locale];
}

NSString *OrgApacheCommonsLang3TimeFormatCache_getPatternForStyleWithJavaLangInteger_withJavaLangInteger_withJavaUtilLocale_(JavaLangInteger *dateStyle, JavaLangInteger *timeStyle, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFormatCache_initialize();
  OrgApacheCommonsLang3TimeFormatCache_MultipartKey *key = new_OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ dateStyle, timeStyle, locale } count:3 type:NSObject_class_()]);
  NSString *pattern = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(OrgApacheCommonsLang3TimeFormatCache_cDateTimeInstanceCache)) getWithId:key];
  if (pattern == nil) {
    @try {
      JavaTextDateFormat *formatter;
      if (dateStyle == nil) {
        formatter = JavaTextDateFormat_getTimeInstanceWithInt_withJavaUtilLocale_([((JavaLangInteger *) nil_chk(timeStyle)) intValue], locale);
      }
      else if (timeStyle == nil) {
        formatter = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_([dateStyle intValue], locale);
      }
      else {
        formatter = JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_([dateStyle intValue], [timeStyle intValue], locale);
      }
      pattern = [((JavaTextSimpleDateFormat *) nil_chk(((JavaTextSimpleDateFormat *) cast_chk(formatter, [JavaTextSimpleDateFormat class])))) toPattern];
      NSString *previous = [OrgApacheCommonsLang3TimeFormatCache_cDateTimeInstanceCache putIfAbsentWithId:key withId:pattern];
      if (previous != nil) {
        pattern = previous;
      }
    }
    @catch (JavaLangClassCastException *ex) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"No date time pattern for locale: ", locale));
    }
  }
  return pattern;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFormatCache)

@implementation OrgApacheCommonsLang3TimeFormatCache_MultipartKey

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys {
  OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(self, keys);
  return self;
}

- (jboolean)isEqual:(id)obj {
  return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(keys_, ((OrgApacheCommonsLang3TimeFormatCache_MultipartKey *) nil_chk(((OrgApacheCommonsLang3TimeFormatCache_MultipartKey *) cast_chk(obj, [OrgApacheCommonsLang3TimeFormatCache_MultipartKey class]))))->keys_);
}

- (NSUInteger)hash {
  if (hashCode_ == 0) {
    jint rc = 0;
    {
      IOSObjectArray *a__ = keys_;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id key = *b__++;
        if (key != nil) {
          rc = rc * 7 + ((jint) [key hash]);
        }
      }
    }
    hashCode_ = rc;
  }
  return hashCode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hashCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;", "equals", "LNSObject;", "hashCode", "LOrgApacheCommonsLang3TimeFormatCache;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFormatCache_MultipartKey = { "MultipartKey", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFormatCache_MultipartKey;
}

@end

void OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(OrgApacheCommonsLang3TimeFormatCache_MultipartKey *self, IOSObjectArray *keys) {
  NSObject_init(self);
  self->keys_ = keys;
}

OrgApacheCommonsLang3TimeFormatCache_MultipartKey *new_OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(IOSObjectArray *keys) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFormatCache_MultipartKey, initWithNSObjectArray_, keys)
}

OrgApacheCommonsLang3TimeFormatCache_MultipartKey *create_OrgApacheCommonsLang3TimeFormatCache_MultipartKey_initWithNSObjectArray_(IOSObjectArray *keys) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFormatCache_MultipartKey, initWithNSObjectArray_, keys)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFormatCache_MultipartKey)
