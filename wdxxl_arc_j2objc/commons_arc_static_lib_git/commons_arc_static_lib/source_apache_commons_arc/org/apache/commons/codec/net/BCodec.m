//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/net/BCodec.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/nio/charset/Charset.h"
#include "org/apache/commons/codec/Charsets.h"
#include "org/apache/commons/codec/DecoderException.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/binary/Base64.h"
#include "org/apache/commons/codec/net/BCodec.h"
#include "org/apache/commons/codec/net/RFC1522Codec.h"

@interface OrgApacheCommonsCodecNetBCodec () {
 @public
  JavaNioCharsetCharset *charset_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecNetBCodec, charset_, JavaNioCharsetCharset *)

@implementation OrgApacheCommonsCodecNetBCodec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecNetBCodec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  OrgApacheCommonsCodecNetBCodec_initWithJavaNioCharsetCharset_(self, charset);
  return self;
}

- (instancetype)initWithNSString:(NSString *)charsetName {
  OrgApacheCommonsCodecNetBCodec_initWithNSString_(self, charsetName);
  return self;
}

- (NSString *)getEncoding {
  return @"B";
}

- (IOSByteArray *)doEncodingWithByteArray:(IOSByteArray *)bytes {
  if (bytes == nil) {
    return nil;
  }
  return OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_(bytes);
}

- (IOSByteArray *)doDecodingWithByteArray:(IOSByteArray *)bytes {
  if (bytes == nil) {
    return nil;
  }
  return OrgApacheCommonsCodecBinaryBase64_decodeBase64WithByteArray_(bytes);
}

- (NSString *)encodeWithNSString:(NSString *)value
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (value == nil) {
    return nil;
  }
  return [self encodeTextWithNSString:value withJavaNioCharsetCharset:charset];
}

- (NSString *)encodeWithNSString:(NSString *)value
                    withNSString:(NSString *)charset {
  if (value == nil) {
    return nil;
  }
  @try {
    return [self encodeTextWithNSString:value withNSString:charset];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (NSString *)encodeWithNSString:(NSString *)value {
  if (value == nil) {
    return nil;
  }
  return [self encodeWithNSString:value withJavaNioCharsetCharset:[self getCharset]];
}

- (NSString *)decodeWithNSString:(NSString *)value {
  if (value == nil) {
    return nil;
  }
  @try {
    return [self decodeTextWithNSString:value];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (id)encodeWithId:(id)value {
  if (value == nil) {
    return nil;
  }
  else if ([value isKindOfClass:[NSString class]]) {
    return [self encodeWithNSString:(NSString *) cast_chk(value, [NSString class])];
  }
  else {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(JreStrcat("$$$", @"Objects of type ", [[value java_getClass] getName], @" cannot be encoded using BCodec"));
  }
}

- (id)decodeWithId:(id)value {
  if (value == nil) {
    return nil;
  }
  else if ([value isKindOfClass:[NSString class]]) {
    return [self decodeWithNSString:(NSString *) cast_chk(value, [NSString class])];
  }
  else {
    @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_(JreStrcat("$$$", @"Objects of type ", [[value java_getClass] getName], @" cannot be decoded using BCodec"));
  }
}

- (JavaNioCharsetCharset *)getCharset {
  return self->charset_;
}

- (NSString *)getDefaultCharset {
  return [((JavaNioCharsetCharset *) nil_chk(self->charset_)) name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 8, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 1, 10, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 11, 7, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 11, 10, -1, -1, -1 },
    { NULL, "LJavaNioCharsetCharset;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaNioCharsetCharset:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(getEncoding);
  methods[4].selector = @selector(doEncodingWithByteArray:);
  methods[5].selector = @selector(doDecodingWithByteArray:);
  methods[6].selector = @selector(encodeWithNSString:withJavaNioCharsetCharset:);
  methods[7].selector = @selector(encodeWithNSString:withNSString:);
  methods[8].selector = @selector(encodeWithNSString:);
  methods[9].selector = @selector(decodeWithNSString:);
  methods[10].selector = @selector(encodeWithId:);
  methods[11].selector = @selector(decodeWithId:);
  methods[12].selector = @selector(getCharset);
  methods[13].selector = @selector(getDefaultCharset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "charset_", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioCharsetCharset;", "LNSString;", "doEncoding", "[B", "doDecoding", "encode", "LNSString;LJavaNioCharsetCharset;", "LOrgApacheCommonsCodecEncoderException;", "LNSString;LNSString;", "decode", "LOrgApacheCommonsCodecDecoderException;", "LNSObject;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecNetBCodec = { "BCodec", "org.apache.commons.codec.net", ptrTable, methods, fields, 7, 0x1, 14, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecNetBCodec;
}

@end

void OrgApacheCommonsCodecNetBCodec_init(OrgApacheCommonsCodecNetBCodec *self) {
  OrgApacheCommonsCodecNetBCodec_initWithJavaNioCharsetCharset_(self, JreLoadStatic(OrgApacheCommonsCodecCharsets, UTF_8));
}

OrgApacheCommonsCodecNetBCodec *new_OrgApacheCommonsCodecNetBCodec_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetBCodec, init)
}

OrgApacheCommonsCodecNetBCodec *create_OrgApacheCommonsCodecNetBCodec_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetBCodec, init)
}

void OrgApacheCommonsCodecNetBCodec_initWithJavaNioCharsetCharset_(OrgApacheCommonsCodecNetBCodec *self, JavaNioCharsetCharset *charset) {
  OrgApacheCommonsCodecNetRFC1522Codec_init(self);
  self->charset_ = charset;
}

OrgApacheCommonsCodecNetBCodec *new_OrgApacheCommonsCodecNetBCodec_initWithJavaNioCharsetCharset_(JavaNioCharsetCharset *charset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetBCodec, initWithJavaNioCharsetCharset_, charset)
}

OrgApacheCommonsCodecNetBCodec *create_OrgApacheCommonsCodecNetBCodec_initWithJavaNioCharsetCharset_(JavaNioCharsetCharset *charset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetBCodec, initWithJavaNioCharsetCharset_, charset)
}

void OrgApacheCommonsCodecNetBCodec_initWithNSString_(OrgApacheCommonsCodecNetBCodec *self, NSString *charsetName) {
  OrgApacheCommonsCodecNetBCodec_initWithJavaNioCharsetCharset_(self, JavaNioCharsetCharset_forNameWithNSString_(charsetName));
}

OrgApacheCommonsCodecNetBCodec *new_OrgApacheCommonsCodecNetBCodec_initWithNSString_(NSString *charsetName) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetBCodec, initWithNSString_, charsetName)
}

OrgApacheCommonsCodecNetBCodec *create_OrgApacheCommonsCodecNetBCodec_initWithNSString_(NSString *charsetName) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetBCodec, initWithNSString_, charsetName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecNetBCodec)
