//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: jar:file:commons-codec-1.10-sources.jar!org/apache/commons/codec/language/DaitchMokotoffSoundex.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Scanner.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/commons/codec/CharEncoding.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/DaitchMokotoffSoundex.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex () {
 @public
  jboolean folding_;
}

+ (void)parseRulesWithJavaUtilScanner:(JavaUtilScanner *)scanner
                         withNSString:(NSString *)location
                      withJavaUtilMap:(id<JavaUtilMap>)ruleMapping
                      withJavaUtilMap:(id<JavaUtilMap>)asciiFoldings;

+ (NSString *)stripQuotesWithNSString:(NSString *)str;

- (NSString *)cleanupWithNSString:(NSString *)input;

- (IOSObjectArray *)soundexWithNSString:(NSString *)source
                            withBoolean:(jboolean)branching;

@end

inline NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_COMMENT(void);
static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_COMMENT = @"//";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, COMMENT, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_DOUBLE_QUOTE(void);
static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_DOUBLE_QUOTE = @"\"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, DOUBLE_QUOTE, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_MULTILINE_COMMENT_END(void);
static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MULTILINE_COMMENT_END = @"*/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, MULTILINE_COMMENT_END, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_MULTILINE_COMMENT_START(void);
static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MULTILINE_COMMENT_START = @"/*";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, MULTILINE_COMMENT_START, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_RESOURCE_FILE(void);
static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RESOURCE_FILE = @"org/apache/commons/codec/language/dmrules.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, RESOURCE_FILE, NSString *)

inline jint OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_MAX_LENGTH(void);
#define OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MAX_LENGTH 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, MAX_LENGTH, jint)

inline id<JavaUtilMap> OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_RULES(void);
static id<JavaUtilMap> OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RULES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, RULES, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_get_FOLDINGS(void);
static id<JavaUtilMap> OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_FOLDINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, FOLDINGS, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_parseRulesWithJavaUtilScanner_withNSString_withJavaUtilMap_withJavaUtilMap_(JavaUtilScanner *scanner, NSString *location, id<JavaUtilMap> ruleMapping, id<JavaUtilMap> asciiFoldings);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(NSString *str);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_cleanupWithNSString_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *self, NSString *input);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_soundexWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *self, NSString *source, jboolean branching);

@interface OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch : NSObject {
 @public
  JavaLangStringBuilder *builder_;
  NSString *cachedString_;
  NSString *lastReplacement_;
}

- (instancetype)init;

- (OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *)createBranch;

- (jboolean)isEqual:(id)other;

- (void)finish;

- (NSUInteger)hash;

- (void)processNextReplacementWithNSString:(NSString *)replacement
                               withBoolean:(jboolean)forceAppend;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch, builder_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch, cachedString_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch, lastReplacement_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch)

@interface OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule : NSObject {
 @public
  NSString *pattern_;
  IOSObjectArray *replacementAtStart_;
  IOSObjectArray *replacementBeforeVowel_;
  IOSObjectArray *replacementDefault_;
}

- (instancetype)initWithNSString:(NSString *)pattern
                    withNSString:(NSString *)replacementAtStart
                    withNSString:(NSString *)replacementBeforeVowel
                    withNSString:(NSString *)replacementDefault;

- (jint)getPatternLength;

- (IOSObjectArray *)getReplacementsWithNSString:(NSString *)context
                                    withBoolean:(jboolean)atStart;

- (jboolean)isVowelWithChar:(jchar)ch;

- (jboolean)matchesWithNSString:(NSString *)context;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule, replacementAtStart_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule, replacementBeforeVowel_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule, replacementDefault_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *self, NSString *pattern, NSString *replacementAtStart, NSString *replacementBeforeVowel, NSString *replacementDefault);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(NSString *pattern, NSString *replacementAtStart, NSString *replacementBeforeVowel, NSString *replacementDefault) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(NSString *pattern, NSString *replacementAtStart, NSString *replacementBeforeVowel, NSString *replacementDefault);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_isVowelWithChar_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *self, jchar ch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule)

@interface OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *)rule1
               withId:(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *)rule2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex)

@implementation OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex

+ (void)parseRulesWithJavaUtilScanner:(JavaUtilScanner *)scanner
                         withNSString:(NSString *)location
                      withJavaUtilMap:(id<JavaUtilMap>)ruleMapping
                      withJavaUtilMap:(id<JavaUtilMap>)asciiFoldings {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_parseRulesWithJavaUtilScanner_withNSString_withJavaUtilMap_withJavaUtilMap_(scanner, location, ruleMapping, asciiFoldings);
}

+ (NSString *)stripQuotesWithNSString:(NSString *)str {
  return OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(str);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)folding {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initWithBoolean_(self, folding);
  return self;
}

- (NSString *)cleanupWithNSString:(NSString *)input {
  return OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_cleanupWithNSString_(self, input);
}

- (id)encodeWithId:(id)obj {
  if (!([obj isKindOfClass:[NSString class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String");
  }
  return [self encodeWithNSString:(NSString *) cast_chk(obj, [NSString class])];
}

- (NSString *)encodeWithNSString:(NSString *)source {
  if (source == nil) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_soundexWithNSString_withBoolean_(self, source, false)), 0);
}

- (NSString *)soundexWithNSString:(NSString *)source {
  IOSObjectArray *branches = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_soundexWithNSString_withBoolean_(self, source, true);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jint index = 0;
  {
    IOSObjectArray *a__ = branches;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *branch = *b__++;
      (void) [sb appendWithNSString:branch];
      if (++index < ((IOSObjectArray *) nil_chk(branches))->size_) {
        (void) [sb appendWithChar:'|'];
      }
    }
  }
  return [sb description];
}

- (IOSObjectArray *)soundexWithNSString:(NSString *)source
                            withBoolean:(jboolean)branching {
  return OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_soundexWithNSString_withBoolean_(self, source, branching);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(parseRulesWithJavaUtilScanner:withNSString:withJavaUtilMap:withJavaUtilMap:);
  methods[1].selector = @selector(stripQuotesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithBoolean:);
  methods[4].selector = @selector(cleanupWithNSString:);
  methods[5].selector = @selector(encodeWithId:);
  methods[6].selector = @selector(encodeWithNSString:);
  methods[7].selector = @selector(soundexWithNSString:);
  methods[8].selector = @selector(soundexWithNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMMENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "DOUBLE_QUOTE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "MULTILINE_COMMENT_END", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "MULTILINE_COMMENT_START", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "RESOURCE_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "MAX_LENGTH", "I", .constantValue.asInt = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MAX_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "RULES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 17, 18, -1 },
    { "FOLDINGS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 19, 20, -1 },
    { "folding_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseRules", "LJavaUtilScanner;LNSString;LJavaUtilMap;LJavaUtilMap;", "(Ljava/util/Scanner;Ljava/lang/String;Ljava/util/Map<Ljava/lang/Character;Ljava/util/List<Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;>;>;Ljava/util/Map<Ljava/lang/Character;Ljava/lang/Character;>;)V", "stripQuotes", "LNSString;", "Z", "cleanup", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "soundex", "LNSString;Z", &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_COMMENT, &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_DOUBLE_QUOTE, &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MULTILINE_COMMENT_END, &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MULTILINE_COMMENT_START, &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RESOURCE_FILE, &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RULES, "Ljava/util/Map<Ljava/lang/Character;Ljava/util/List<Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;>;>;", &OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_FOLDINGS, "Ljava/util/Map<Ljava/lang/Character;Ljava/lang/Character;>;", "LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch;LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex = { "DaitchMokotoffSoundex", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, 21, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex class]) {
    OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RULES = new_JavaUtilHashMap_init();
    OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_FOLDINGS = new_JavaUtilHashMap_init();
    {
      JavaIoInputStream *rulesIS = [((JavaLangClassLoader *) nil_chk([OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_class_() getClassLoader])) getResourceAsStreamWithNSString:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RESOURCE_FILE];
      if (rulesIS == nil) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to load resource: ", OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RESOURCE_FILE));
      }
      JavaUtilScanner *scanner = new_JavaUtilScanner_initWithJavaIoInputStream_withNSString_(rulesIS, OrgApacheCommonsCodecCharEncoding_UTF_8);
      OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_parseRulesWithJavaUtilScanner_withNSString_withJavaUtilMap_withJavaUtilMap_(scanner, OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RESOURCE_FILE, OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RULES, OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_FOLDINGS);
      [scanner close];
      for (id<JavaUtilMap_Entry> __strong rule in nil_chk([OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RULES entrySet])) {
        id<JavaUtilList> ruleList = [((id<JavaUtilMap_Entry>) nil_chk(rule)) getValue];
        JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(ruleList, new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init());
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex)
  }
}

@end

void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_parseRulesWithJavaUtilScanner_withNSString_withJavaUtilMap_withJavaUtilMap_(JavaUtilScanner *scanner, NSString *location, id<JavaUtilMap> ruleMapping, id<JavaUtilMap> asciiFoldings) {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initialize();
  jint currentLine = 0;
  jboolean inMultilineComment = false;
  while ([((JavaUtilScanner *) nil_chk(scanner)) hasNextLine]) {
    currentLine++;
    NSString *rawLine = [scanner nextLine];
    NSString *line = rawLine;
    if (inMultilineComment) {
      if ([((NSString *) nil_chk(line)) java_hasSuffix:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MULTILINE_COMMENT_END]) {
        inMultilineComment = false;
      }
      continue;
    }
    if ([((NSString *) nil_chk(line)) java_hasPrefix:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MULTILINE_COMMENT_START]) {
      inMultilineComment = true;
    }
    else {
      jint cmtI = [line java_indexOfString:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_COMMENT];
      if (cmtI >= 0) {
        line = [line java_substring:0 endIndex:cmtI];
      }
      line = [((NSString *) nil_chk(line)) java_trim];
      if ([((NSString *) nil_chk(line)) java_length] == 0) {
        continue;
      }
      if ([line java_contains:@"="]) {
        IOSObjectArray *parts = [line java_split:@"="];
        if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$$$$", @"Malformed folding statement split into ", parts->size_, @" parts: ", rawLine, @" in ", location));
        }
        else {
          NSString *leftCharacter = IOSObjectArray_Get(parts, 0);
          NSString *rightCharacter = IOSObjectArray_Get(parts, 1);
          if ([((NSString *) nil_chk(leftCharacter)) java_length] != 1 || [((NSString *) nil_chk(rightCharacter)) java_length] != 1) {
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Malformed folding statement - patterns are not single characters: ", rawLine, @" in ", location));
          }
          (void) [((id<JavaUtilMap>) nil_chk(asciiFoldings)) putWithId:JavaLangCharacter_valueOfWithChar_([leftCharacter charAtWithInt:0]) withId:JavaLangCharacter_valueOfWithChar_([((NSString *) nil_chk(rightCharacter)) charAtWithInt:0])];
        }
      }
      else {
        IOSObjectArray *parts = [line java_split:@"\\s+"];
        if (((IOSObjectArray *) nil_chk(parts))->size_ != 4) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$$$$", @"Malformed rule statement split into ", parts->size_, @" parts: ", rawLine, @" in ", location));
        }
        else {
          @try {
            NSString *pattern = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 0));
            NSString *replacement1 = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 1));
            NSString *replacement2 = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 2));
            NSString *replacement3 = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 3));
            OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *r = new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(pattern, replacement1, replacement2, replacement3);
            jchar patternKey = [((NSString *) nil_chk(r->pattern_)) charAtWithInt:0];
            id<JavaUtilList> rules = [((id<JavaUtilMap>) nil_chk(ruleMapping)) getWithId:JavaLangCharacter_valueOfWithChar_(patternKey)];
            if (rules == nil) {
              rules = new_JavaUtilArrayList_init();
              (void) [ruleMapping putWithId:JavaLangCharacter_valueOfWithChar_(patternKey) withId:rules];
            }
            [rules addWithId:r];
          }
          @catch (JavaLangIllegalArgumentException *e) {
            @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$I$$", @"Problem parsing line '", currentLine, @"' in ", location), e);
          }
        }
      }
    }
  }
}

NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_stripQuotesWithNSString_(NSString *str) {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initialize();
  if ([((NSString *) nil_chk(str)) java_hasPrefix:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_DOUBLE_QUOTE]) {
    str = [str java_substring:1];
  }
  if ([((NSString *) nil_chk(str)) java_hasSuffix:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_DOUBLE_QUOTE]) {
    str = [str java_substring:0 endIndex:[str java_length] - 1];
  }
  return str;
}

void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_init(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *self) {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initWithBoolean_(self, true);
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, init)
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, init)
}

void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initWithBoolean_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *self, jboolean folding) {
  NSObject_init(self);
  self->folding_ = folding;
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initWithBoolean_(jboolean folding) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, initWithBoolean_, folding)
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_initWithBoolean_(jboolean folding) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex, initWithBoolean_, folding)
}

NSString *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_cleanupWithNSString_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *self, NSString *input) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  {
    IOSCharArray *a__ = [((NSString *) nil_chk(input)) java_toCharArray];
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar ch = *b__++;
      if (JavaLangCharacter_isWhitespaceWithChar_(ch)) {
        continue;
      }
      ch = JavaLangCharacter_toLowerCaseWithChar_(ch);
      if (self->folding_ && [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_FOLDINGS)) containsKeyWithId:JavaLangCharacter_valueOfWithChar_(ch)]) {
        ch = [((JavaLangCharacter *) nil_chk([((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_FOLDINGS)) getWithId:JavaLangCharacter_valueOfWithChar_(ch)])) charValue];
      }
      (void) [sb appendWithChar:ch];
    }
  }
  return [sb description];
}

IOSObjectArray *OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_soundexWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex *self, NSString *source, jboolean branching) {
  if (source == nil) {
    return nil;
  }
  NSString *input = OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_cleanupWithNSString_(self, source);
  id<JavaUtilSet> currentBranches = new_JavaUtilLinkedHashSet_init();
  [currentBranches addWithId:new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init()];
  jchar lastChar = 0x0000;
  for (jint index = 0; index < [((NSString *) nil_chk(input)) java_length]; index++) {
    jchar ch = [input charAtWithInt:index];
    if (JavaLangCharacter_isWhitespaceWithChar_(ch)) {
      continue;
    }
    NSString *inputContext = [input java_substring:index];
    id<JavaUtilList> rules = [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_RULES)) getWithId:JavaLangCharacter_valueOfWithChar_(ch)];
    if (rules == nil) {
      continue;
    }
    id<JavaUtilList> nextBranches = branching ? new_JavaUtilArrayList_init() : JreLoadStatic(JavaUtilCollections, EMPTY_LIST);
    for (OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule * __strong rule in rules) {
      if ([((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *) nil_chk(rule)) matchesWithNSString:inputContext]) {
        if (branching) {
          [nextBranches clear];
        }
        IOSObjectArray *replacements = [rule getReplacementsWithNSString:inputContext withBoolean:lastChar == 0x0000];
        jboolean branchingRequired = ((IOSObjectArray *) nil_chk(replacements))->size_ > 1 && branching;
        for (OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch * __strong branch in currentBranches) {
          {
            IOSObjectArray *a__ = replacements;
            NSString * const *b__ = a__->buffer_;
            NSString * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              NSString *nextReplacement = *b__++;
              OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *nextBranch = branchingRequired ? [((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *) nil_chk(branch)) createBranch] : branch;
              jboolean force = (lastChar == 'm' && ch == 'n') || (lastChar == 'n' && ch == 'm');
              [nextBranch processNextReplacementWithNSString:nextReplacement withBoolean:force];
              if (branching) {
                [nextBranches addWithId:nextBranch];
              }
              else {
                break;
              }
            }
          }
        }
        if (branching) {
          [currentBranches clear];
          [currentBranches addAllWithJavaUtilCollection:nextBranches];
        }
        index += [rule getPatternLength] - 1;
        break;
      }
    }
    lastChar = ch;
  }
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:[currentBranches size] type:NSString_class_()];
  jint index = 0;
  for (OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch * __strong branch in currentBranches) {
    [((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *) nil_chk(branch)) finish];
    (void) IOSObjectArray_Set(result, index++, [branch description]);
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex)

@implementation OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *)createBranch {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *branch = new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init();
  (void) [((JavaLangStringBuilder *) nil_chk(branch->builder_)) appendWithNSString:[self description]];
  branch->lastReplacement_ = self->lastReplacement_;
  return branch;
}

- (jboolean)isEqual:(id)other {
  if (self == other) {
    return true;
  }
  if (!([other isKindOfClass:[OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch class]])) {
    return false;
  }
  return [((NSString *) nil_chk([self description])) isEqual:[((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *) nil_chk(((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *) cast_chk(other, [OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch class])))) description]];
}

- (void)finish {
  while ([((JavaLangStringBuilder *) nil_chk(builder_)) java_length] < OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MAX_LENGTH) {
    (void) [builder_ appendWithChar:'0'];
    cachedString_ = nil;
  }
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

- (void)processNextReplacementWithNSString:(NSString *)replacement
                               withBoolean:(jboolean)forceAppend {
  jboolean append = lastReplacement_ == nil || ![lastReplacement_ java_hasSuffix:replacement] || forceAppend;
  if (append && [((JavaLangStringBuilder *) nil_chk(builder_)) java_length] < OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MAX_LENGTH) {
    (void) [((JavaLangStringBuilder *) nil_chk(builder_)) appendWithNSString:replacement];
    if ([builder_ java_length] > OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MAX_LENGTH) {
      (void) [builder_ delete__WithInt:OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_MAX_LENGTH withInt:[builder_ java_length]];
    }
    cachedString_ = nil;
  }
  lastReplacement_ = replacement;
}

- (NSString *)description {
  if (cachedString_ == nil) {
    cachedString_ = [((JavaLangStringBuilder *) nil_chk(builder_)) description];
  }
  return cachedString_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createBranch);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(finish);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(processNextReplacementWithNSString:withBoolean:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "builder_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastReplacement_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "hashCode", "processNextReplacement", "LNSString;Z", "toString", "LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch = { "Branch", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1a, 7, 3, 6, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch;
}

@end

void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *self) {
  NSObject_init(self);
  self->builder_ = new_JavaLangStringBuilder_init();
  self->lastReplacement_ = nil;
  self->cachedString_ = nil;
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch, init)
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Branch)

@implementation OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule

- (instancetype)initWithNSString:(NSString *)pattern
                    withNSString:(NSString *)replacementAtStart
                    withNSString:(NSString *)replacementBeforeVowel
                    withNSString:(NSString *)replacementDefault {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(self, pattern, replacementAtStart, replacementBeforeVowel, replacementDefault);
  return self;
}

- (jint)getPatternLength {
  return [((NSString *) nil_chk(pattern_)) java_length];
}

- (IOSObjectArray *)getReplacementsWithNSString:(NSString *)context
                                    withBoolean:(jboolean)atStart {
  if (atStart) {
    return replacementAtStart_;
  }
  jint nextIndex = [self getPatternLength];
  jboolean nextCharIsVowel = nextIndex < [((NSString *) nil_chk(context)) java_length] ? OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_isVowelWithChar_(self, [context charAtWithInt:nextIndex]) : false;
  if (nextCharIsVowel) {
    return replacementBeforeVowel_;
  }
  return replacementDefault_;
}

- (jboolean)isVowelWithChar:(jchar)ch {
  return OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_isVowelWithChar_(self, ch);
}

- (jboolean)matchesWithNSString:(NSString *)context {
  return [((NSString *) nil_chk(context)) java_hasPrefix:pattern_];
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"%s=(%s,%s,%s)", [IOSObjectArray newArrayWithObjects:(id[]){ pattern_, JavaUtilArrays_asListWithNSObjectArray_(replacementAtStart_), JavaUtilArrays_asListWithNSObjectArray_(replacementBeforeVowel_), JavaUtilArrays_asListWithNSObjectArray_(replacementDefault_) } count:4 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:);
  methods[1].selector = @selector(getPatternLength);
  methods[2].selector = @selector(getReplacementsWithNSString:withBoolean:);
  methods[3].selector = @selector(isVowelWithChar:);
  methods[4].selector = @selector(matchesWithNSString:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacementAtStart_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacementBeforeVowel_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacementDefault_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;LNSString;", "getReplacements", "LNSString;Z", "isVowel", "C", "matches", "LNSString;", "toString", "LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule = { "Rule", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1a, 6, 4, 8, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule;
}

@end

void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *self, NSString *pattern, NSString *replacementAtStart, NSString *replacementBeforeVowel, NSString *replacementDefault) {
  NSObject_init(self);
  self->pattern_ = pattern;
  self->replacementAtStart_ = [((NSString *) nil_chk(replacementAtStart)) java_split:@"\\|"];
  self->replacementBeforeVowel_ = [((NSString *) nil_chk(replacementBeforeVowel)) java_split:@"\\|"];
  self->replacementDefault_ = [((NSString *) nil_chk(replacementDefault)) java_split:@"\\|"];
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(NSString *pattern, NSString *replacementAtStart, NSString *replacementBeforeVowel, NSString *replacementDefault) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule, initWithNSString_withNSString_withNSString_withNSString_, pattern, replacementAtStart, replacementBeforeVowel, replacementDefault)
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_initWithNSString_withNSString_withNSString_withNSString_(NSString *pattern, NSString *replacementAtStart, NSString *replacementBeforeVowel, NSString *replacementDefault) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule, initWithNSString_withNSString_withNSString_withNSString_, pattern, replacementAtStart, replacementBeforeVowel, replacementDefault)
}

jboolean OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule_isVowelWithChar_(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *self, jchar ch) {
  return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule)

@implementation OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *)rule1
               withId:(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *)rule2 {
  return [((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *) nil_chk(rule2)) getPatternLength] - [((OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule *) nil_chk(rule1)) getPatternLength];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule;LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_Rule;", "LOrgApacheCommonsCodecLanguageDaitchMokotoffSoundex;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/commons/codec/language/DaitchMokotoffSoundex$Rule;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 = { "", "org.apache.commons.codec.language", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1;
}

@end

void OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 *new_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1, init)
}

OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1 *create_OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDaitchMokotoffSoundex_1, init)
}
